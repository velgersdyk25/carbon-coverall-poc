<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="6575" failures="0" errors="0" time="117.613">
  <testsuite name="scss/components/inline-loading" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="1.34" tests="1">
    <testcase classname="scss/components/inline-loading Public API" name="scss/components/inline-loading Public API" time="0.297">
    </testcase>
  </testsuite>
  <testsuite name="scss/layout.scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:29" time="0.609" tests="31">
    <testcase classname="scss/layout.scss should export spacing step `0`" name="scss/layout.scss should export spacing step `0`" time="0.033">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `1`" name="scss/layout.scss should export spacing step `1`" time="0.012">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `2`" name="scss/layout.scss should export spacing step `2`" time="0.017">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `3`" name="scss/layout.scss should export spacing step `3`" time="0.011">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `4`" name="scss/layout.scss should export spacing step `4`" time="0.015">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `5`" name="scss/layout.scss should export spacing step `5`" time="0.017">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `6`" name="scss/layout.scss should export spacing step `6`" time="0.006">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `7`" name="scss/layout.scss should export spacing step `7`" time="0.006">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `8`" name="scss/layout.scss should export spacing step `8`" time="0.004">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `9`" name="scss/layout.scss should export spacing step `9`" time="0.007">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `10`" name="scss/layout.scss should export spacing step `10`" time="0.004">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `11`" name="scss/layout.scss should export spacing step `11`" time="0.004">
    </testcase>
    <testcase classname="scss/layout.scss should export spacing step `12`" name="scss/layout.scss should export spacing step `12`" time="0.003">
    </testcase>
    <testcase classname="scss/layout.scss should export fluid spacing step `0`" name="scss/layout.scss should export fluid spacing step `0`" time="0.004">
    </testcase>
    <testcase classname="scss/layout.scss should export fluid spacing step `1`" name="scss/layout.scss should export fluid spacing step `1`" time="0.027">
    </testcase>
    <testcase classname="scss/layout.scss should export fluid spacing step `2`" name="scss/layout.scss should export fluid spacing step `2`" time="0.016">
    </testcase>
    <testcase classname="scss/layout.scss should export fluid spacing step `3`" name="scss/layout.scss should export fluid spacing step `3`" time="0.009">
    </testcase>
    <testcase classname="scss/layout.scss should export container step `0`" name="scss/layout.scss should export container step `0`" time="0.006">
    </testcase>
    <testcase classname="scss/layout.scss should export container step `1`" name="scss/layout.scss should export container step `1`" time="0.004">
    </testcase>
    <testcase classname="scss/layout.scss should export container step `2`" name="scss/layout.scss should export container step `2`" time="0.023">
    </testcase>
    <testcase classname="scss/layout.scss should export container step `3`" name="scss/layout.scss should export container step `3`" time="0.005">
    </testcase>
    <testcase classname="scss/layout.scss should export container step `4`" name="scss/layout.scss should export container step `4`" time="0.007">
    </testcase>
    <testcase classname="scss/layout.scss should export icon-size step `0`" name="scss/layout.scss should export icon-size step `0`" time="0.003">
    </testcase>
    <testcase classname="scss/layout.scss should export icon-size step `1`" name="scss/layout.scss should export icon-size step `1`" time="0.003">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `0`" name="scss/layout.scss should export layout step `0`" time="0.008">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `1`" name="scss/layout.scss should export layout step `1`" time="0.016">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `2`" name="scss/layout.scss should export layout step `2`" time="0.008">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `3`" name="scss/layout.scss should export layout step `3`" time="0.022">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `4`" name="scss/layout.scss should export layout step `4`" time="0.041">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `5`" name="scss/layout.scss should export layout step `5`" time="0.014">
    </testcase>
    <testcase classname="scss/layout.scss should export layout step `6`" name="scss/layout.scss should export layout step `6`" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/accordion" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:29" time="0.862" tests="2">
    <testcase classname="scss/components/accordion Public API" name="scss/components/accordion Public API" time="0.322">
    </testcase>
    <testcase classname="scss/components/accordion configuration" name="scss/components/accordion configuration" time="0.353">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/button" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:30" time="1.224" tests="2">
    <testcase classname="scss/components/button Public API" name="scss/components/button Public API" time="0.622">
    </testcase>
    <testcase classname="scss/components/button configuration" name="scss/components/button configuration" time="0.431">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/notification" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:32" time="1.423" tests="1">
    <testcase classname="scss/components/notification Public API" name="scss/components/notification Public API" time="1.254">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/modal" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:33" time="1.235" tests="1">
    <testcase classname="scss/components/modal Public API" name="scss/components/modal Public API" time="0.954">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/search" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:34" time="1.169" tests="1">
    <testcase classname="scss/components/search Public API" name="scss/components/search Public API" time="0.959">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/structured-list" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:35" time="0.788" tests="1">
    <testcase classname="scss/components/structured-list Public API" name="scss/components/structured-list Public API" time="0.617">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-select" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:36" time="0.633" tests="1">
    <testcase classname="scss/components/fluid-select Public API" name="scss/components/fluid-select Public API" time="0.446">
    </testcase>
  </testsuite>
  <testsuite name="scss/layer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:37" time="0.573" tests="1">
    <testcase classname="scss/layer should map layer set values to scoped $prefix--layer selectors" name="scss/layer should map layer set values to scoped $prefix--layer selectors" time="0.413">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/select" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:37" time="0.702" tests="1">
    <testcase classname="scss/components/select Public API" name="scss/components/select Public API" time="0.52">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/form" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:38" time="0.799" tests="2">
    <testcase classname="scss/components/form Public API" name="scss/components/form Public API" time="0.337">
    </testcase>
    <testcase classname="scss/components/form configuration" name="scss/components/form configuration" time="0.307">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/dropdown" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:39" time="1.506" tests="1">
    <testcase classname="scss/components/dropdown Public API" name="scss/components/dropdown Public API" time="1.373">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/code-snippet" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:40" time="1.847" tests="2">
    <testcase classname="scss/components/code-snippet Public API" name="scss/components/code-snippet Public API" time="0.916">
    </testcase>
    <testcase classname="scss/components/code-snippet configuration" name="scss/components/code-snippet configuration" time="0.772">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/combo-box" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:42" time="1.406" tests="1">
    <testcase classname="scss/components/combo-box Public API" name="scss/components/combo-box Public API" time="1.245">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/reset" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:44" time="0.49" tests="1">
    <testcase classname="@carbon/styles/scss/reset Public API" name="@carbon/styles/scss/reset Public API" time="0.297">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/type" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:44" time="0.875" tests="4">
    <testcase classname="@carbon/styles/scss/type Public API" name="@carbon/styles/scss/type Public API" time="0.171">
    </testcase>
    <testcase classname="@carbon/styles/scss/type prefix" name="@carbon/styles/scss/type prefix" time="0.138">
    </testcase>
    <testcase classname="@carbon/styles/scss/type type-classes mixin" name="@carbon/styles/scss/type type-classes mixin" time="0.295">
    </testcase>
    <testcase classname="type custom properties should emit the css Custom properties for non-fluid typography" name="type custom properties should emit the css Custom properties for non-fluid typography" time="0.104">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/pictograms" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="17.904" tests="2">
    <testcase classname="@carbon/pictograms should export each SVG asset" name="@carbon/pictograms should export each SVG asset" time="7.315">
    </testcase>
    <testcase classname="@carbon/pictograms should export each SVG asset as a direct path" name="@carbon/pictograms should export each SVG asset as a direct path" time="6.938">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/time-picker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:46" time="1.518" tests="1">
    <testcase classname="scss/components/time-picker Public API" name="scss/components/time-picker Public API" time="0.918">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/date-picker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:47" time="0.86" tests="1">
    <testcase classname="scss/components/date-picker Public API" name="scss/components/date-picker Public API" time="0.713">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/data-table" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:45" time="3.397" tests="5">
    <testcase classname="scss/components/data-table Public API" name="scss/components/data-table Public API" time="1.18">
    </testcase>
    <testcase classname="scss/components/data-table/action Public API" name="scss/components/data-table/action Public API" time="0.917">
    </testcase>
    <testcase classname="scss/components/data-table/expandable Public API" name="scss/components/data-table/expandable Public API" time="0.837">
    </testcase>
    <testcase classname="scss/components/data-table/skeleton Public API" name="scss/components/data-table/skeleton Public API" time="0.13">
    </testcase>
    <testcase classname="scss/components/data-table/sort Public API" name="scss/components/data-table/sort Public API" time="0.206">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/toggle" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:48" time="0.69" tests="1">
    <testcase classname="scss/components/toggle Public API" name="scss/components/toggle Public API" time="0.533">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/link" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:49" time="0.55" tests="1">
    <testcase classname="scss/components/link Public API" name="scss/components/link Public API" time="0.266">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/feature-flags" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:49" time="0.274" tests="5">
    <testcase classname="@carbon/feature-flags add should add the given flag and set whether its enabled" name="@carbon/feature-flags add should add the given flag and set whether its enabled" time="0.03">
    </testcase>
    <testcase classname="@carbon/feature-flags enable should enable the given feature flag" name="@carbon/feature-flags enable should enable the given feature flag" time="0.01">
    </testcase>
    <testcase classname="@carbon/feature-flags disable should disable the given feature flag" name="@carbon/feature-flags disable should disable the given feature flag" time="0.017">
    </testcase>
    <testcase classname="@carbon/feature-flags enabled should return whether a flag is enabled or disabled" name="@carbon/feature-flags enabled should return whether a flag is enabled or disabled" time="0.006">
    </testcase>
    <testcase classname="@carbon/feature-flags merge should set each feature flag given" name="@carbon/feature-flags merge should set each feature flag given" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/colors" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:49" time="0.193" tests="1">
    <testcase classname="@carbon/colors Public API" name="@carbon/colors Public API" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/compat" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:49" time="0.904" tests="6">
    <testcase classname="@carbon/styles/scss/compat should export white, g10, g90, and g100 themes" name="@carbon/styles/scss/compat should export white, g10, g90, and g100 themes" time="0.264">
    </testcase>
    <testcase classname="@carbon/styles/scss/compat should export v10 tokens as Sass Variables" name="@carbon/styles/scss/compat should export v10 tokens as Sass Variables" time="0.205">
    </testcase>
    <testcase classname="@carbon/styles/scss/compat should export v11 tokens that match the fallback theme" name="@carbon/styles/scss/compat should export v11 tokens that match the fallback theme" time="0.185">
    </testcase>
    <testcase classname="@carbon/styles/scss/compat should export v10 type tokens" name="@carbon/styles/scss/compat should export v10 type tokens" time="0.097">
    </testcase>
    <testcase classname="@carbon/styles/scss/compat should export v10 layout tokens" name="@carbon/styles/scss/compat should export v10 layout tokens" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles/scss/compat should export v10 motion tokens" name="@carbon/styles/scss/compat should export v10 motion tokens" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/checkbox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:50" time="0.599" tests="1">
    <testcase classname="scss/components/checkbox Public API" name="scss/components/checkbox Public API" time="0.399">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/number-input" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:50" time="0.613" tests="1">
    <testcase classname="scss/components/number-input Public API" name="scss/components/number-input Public API" time="0.494">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/loading" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:50" time="0.426" tests="1">
    <testcase classname="scss/components/loading Public API" name="scss/components/loading Public API" time="0.299">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/progress-bar" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:50" time="0.472" tests="1">
    <testcase classname="scss/components/progress-bar Public API" name="scss/components/progress-bar Public API" time="0.332">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/list-box" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:51" time="1.431" tests="1">
    <testcase classname="scss/components/list-box Public API" name="scss/components/list-box Public API" time="1.318">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-multiselect" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:51" time="1.571" tests="1">
    <testcase classname="scss/components/fluid-multiselect Public API" name="scss/components/fluid-multiselect Public API" time="1.432">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-list-box" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:52" time="0.757" tests="1">
    <testcase classname="scss/components/fluid-list-box Public API" name="scss/components/fluid-list-box Public API" time="0.49">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/text-input" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:52" time="0.764" tests="1">
    <testcase classname="scss/components/text-input Public API" name="scss/components/text-input Public API" time="0.481">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/text-area" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:53" time="0.667" tests="1">
    <testcase classname="scss/components/text-area Public API" name="scss/components/text-area Public API" time="0.441">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/pictograms-react" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="26.623" tests="2">
    <testcase classname="@carbon/pictograms-react should export each SVG asset" name="@carbon/pictograms-react should export each SVG asset" time="3.006">
    </testcase>
    <testcase classname="@carbon/pictograms-react should export each SVG asset as a direct path" name="@carbon/pictograms-react should export each SVG asset as a direct path" time="20.071">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/pagination-nav" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:53" time="1.195" tests="1">
    <testcase classname="scss/components/pagination-nav Public API" name="scss/components/pagination-nav Public API" time="0.931">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-dropdown" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:54" time="1.608" tests="1">
    <testcase classname="scss/components/fluid-dropdown Public API" name="scss/components/fluid-dropdown Public API" time="1.476">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/tile" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:54" time="0.902" tests="1">
    <testcase classname="scss/components/tile Public API" name="scss/components/tile Public API" time="0.716">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-search" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:54" time="1.297" tests="1">
    <testcase classname="scss/components/fluid-search Public API" name="scss/components/fluid-search Public API" time="0.713">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/tooltip" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:55" time="0.685" tests="1">
    <testcase classname="scss/components/tooltip Public API" name="scss/components/tooltip Public API" time="0.556">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-text-area" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:56" time="0.707" tests="1">
    <testcase classname="scss/components/fluid-text-area Public API" name="scss/components/fluid-text-area Public API" time="0.481">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/tabs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:55" time="1.095" tests="1">
    <testcase classname="scss/components/tabs Public API" name="scss/components/tabs Public API" time="0.812">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/radio-button" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:56" time="0.694" tests="1">
    <testcase classname="scss/components/radio-button Public API" name="scss/components/radio-button Public API" time="0.579">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/ui-shell" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:56" time="1.238" tests="1">
    <testcase classname="scss/components/ui-shell Public API" name="scss/components/ui-shell Public API" time="1.081">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/menu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:57" time="0.841" tests="1">
    <testcase classname="scss/components/menu Public API" name="scss/components/menu Public API" time="0.657">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-combo-box" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:56" time="1.607" tests="1">
    <testcase classname="scss/components/fluid-combo-box Public API" name="scss/components/fluid-combo-box Public API" time="1.47">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/feature-flags" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:58" time="0.58" tests="10">
    <testcase classname="@carbon/feature-flags add should add the given flag and set whether its enabled" name="@carbon/feature-flags add should add the given flag and set whether its enabled" time="0.274">
    </testcase>
    <testcase classname="@carbon/feature-flags add should throw if a duplicate flag name is given" name="@carbon/feature-flags add should throw if a duplicate flag name is given" time="0.016">
    </testcase>
    <testcase classname="@carbon/feature-flags enable should enable the given feature flag" name="@carbon/feature-flags enable should enable the given feature flag" time="0.002">
    </testcase>
    <testcase classname="@carbon/feature-flags enable should throw if the given flag does not exist" name="@carbon/feature-flags enable should throw if the given flag does not exist" time="0.003">
    </testcase>
    <testcase classname="@carbon/feature-flags disable should disable the given feature flag" name="@carbon/feature-flags disable should disable the given feature flag" time="0.003">
    </testcase>
    <testcase classname="@carbon/feature-flags disable should throw if the given flag does not exist" name="@carbon/feature-flags disable should throw if the given flag does not exist" time="0.002">
    </testcase>
    <testcase classname="@carbon/feature-flags enabled should return whether a flag is enabled or disabled" name="@carbon/feature-flags enabled should return whether a flag is enabled or disabled" time="0.001">
    </testcase>
    <testcase classname="@carbon/feature-flags enabled should throw if the given flag does not exist" name="@carbon/feature-flags enabled should throw if the given flag does not exist" time="0.001">
    </testcase>
    <testcase classname="@carbon/feature-flags merge should set each feature flag given" name="@carbon/feature-flags merge should set each feature flag given" time="0.002">
    </testcase>
    <testcase classname="@carbon/feature-flags merge should override duplicate keys with the given flag" name="@carbon/feature-flags merge should override duplicate keys with the given flag" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/colors" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:58" time="0.215" tests="1">
    <testcase classname="@carbon/styles/scss/colors Public API" name="@carbon/styles/scss/colors Public API" time="0.081">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-time-picker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:58" time="0.901" tests="1">
    <testcase classname="scss/components/fluid-time-picker Public API" name="scss/components/fluid-time-picker Public API" time="0.657">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/overflow-menu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:58" time="1.031" tests="1">
    <testcase classname="scss/components/overflow-menu Public API" name="scss/components/overflow-menu Public API" time="0.861">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/treeview" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:58" time="0.677" tests="1">
    <testcase classname="scss/components/treeview Public API" name="scss/components/treeview Public API" time="0.517">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/list" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:59" time="0.552" tests="1">
    <testcase classname="scss/components/list Public API" name="scss/components/list Public API" time="0.373">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/copy-button" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:59" time="1.109" tests="1">
    <testcase classname="scss/components/copy-button Public API" name="scss/components/copy-button Public API" time="0.992">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/tag" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:59" time="1.013" tests="1">
    <testcase classname="scss/components/tag Public API" name="scss/components/tag Public API" time="0.877">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-number-input" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:00" time="0.783" tests="1">
    <testcase classname="scss/components/fluid-number-input Public API" name="scss/components/fluid-number-input Public API" time="0.615">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/multiselect" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:59" time="1.582" tests="1">
    <testcase classname="scss/components/multiselect Public API" name="scss/components/multiselect Public API" time="1.358">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/breadcrumb" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:00" time="1.245" tests="1">
    <testcase classname="scss/components/breadcrumb Public API" name="scss/components/breadcrumb Public API" time="1.099">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-text-input" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:01" time="0.788" tests="1">
    <testcase classname="scss/components/fluid-text-input Public API" name="scss/components/fluid-text-input Public API" time="0.613">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/themes" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:01" time="0.359" tests="1">
    <testcase classname="@carbon/styles/scss/themes Public API" name="@carbon/styles/scss/themes Public API" time="0.187">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/file-uploader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:02" time="1.249" tests="1">
    <testcase classname="scss/components/file-uploader Public API" name="scss/components/file-uploader Public API" time="0.981">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/content-switcher" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:02" time="1.233" tests="1">
    <testcase classname="scss/components/content-switcher Public API" name="scss/components/content-switcher Public API" time="0.996">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/fluid-date-picker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:03" time="1.158" tests="1">
    <testcase classname="scss/components/fluid-date-picker Public API" name="scss/components/fluid-date-picker Public API" time="0.926">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/progress-indicator" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:03" time="1.562" tests="1">
    <testcase classname="scss/components/progress-indicator Public API" name="scss/components/progress-indicator Public API" time="1.246">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/theme" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:04" time="0.749" tests="1">
    <testcase classname="@carbon/styles/scss/theme Public API" name="@carbon/styles/scss/theme Public API" time="0.367">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/slider" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:05" time="0.916" tests="1">
    <testcase classname="scss/components/slider Public API" name="scss/components/slider Public API" time="0.75">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/skeleton-styles" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:05" time="0.653" tests="1">
    <testcase classname="scss/components/skeleton-styles Public API" name="scss/components/skeleton-styles Public API" time="0.363">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/spacing" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:06" time="0.212" tests="1">
    <testcase classname="@carbon/styles/scss/spacing Public API" name="@carbon/styles/scss/spacing Public API" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:01" time="5.403" tests="1">
    <testcase classname=" should load" name=" should load" time="5.331">
    </testcase>
  </testsuite>
  <testsuite name="scss/components/pagination" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:06" time="1.514" tests="1">
    <testcase classname="scss/components/pagination Public API" name="scss/components/pagination Public API" time="1.312">
    </testcase>
  </testsuite>
  <testsuite name="zone" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:05" time="5.651" tests="1">
    <testcase classname="zone should set a component token value to the theme of a zone" name="zone should set a component token value to the theme of a zone" time="5.386">
    </testcase>
  </testsuite>
  <testsuite name="Link" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:08" time="2.498" tests="15">
    <testcase classname="Link should render an &lt;a&gt; element" name="Link should render an &lt;a&gt; element" time="0.083">
    </testcase>
    <testcase classname="Link should inherit the href property" name="Link should inherit the href property" time="0.004">
    </testcase>
    <testcase classname="Link should include child content" name="Link should include child content" time="0.005">
    </testcase>
    <testcase classname="Link should support a custom class on the element with a link role" name="Link should support a custom class on the element with a link role" time="0.01">
    </testcase>
    <testcase classname="Link should support being disabled" name="Link should support being disabled" time="0.017">
    </testcase>
    <testcase classname="Link should support the inline link variant" name="Link should support the inline link variant" time="0.002">
    </testcase>
    <testcase classname="Link should support the sm size variant" name="Link should support the sm size variant" time="0.002">
    </testcase>
    <testcase classname="Link should support the md size variant" name="Link should support the md size variant" time="0.006">
    </testcase>
    <testcase classname="Link should support the lg size variant" name="Link should support the lg size variant" time="0.005">
    </testcase>
    <testcase classname="Link should add rel=&quot;noopener&quot; automatically if target=&quot;_blank&quot;" name="Link should add rel=&quot;noopener&quot; automatically if target=&quot;_blank&quot;" time="0.003">
    </testcase>
    <testcase classname="Link should receive keyboard focus" name="Link should receive keyboard focus" time="0.024">
    </testcase>
    <testcase classname="Link should not receive keyboard focus when disabled" name="Link should not receive keyboard focus when disabled" time="0.006">
    </testcase>
    <testcase classname="Link automated verification testing should have no aXe violations" name="Link automated verification testing should have no aXe violations" time="0.088">
    </testcase>
    <testcase classname="Link automated verification testing should have no Accessibility Checker violations" name="Link automated verification testing should have no Accessibility Checker violations" time="1.938">
    </testcase>
    <testcase classname="Link Component API should support a `ref` on the element with role of link" name="Link Component API should support a `ref` on the element with role of link" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="OverflowMenuItem - RTL" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:11" time="0.894" tests="18">
    <testcase classname="OverflowMenuItem - RTL renders as expected should support a className on the button node" name="OverflowMenuItem - RTL renders as expected should support a className on the button node" time="0.068">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should support a className on the outermost node" name="OverflowMenuItem - RTL renders as expected should support a className on the outermost node" time="0.002">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should spread extra props on the button node" name="OverflowMenuItem - RTL renders as expected should spread extra props on the button node" time="0.009">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should support a className on the anchor node" name="OverflowMenuItem - RTL renders as expected should support a className on the anchor node" time="0.005">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should spread extra props on the anchor node" name="OverflowMenuItem - RTL renders as expected should spread extra props on the anchor node" time="0.002">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call closeMenu on click" name="OverflowMenuItem - RTL renders as expected should call closeMenu on click" time="0.036">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should be disabled" name="OverflowMenuItem - RTL renders as expected should be disabled" time="0.006">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should have divider" name="OverflowMenuItem - RTL renders as expected should have divider" time="0.002">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should be delete button" name="OverflowMenuItem - RTL renders as expected should be delete button" time="0.003">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should render itemText" name="OverflowMenuItem - RTL renders as expected should render itemText" time="0.024">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onClick" name="OverflowMenuItem - RTL renders as expected should call onClick" time="0.042">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onMouseDown" name="OverflowMenuItem - RTL renders as expected should call onMouseDown" time="0.108">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onMouseEnter" name="OverflowMenuItem - RTL renders as expected should call onMouseEnter" time="0.078">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onMouseUp" name="OverflowMenuItem - RTL renders as expected should call onMouseUp" time="0.039">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onFocus" name="OverflowMenuItem - RTL renders as expected should call onFocus" time="0.022">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onKeyDown" name="OverflowMenuItem - RTL renders as expected should call onKeyDown" time="0.024">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should call onKeyUp" name="OverflowMenuItem - RTL renders as expected should call onKeyUp" time="0.027">
    </testcase>
    <testcase classname="OverflowMenuItem - RTL renders as expected should have title" name="OverflowMenuItem - RTL renders as expected should have title" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/fonts" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:11" time="1.364" tests="12">
    <testcase classname="@carbon/styles/scss/fonts should emit default fonts, weights, and styles" name="@carbon/styles/scss/fonts should emit default fonts, weights, and styles" time="0.41">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts should emit src from akamai cdn if $use-akamai-cdn is true" name="@carbon/styles/scss/fonts should emit src from akamai cdn if $use-akamai-cdn is true" time="0.26">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts should emit no @font-face blocks if $css--font-face is false" name="@carbon/styles/scss/fonts should emit no @font-face blocks if $css--font-face is false" time="0.061">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts should not emit fonts set to false" name="@carbon/styles/scss/fonts should not emit fonts set to false" time="0.087">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_mono.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_mono.scss should export all font weights as mixins" time="0.019">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans-arabic.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans-arabic.scss should export all font weights as mixins" time="0.02">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans-devanagari.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans-devanagari.scss should export all font weights as mixins" time="0.028">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans-hebrew.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans-hebrew.scss should export all font weights as mixins" time="0.03">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans-thai-looped.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans-thai-looped.scss should export all font weights as mixins" time="0.015">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans-thai.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans-thai.scss should export all font weights as mixins" time="0.019">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_sans.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_sans.scss should export all font weights as mixins" time="0.019">
    </testcase>
    <testcase classname="@carbon/styles/scss/fonts scss/fonts/_serif.scss should export all font weights as mixins" name="@carbon/styles/scss/fonts scss/fonts/_serif.scss should export all font weights as mixins" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Switcher" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:12" time="0.61" tests="14">
    <testcase classname="Switcher renders as expected - Component API should respect aria-label prop" name="Switcher renders as expected - Component API should respect aria-label prop" time="0.007">
    </testcase>
    <testcase classname="Switcher renders as expected - Component API should respect aria-labelledby prop" name="Switcher renders as expected - Component API should respect aria-labelledby prop" time="0.002">
    </testcase>
    <testcase classname="Switcher renders as expected - Component API should render children as expected" name="Switcher renders as expected - Component API should render children as expected" time="0.046">
    </testcase>
    <testcase classname="Switcher renders as expected - Component API should support a custom `className` prop on the outermost element" name="Switcher renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="Switcher renders as expected - Component API should correctly merge refs" name="Switcher renders as expected - Component API should correctly merge refs" time="0.001">
    </testcase>
    <testcase classname="Switcher renders as expected - Component API should apply aria attributes correctly" name="Switcher renders as expected - Component API should apply aria attributes correctly" time="0.019">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should focus the next valid index when moving forward" name="Switcher Switcher navigation and focus management should focus the next valid index when moving forward" time="0.056">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should focus the next valid index when moving backward" name="Switcher Switcher navigation and focus management should focus the next valid index when moving backward" time="0.067">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should focus next SwitcherItem when pressing ArrowDown from first item" name="Switcher Switcher navigation and focus management should focus next SwitcherItem when pressing ArrowDown from first item" time="0.103">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should focus previous SwitcherItem when pressing ArrowUp from last item" name="Switcher Switcher navigation and focus management should focus previous SwitcherItem when pressing ArrowUp from last item" time="0.016">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should wrap to first item when pressing ArrowDown from last SwitcherItem" name="Switcher Switcher navigation and focus management should wrap to first item when pressing ArrowDown from last SwitcherItem" time="0.012">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should wrap to last item when pressing ArrowUp from first SwitcherItem" name="Switcher Switcher navigation and focus management should wrap to last item when pressing ArrowUp from first SwitcherItem" time="0.02">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should skip non SwitcherItem elements" name="Switcher Switcher navigation and focus management should skip non SwitcherItem elements" time="0.02">
    </testcase>
    <testcase classname="Switcher Switcher navigation and focus management should handle keyboard navigation with mixed child types" name="Switcher Switcher navigation and focus management should handle keyboard navigation with mixed child types" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Toggle" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:12" time="0.358" tests="13">
    <testcase classname="Toggle renders as expected button and label ids should match" name="Toggle renders as expected button and label ids should match" time="0.024">
    </testcase>
    <testcase classname="Toggle renders as expected renders labelA when unchecked" name="Toggle renders as expected renders labelA when unchecked" time="0.011">
    </testcase>
    <testcase classname="Toggle renders as expected renders labelB when checked" name="Toggle renders as expected renders labelB when checked" time="0.004">
    </testcase>
    <testcase classname="Toggle renders as expected supports additional css class names" name="Toggle renders as expected supports additional css class names" time="0.004">
    </testcase>
    <testcase classname="Toggle renders as expected supports sm size" name="Toggle renders as expected supports sm size" time="0.006">
    </testcase>
    <testcase classname="Toggle renders as expected supports to use top label as side label" name="Toggle renders as expected supports to use top label as side label" time="0.016">
    </testcase>
    <testcase classname="Toggle renders as expected doesn&apos;t render sideLabel if props.hideLabel and no props.labelText is provided" name="Toggle renders as expected doesn&apos;t render sideLabel if props.hideLabel and no props.labelText is provided" time="0.004">
    </testcase>
    <testcase classname="Toggle behaves as expected supports to be disabled" name="Toggle behaves as expected supports to be disabled" time="0.007">
    </testcase>
    <testcase classname="Toggle behaves as expected can be controlled with props.toggled" name="Toggle behaves as expected can be controlled with props.toggled" time="0.01">
    </testcase>
    <testcase classname="Toggle behaves as expected does not change value when disabled" name="Toggle behaves as expected does not change value when disabled" time="0.026">
    </testcase>
    <testcase classname="Toggle behaves as expected does not change value when readonly" name="Toggle behaves as expected does not change value when readonly" time="0.028">
    </testcase>
    <testcase classname="Toggle emits events as expected passes along props.onClick to button" name="Toggle emits events as expected passes along props.onClick to button" time="0.021">
    </testcase>
    <testcase classname="Toggle emits events as expected emits props.onToggle when toggled and passes current state" name="Toggle emits events as expected emits props.onToggle when toggled and passes current state" time="0.065">
    </testcase>
  </testsuite>
  <testsuite name="useControllableState" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:12" time="0.8" tests="8">
    <testcase classname="useControllableState uncontrolled" name="useControllableState uncontrolled" time="0.095">
    </testcase>
    <testcase classname="useControllableState controlled" name="useControllableState controlled" time="0.059">
    </testcase>
    <testcase classname="useControllableState controlled to uncontrolled" name="useControllableState controlled to uncontrolled" time="0.043">
    </testcase>
    <testcase classname="useControllableState uncontrolled to controlled" name="useControllableState uncontrolled to controlled" time="0.018">
    </testcase>
    <testcase classname="useControllableState should handle functional updater correctly" name="useControllableState should handle functional updater correctly" time="0.042">
    </testcase>
    <testcase classname="useControllableState should call `onChange` with cumulative values for each character typed (uncontrolled)" name="useControllableState should call `onChange` with cumulative values for each character typed (uncontrolled)" time="0.149">
    </testcase>
    <testcase classname="useControllableState should maintain `defaultValue` after re-render (uncontrolled)" name="useControllableState should maintain `defaultValue` after re-render (uncontrolled)" time="0.007">
    </testcase>
    <testcase classname="useControllableState should work without `onChange` callback" name="useControllableState should work without `onChange` callback" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="SwitcherItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:13" time="0.464" tests="14">
    <testcase classname="SwitcherItem renders as expected - Component API should spread extra props onto Link element" name="SwitcherItem renders as expected - Component API should spread extra props onto Link element" time="0.04">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should respect aria-label prop" name="SwitcherItem renders as expected - Component API should respect aria-label prop" time="0.006">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should respect aria-labelledby prop" name="SwitcherItem renders as expected - Component API should respect aria-labelledby prop" time="0.014">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should render children as expected" name="SwitcherItem renders as expected - Component API should render children as expected" time="0.003">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should support a custom `className` prop on the outermost element" name="SwitcherItem renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should respect tabIndex prop" name="SwitcherItem renders as expected - Component API should respect tabIndex prop" time="0.004">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should handle onClick event" name="SwitcherItem renders as expected - Component API should handle onClick event" time="0.008">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should handle onKeyDown event" name="SwitcherItem renders as expected - Component API should handle onKeyDown event" time="0.006">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should handle keyboard navigation with ArrowUp and ArrowDown keys" name="SwitcherItem renders as expected - Component API should handle keyboard navigation with ArrowUp and ArrowDown keys" time="0.007">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should apply selected class when isSelected prop is true" name="SwitcherItem renders as expected - Component API should apply selected class when isSelected prop is true" time="0.004">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should have tabIndex 0 when expanded is true" name="SwitcherItem renders as expected - Component API should have tabIndex 0 when expanded is true" time="0.003">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should have tabIndex -1 when expanded is false" name="SwitcherItem renders as expected - Component API should have tabIndex -1 when expanded is false" time="0.001">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should not call handleSwitcherItemFocus when not provided" name="SwitcherItem renders as expected - Component API should not call handleSwitcherItemFocus when not provided" time="0.001">
    </testcase>
    <testcase classname="SwitcherItem renders as expected - Component API should not throw an error when onClick is not provided" name="SwitcherItem renders as expected - Component API should not throw an error when onClick is not provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="HeaderPanel" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:13" time="0.476" tests="11">
    <testcase classname="HeaderPanel renders as expected - Component API should spread extra props onto outermost element" name="HeaderPanel renders as expected - Component API should spread extra props onto outermost element" time="0.004">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should respect aria-label prop" name="HeaderPanel renders as expected - Component API should respect aria-label prop" time="0.011">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should respect aria-labelledby prop" name="HeaderPanel renders as expected - Component API should respect aria-labelledby prop" time="0.001">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should support a custom `className` prop on the outermost element" name="HeaderPanel renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should respect expanded prop" name="HeaderPanel renders as expected - Component API should respect expanded prop" time="0.002">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should render children as expected" name="HeaderPanel renders as expected - Component API should render children as expected" time="0.003">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should call `onHeaderPanelFocus` callback, when defined" name="HeaderPanel renders as expected - Component API should call `onHeaderPanelFocus` callback, when defined" time="0.026">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should not error when `onHeaderPanelFocus` is not defined" name="HeaderPanel renders as expected - Component API should not error when `onHeaderPanelFocus` is not defined" time="0.008">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should handle click" name="HeaderPanel renders as expected - Component API should handle click" time="0.014">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should handle onKeyDown" name="HeaderPanel renders as expected - Component API should handle onKeyDown" time="0.016">
    </testcase>
    <testcase classname="HeaderPanel renders as expected - Component API should handle onBlur" name="HeaderPanel renders as expected - Component API should handle onBlur" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:06" time="6.947" tests="1">
    <testcase classname=" Public API should only change with a semver change" name=" Public API should only change with a semver change" time="6.692">
    </testcase>
  </testsuite>
  <testsuite name="output" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:13" time="0.458" tests="3">
    <testcase classname="output should decorate the metadata with an output field with downsized assets" name="output should decorate the metadata with an output field with downsized assets" time="0.28">
    </testcase>
    <testcase classname="output should not downsample an asset if there is a bespoke size asset available" name="output should not downsample an asset if there is a bespoke size asset available" time="0.013">
    </testcase>
    <testcase classname="output should support the pictogram target for assets without sizes" name="output should support the pictogram target for assets without sizes" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/grid" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:13" time="0.674" tests="1">
    <testcase classname="@carbon/styles/scss/grid Public API" name="@carbon/styles/scss/grid Public API" time="0.452">
    </testcase>
  </testsuite>
  <testsuite name="deprecated" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:14" time="0.297" tests="1">
    <testcase classname="deprecated should throw an error if a deprecated icon is not in the registry" name="deprecated should throw an error if a deprecated icon is not in the registry" time="0.198">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:14" time="0.569" tests="32">
    <testcase classname="@carbon/scss assignments boolean" name="@carbon/scss assignments boolean" time="0.053">
    </testcase>
    <testcase classname="@carbon/scss assignments list" name="@carbon/scss assignments list" time="0.012">
    </testcase>
    <testcase classname="@carbon/scss assignments map" name="@carbon/scss assignments map" time="0.005">
    </testcase>
    <testcase classname="@carbon/scss assignments number" name="@carbon/scss assignments number" time="0.004">
    </testcase>
    <testcase classname="@carbon/scss assignments string" name="@carbon/scss assignments string" time="0.002">
    </testcase>
    <testcase classname="@carbon/scss assignments flags" name="@carbon/scss assignments flags" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss rules selector" name="@carbon/scss rules selector" time="0.009">
    </testcase>
    <testcase classname="@carbon/scss rules multiple declarations" name="@carbon/scss rules multiple declarations" time="0.004">
    </testcase>
    <testcase classname="@carbon/scss rules selectors" name="@carbon/scss rules selectors" time="0.006">
    </testcase>
    <testcase classname="@carbon/scss function no arguments, no body" name="@carbon/scss function no arguments, no body" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss function no arguments" name="@carbon/scss function no arguments" time="0.018">
    </testcase>
    <testcase classname="@carbon/scss function argument" name="@carbon/scss function argument" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss function arguments" name="@carbon/scss function arguments" time="0.005">
    </testcase>
    <testcase classname="@carbon/scss function default argument" name="@carbon/scss function default argument" time="0.002">
    </testcase>
    <testcase classname="@carbon/scss function rest argument" name="@carbon/scss function rest argument" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss mixin no arguments, no body" name="@carbon/scss mixin no arguments, no body" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss mixin no arguments" name="@carbon/scss mixin no arguments" time="0.002">
    </testcase>
    <testcase classname="@carbon/scss mixin argument" name="@carbon/scss mixin argument" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss mixin arguments" name="@carbon/scss mixin arguments" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss mixin default argument" name="@carbon/scss mixin default argument" time="0.006">
    </testcase>
    <testcase classname="@carbon/scss mixin rest argument" name="@carbon/scss mixin rest argument" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss calls mixin" name="@carbon/scss calls mixin" time="0.002">
    </testcase>
    <testcase classname="@carbon/scss calls mixin with args" name="@carbon/scss calls mixin with args" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss calls mixin with body" name="@carbon/scss calls mixin with body" time="0.01">
    </testcase>
    <testcase classname="@carbon/scss calls function in assignment" name="@carbon/scss calls function in assignment" time="0.005">
    </testcase>
    <testcase classname="@carbon/scss Control structures if statement" name="@carbon/scss Control structures if statement" time="0.004">
    </testcase>
    <testcase classname="@carbon/scss Control structures if else" name="@carbon/scss Control structures if else" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss Control structures if &gt; else if &gt; else" name="@carbon/scss Control structures if &gt; else if &gt; else" time="0.003">
    </testcase>
    <testcase classname="@carbon/scss Expressions no arguments" name="@carbon/scss Expressions no arguments" time="0.001">
    </testcase>
    <testcase classname="@carbon/scss Expressions single arguments" name="@carbon/scss Expressions single arguments" time="0.005">
    </testcase>
    <testcase classname="@carbon/scss Expressions multiple arguments" name="@carbon/scss Expressions multiple arguments" time="0.006">
    </testcase>
    <testcase classname="@carbon/scss formatting newline" name="@carbon/scss formatting newline" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useDisclosure" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:14" time="0.519" tests="5">
    <testcase classname="useDisclosure should toggle visibility when the button is clicked" name="useDisclosure should toggle visibility when the button is clicked" time="0.186">
    </testcase>
    <testcase classname="useDisclosure should toggle visibility when the button is focused and Enter or Space is pressed" name="useDisclosure should toggle visibility when the button is focused and Enter or Space is pressed" time="0.038">
    </testcase>
    <testcase classname="useDisclosure should set `aria-expanded` to match the visibility of the content" name="useDisclosure should set `aria-expanded` to match the visibility of the content" time="0.023">
    </testcase>
    <testcase classname="useDisclosure should set `aria-controls` to match the id of the content" name="useDisclosure should set `aria-controls` to match the id of the content" time="0.005">
    </testcase>
    <testcase classname="useDisclosure should set `id` on the content" name="useDisclosure should set `id` on the content" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Selection" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:14" time="0.326" tests="5">
    <testcase classname="Selection renders as expected - Component API should render" name="Selection renders as expected - Component API should render" time="0.004">
    </testcase>
    <testcase classname="Selection behaves as expected should be able to add or remove an item from the callback props" name="Selection behaves as expected should be able to add or remove an item from the callback props" time="0.065">
    </testcase>
    <testcase classname="Selection behaves as expected should give a list of all selected items from the callback props" name="Selection behaves as expected should give a list of all selected items from the callback props" time="0.03">
    </testcase>
    <testcase classname="Selection behaves as expected should be able to clear the selection from the callback props" name="Selection behaves as expected should be able to clear the selection from the callback props" time="0.04">
    </testcase>
    <testcase classname="Selection should disallow selection when disabled" name="Selection should disallow selection when disabled" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="size-prop-update" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:14" time="0.422" tests="1">
    <testcase classname="size-prop-update transforms correctly" name="size-prop-update transforms correctly" time="0.216">
    </testcase>
  </testsuite>
  <testsuite name="commands/upgrade" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.455" tests="9">
    <testcase classname="commands/upgrade no workspace" name="commands/upgrade no workspace" time="0.053">
    </testcase>
    <testcase classname="commands/upgrade single workspace with no upgrades available" name="commands/upgrade single workspace with no upgrades available" time="0.008">
    </testcase>
    <testcase classname="commands/upgrade single workspace with upgrade available" name="commands/upgrade single workspace with upgrade available" time="0.009">
    </testcase>
    <testcase classname="commands/upgrade single workspace with upgrades available" name="commands/upgrade single workspace with upgrades available" time="0.016">
    </testcase>
    <testcase classname="commands/upgrade multiple workspaces, select one with no upgrades available" name="commands/upgrade multiple workspaces, select one with no upgrades available" time="0.011">
    </testcase>
    <testcase classname="commands/upgrade multiple workspaces, select one with upgrades available" name="commands/upgrade multiple workspaces, select one with upgrades available" time="0.065">
    </testcase>
    <testcase classname="commands/upgrade changes install" name="commands/upgrade changes install" time="0.123">
    </testcase>
    <testcase classname="commands/upgrade changes uninstall" name="commands/upgrade changes uninstall" time="0.033">
    </testcase>
    <testcase classname="commands/upgrade changes update" name="commands/upgrade changes update" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="enable-v12-tile-radio-icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.462" tests="1">
    <testcase classname="enable-v12-tile-radio-icons transforms correctly" name="enable-v12-tile-radio-icons transforms correctly" time="0.133">
    </testcase>
  </testsuite>
  <testsuite name="DataTableSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.567" tests="10">
    <testcase classname="DataTableSkeleton renders as expected - Component API should render the correct classname" name="DataTableSkeleton renders as expected - Component API should render the correct classname" time="0.029">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should spread extra props on the outermost element" name="DataTableSkeleton renders as expected - Component API should spread extra props on the outermost element" time="0.027">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should support a custom `className` prop on the outermost element" name="DataTableSkeleton renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the columnCount prop" name="DataTableSkeleton renders as expected - Component API should respect the columnCount prop" time="0.018">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the compact prop" name="DataTableSkeleton renders as expected - Component API should respect the compact prop" time="0.007">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the headers prop" name="DataTableSkeleton renders as expected - Component API should respect the headers prop" time="0.009">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the rowCount prop" name="DataTableSkeleton renders as expected - Component API should respect the rowCount prop" time="0.024">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the showHeader prop" name="DataTableSkeleton renders as expected - Component API should respect the showHeader prop" time="0.015">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the showToolbar prop" name="DataTableSkeleton renders as expected - Component API should respect the showToolbar prop" time="0.012">
    </testcase>
    <testcase classname="DataTableSkeleton renders as expected - Component API should respect the zebra prop" name="DataTableSkeleton renders as expected - Component API should respect the zebra prop" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="icons-react-size-prop" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.24" tests="3">
    <testcase classname="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-rename&quot; data" name="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-rename&quot; data" time="0.089">
    </testcase>
    <testcase classname="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-with-prop&quot; data" name="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-with-prop&quot; data" time="0.01">
    </testcase>
    <testcase classname="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-object-key&quot; data" name="icons-react-size-prop icons-react-size-prop transforms correctly using &quot;icons-react-size-prop-object-key&quot; data" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="ErrorBoundary" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.419" tests="3">
    <testcase classname="ErrorBoundary should render children and not a fallback if no error is caught" name="ErrorBoundary should render children and not a fallback if no error is caught" time="0.01">
    </testcase>
    <testcase classname="ErrorBoundary should render a fallback if an error is caught" name="ErrorBoundary should render a fallback if an error is caught" time="0.039">
    </testcase>
    <testcase classname="ErrorBoundary should reset from fallback if children have changed" name="ErrorBoundary should reset from fallback if children have changed" time="0.156">
    </testcase>
  </testsuite>
  <testsuite name="featureflag-deprecate-flags-prop" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:15" time="0.412" tests="1">
    <testcase classname="featureflag-deprecate-flags-prop transforms correctly" name="featureflag-deprecate-flags-prop transforms correctly" time="0.253">
    </testcase>
  </testsuite>
  <testsuite name="scss/utilities/custom-property" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.341" tests="2">
    <testcase classname="scss/utilities/custom-property should support getting the property name from a value" name="scss/utilities/custom-property should support getting the property name from a value" time="0.059">
    </testcase>
    <testcase classname="scss/utilities/custom-property should support emitting a declaration for a CSS Custom Property" name="scss/utilities/custom-property should support emitting a declaration for a CSS Custom Property" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="categories" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.279" tests="4">
    <testcase classname="categories should throw an error if an icon is in the registry but has no category information" name="categories should throw an error if an icon is in the registry but has no category information" time="0.151">
    </testcase>
    <testcase classname="categories should throw an error if an icon is in the registry but has no subcategory information" name="categories should throw an error if an icon is in the registry but has no subcategory information" time="0.002">
    </testcase>
    <testcase classname="categories should throw an error if an icon has category information but is not in the registry" name="categories should throw an error if an icon has category information but is not in the registry" time="0.003">
    </testcase>
    <testcase classname="categories should throw an error if an icon has subcategory information but is not in the registry" name="categories should throw an error if an icon has subcategory information but is not in the registry" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Switch" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.215" tests="7">
    <testcase classname="Switch renders as expected - Component API should spread extra props onto outermost element" name="Switch renders as expected - Component API should spread extra props onto outermost element" time="0.003">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should support a custom `className` prop on the outermost element" name="Switch renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should respect disabled prop" name="Switch renders as expected - Component API should respect disabled prop" time="0.011">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should call onClick when expected" name="Switch renders as expected - Component API should call onClick when expected" time="0.017">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should call onKeyDown when expected" name="Switch renders as expected - Component API should call onKeyDown when expected" time="0.031">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should respect selected prop" name="Switch renders as expected - Component API should respect selected prop" time="0.004">
    </testcase>
    <testcase classname="Switch renders as expected - Component API should respect text prop" name="Switch renders as expected - Component API should respect text prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="wrapFocus" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.114" tests="7">
    <testcase classname="wrapFocus runs forward focus-wrap when following outer node is focused on" name="wrapFocus runs forward focus-wrap when following outer node is focused on" time="0.01">
    </testcase>
    <testcase classname="wrapFocus runs forward focus-wrap when following focus sentinel is focused on" name="wrapFocus runs forward focus-wrap when following focus sentinel is focused on" time="0.005">
    </testcase>
    <testcase classname="wrapFocus runs reverse focus-wrap when preceding outer node is focused on" name="wrapFocus runs reverse focus-wrap when preceding outer node is focused on" time="0.003">
    </testcase>
    <testcase classname="wrapFocus runs reverse focus-wrap when preceding focus sentinel is focused on" name="wrapFocus runs reverse focus-wrap when preceding focus sentinel is focused on" time="0.003">
    </testcase>
    <testcase classname="wrapFocus does not run focus-wrap when a floating menu is focused on" name="wrapFocus does not run focus-wrap when a floating menu is focused on" time="0.002">
    </testcase>
    <testcase classname="wrapFocus uses inner modal node as a escape hatch for focusing for forward focus-wrap" name="wrapFocus uses inner modal node as a escape hatch for focusing for forward focus-wrap" time="0.004">
    </testcase>
    <testcase classname="wrapFocus uses inner modal node as a escape hatch for focusing for reverse focus-wrap" name="wrapFocus uses inner modal node as a escape hatch for focusing for reverse focus-wrap" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.62" tests="4">
    <testcase classname="icons should throw an error if an icon is in the registry that is not in metadata" name="icons should throw an error if an icon is in the registry that is not in metadata" time="0.345">
    </testcase>
    <testcase classname="icons should throw an error if an icon is in metadata that is not in the registry" name="icons should throw an error if an icon is in metadata that is not in the registry" time="0.004">
    </testcase>
    <testcase classname="icons should throw an error if there is a missing size in the metadata" name="icons should throw an error if there is a missing size in the metadata" time="0.002">
    </testcase>
    <testcase classname="icons should throw an error if there is size in metadata not in the registry" name="icons should throw an error if there is size in metadata not in the registry" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="SideNavIcon" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.157" tests="2">
    <testcase classname="SideNavIcon should set the small class when `small` is passed" name="SideNavIcon should set the small class when `small` is passed" time="0.021">
    </testcase>
    <testcase classname="SideNavIcon should support a custom `className` prop on the outermost element" name="SideNavIcon should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="SliderSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.122" tests="5">
    <testcase classname="SliderSkeleton behaves as expected - Component API should apply the expected classes" name="SliderSkeleton behaves as expected - Component API should apply the expected classes" time="0.003">
    </testcase>
    <testcase classname="SliderSkeleton behaves as expected - Component API should pass custom class via className" name="SliderSkeleton behaves as expected - Component API should pass custom class via className" time="0.001">
    </testcase>
    <testcase classname="SliderSkeleton behaves as expected - Component API renders without label when hideLabel is true" name="SliderSkeleton behaves as expected - Component API renders without label when hideLabel is true" time="0.001">
    </testcase>
    <testcase classname="SliderSkeleton behaves as expected - Component API Accessibility labels applies default aria labels" name="SliderSkeleton behaves as expected - Component API Accessibility labels applies default aria labels" time="0.002">
    </testcase>
    <testcase classname="SliderSkeleton behaves as expected - Component API Accessibility labels allows custom aria labels" name="SliderSkeleton behaves as expected - Component API Accessibility labels allows custom aria labels" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="enable-v12-tile-default-icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.266" tests="1">
    <testcase classname="enable-v12-tile-default-icons transforms correctly" name="enable-v12-tile-default-icons transforms correctly" time="0.137">
    </testcase>
  </testsuite>
  <testsuite name="ButtonSet" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.218" tests="5">
    <testcase classname="ButtonSet should support rendering elements through the `children` prop" name="ButtonSet should support rendering elements through the `children` prop" time="0.005">
    </testcase>
    <testcase classname="ButtonSet should support a custom className on the outermost element" name="ButtonSet should support a custom className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ButtonSet should spread props onto the outermost element" name="ButtonSet should spread props onto the outermost element" time="0">
    </testcase>
    <testcase classname="ButtonSet should support a `ref` that is placed on the outermost element" name="ButtonSet should support a `ref` that is placed on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ButtonSet stacked should set the stacked class when stacked is provided" name="ButtonSet stacked should set the stacked class when stacked is provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/motion" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.27" tests="1">
    <testcase classname="@carbon/styles/scss/motion Public API" name="@carbon/styles/scss/motion Public API" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/grid" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:16" time="0.463" tests="1">
    <testcase classname="@carbon/grid Public API" name="@carbon/grid Public API" time="0.098">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/breakpoint" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.435" tests="1">
    <testcase classname="@carbon/styles/scss/breakpoint Public API" name="@carbon/styles/scss/breakpoint Public API" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="useDelayedState" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.216" tests="3">
    <testcase classname="useDelayedState should update the state after the given delayMs" name="useDelayedState should update the state after the given delayMs" time="0.026">
    </testcase>
    <testcase classname="useDelayedState should cancel any pending state updates if called before delayMs has passed" name="useDelayedState should cancel any pending state updates if called before delayMs has passed" time="0.016">
    </testcase>
    <testcase classname="useDelayedState should immediately call setState if no delay is given" name="useDelayedState should immediately call setState if no delay is given" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="SideNavMenuItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.21" tests="4">
    <testcase classname="SideNavMenuItem should set the current class when `isActive` is true" name="SideNavMenuItem should set the current class when `isActive` is true" time="0.006">
    </testcase>
    <testcase classname="SideNavMenuItem should support a custom `className` prop on the outermost element" name="SideNavMenuItem should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="SideNavMenuItem should spread extra props on the &lt;a&gt; element" name="SideNavMenuItem should spread extra props on the &lt;a&gt; element" time="0.021">
    </testcase>
    <testcase classname="SideNavMenuItem should support a `ref` on the &lt;a&gt; element" name="SideNavMenuItem should support a `ref` on the &lt;a&gt; element" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Metadata" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.226" tests="3">
    <testcase classname="Metadata check should validate the given extensions with the registry of assets and extension data" name="Metadata check should validate the given extensions with the registry of assets and extension data" time="0.114">
    </testcase>
    <testcase classname="Metadata load should load the given extensions with the given adapter and asset path" name="Metadata load should load the given extensions with the given adapter and asset path" time="0.007">
    </testcase>
    <testcase classname="Metadata build should output the generated metadata for the given extensions" name="Metadata build should output the generated metadata for the given extensions" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="DOM test helpers" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.243" tests="9">
    <testcase classname="DOM test helpers getByText should get the matching node for the given text input" name="DOM test helpers getByText should get the matching node for the given text input" time="0.006">
    </testcase>
    <testcase classname="DOM test helpers getByText should return null if no matches are found" name="DOM test helpers getByText should return null if no matches are found" time="0.001">
    </testcase>
    <testcase classname="DOM test helpers getByLabel should get the matching node based on aria-label" name="DOM test helpers getByLabel should get the matching node based on aria-label" time="0.003">
    </testcase>
    <testcase classname="DOM test helpers getByLabel should get the matching node based on aria-labelledby" name="DOM test helpers getByLabel should get the matching node based on aria-labelledby" time="0.003">
    </testcase>
    <testcase classname="DOM test helpers getByLabel should support matching based on text if label is in an interactive node" name="DOM test helpers getByLabel should support matching based on text if label is in an interactive node" time="0.001">
    </testcase>
    <testcase classname="DOM test helpers getByLabel should return null if no matches are found" name="DOM test helpers getByLabel should return null if no matches are found" time="0.001">
    </testcase>
    <testcase classname="DOM test helpers isElementVisible should detect if an element is visible" name="DOM test helpers isElementVisible should detect if an element is visible" time="0.004">
    </testcase>
    <testcase classname="DOM test helpers isElementVisible should detect if an element is not visible" name="DOM test helpers isElementVisible should detect if an element is not visible" time="0.004">
    </testcase>
    <testcase classname="DOM test helpers isElementVisible should detect if an element has a parent that is not visible" name="DOM test helpers isElementVisible should detect if an element has a parent that is not visible" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="en-US" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.2" tests="75">
    <testcase classname="en-US long -30 seconds → now" name="en-US long -30 seconds → now" time="0.001">
    </testcase>
    <testcase classname="en-US long -1 minutes → 1 minute ago" name="en-US long -1 minutes → 1 minute ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 minutes → in 1 minute" name="en-US long +1 minutes → in 1 minute" time="0">
    </testcase>
    <testcase classname="en-US long -59 minutes → 59 minutes ago" name="en-US long -59 minutes → 59 minutes ago" time="0">
    </testcase>
    <testcase classname="en-US long +59 minutes → in 59 minutes" name="en-US long +59 minutes → in 59 minutes" time="0">
    </testcase>
    <testcase classname="en-US long -1 hours → 1 hour ago" name="en-US long -1 hours → 1 hour ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 hours → in 1 hour" name="en-US long +1 hours → in 1 hour" time="0.001">
    </testcase>
    <testcase classname="en-US long -23 hours → 23 hours ago" name="en-US long -23 hours → 23 hours ago" time="0">
    </testcase>
    <testcase classname="en-US long +23 hours → in 23 hours" name="en-US long +23 hours → in 23 hours" time="0">
    </testcase>
    <testcase classname="en-US long -1 days → 1 day ago" name="en-US long -1 days → 1 day ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 days → in 1 day" name="en-US long +1 days → in 1 day" time="0">
    </testcase>
    <testcase classname="en-US long -6 days → 6 days ago" name="en-US long -6 days → 6 days ago" time="0">
    </testcase>
    <testcase classname="en-US long +6 days → in 6 days" name="en-US long +6 days → in 6 days" time="0">
    </testcase>
    <testcase classname="en-US long -1 weeks → 1 week ago" name="en-US long -1 weeks → 1 week ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 weeks → in 1 week" name="en-US long +1 weeks → in 1 week" time="0">
    </testcase>
    <testcase classname="en-US long -3 weeks → 3 weeks ago" name="en-US long -3 weeks → 3 weeks ago" time="0.001">
    </testcase>
    <testcase classname="en-US long +3 weeks → in 3 weeks" name="en-US long +3 weeks → in 3 weeks" time="0">
    </testcase>
    <testcase classname="en-US long -1 months → 1 month ago" name="en-US long -1 months → 1 month ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 months → in 1 month" name="en-US long +1 months → in 1 month" time="0">
    </testcase>
    <testcase classname="en-US long -12 months → 12 months ago" name="en-US long -12 months → 12 months ago" time="0">
    </testcase>
    <testcase classname="en-US long +12 months → in 12 months" name="en-US long +12 months → in 12 months" time="0.001">
    </testcase>
    <testcase classname="en-US long -1 years → 1 year ago" name="en-US long -1 years → 1 year ago" time="0">
    </testcase>
    <testcase classname="en-US long +1 years → in 1 year" name="en-US long +1 years → in 1 year" time="0.001">
    </testcase>
    <testcase classname="en-US long -2 years → 2 years ago" name="en-US long -2 years → 2 years ago" time="0">
    </testcase>
    <testcase classname="en-US long +2 years → in 2 years" name="en-US long +2 years → in 2 years" time="0">
    </testcase>
    <testcase classname="en-US short -30 seconds → now" name="en-US short -30 seconds → now" time="0">
    </testcase>
    <testcase classname="en-US short -1 minutes → 1 min. ago" name="en-US short -1 minutes → 1 min. ago" time="0">
    </testcase>
    <testcase classname="en-US short +1 minutes → in 1 min." name="en-US short +1 minutes → in 1 min." time="0.001">
    </testcase>
    <testcase classname="en-US short -59 minutes → 59 min. ago" name="en-US short -59 minutes → 59 min. ago" time="0">
    </testcase>
    <testcase classname="en-US short +59 minutes → in 59 min." name="en-US short +59 minutes → in 59 min." time="0">
    </testcase>
    <testcase classname="en-US short -1 hours → 1 hr. ago" name="en-US short -1 hours → 1 hr. ago" time="0">
    </testcase>
    <testcase classname="en-US short +1 hours → in 1 hr." name="en-US short +1 hours → in 1 hr." time="0">
    </testcase>
    <testcase classname="en-US short -23 hours → 23 hr. ago" name="en-US short -23 hours → 23 hr. ago" time="0">
    </testcase>
    <testcase classname="en-US short +23 hours → in 23 hr." name="en-US short +23 hours → in 23 hr." time="0">
    </testcase>
    <testcase classname="en-US short -1 days → 1 day ago" name="en-US short -1 days → 1 day ago" time="0">
    </testcase>
    <testcase classname="en-US short +1 days → in 1 day" name="en-US short +1 days → in 1 day" time="0">
    </testcase>
    <testcase classname="en-US short -6 days → 6 days ago" name="en-US short -6 days → 6 days ago" time="0">
    </testcase>
    <testcase classname="en-US short +6 days → in 6 days" name="en-US short +6 days → in 6 days" time="0.001">
    </testcase>
    <testcase classname="en-US short -1 weeks → 1 wk. ago" name="en-US short -1 weeks → 1 wk. ago" time="0">
    </testcase>
    <testcase classname="en-US short +1 weeks → in 1 wk." name="en-US short +1 weeks → in 1 wk." time="0">
    </testcase>
    <testcase classname="en-US short -3 weeks → 3 wk. ago" name="en-US short -3 weeks → 3 wk. ago" time="0">
    </testcase>
    <testcase classname="en-US short +3 weeks → in 3 wk." name="en-US short +3 weeks → in 3 wk." time="0">
    </testcase>
    <testcase classname="en-US short -1 months → 1 mo. ago" name="en-US short -1 months → 1 mo. ago" time="0">
    </testcase>
    <testcase classname="en-US short +1 months → in 1 mo." name="en-US short +1 months → in 1 mo." time="0">
    </testcase>
    <testcase classname="en-US short -12 months → 12 mo. ago" name="en-US short -12 months → 12 mo. ago" time="0.001">
    </testcase>
    <testcase classname="en-US short +12 months → in 12 mo." name="en-US short +12 months → in 12 mo." time="0">
    </testcase>
    <testcase classname="en-US short -1 years → 1 yr. ago" name="en-US short -1 years → 1 yr. ago" time="0.001">
    </testcase>
    <testcase classname="en-US short +1 years → in 1 yr." name="en-US short +1 years → in 1 yr." time="0">
    </testcase>
    <testcase classname="en-US short -2 years → 2 yr. ago" name="en-US short -2 years → 2 yr. ago" time="0">
    </testcase>
    <testcase classname="en-US short +2 years → in 2 yr." name="en-US short +2 years → in 2 yr." time="0">
    </testcase>
    <testcase classname="en-US narrow -30 seconds → now" name="en-US narrow -30 seconds → now" time="0">
    </testcase>
    <testcase classname="en-US narrow -1 minutes → 1m ago" name="en-US narrow -1 minutes → 1m ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +1 minutes → in 1m" name="en-US narrow +1 minutes → in 1m" time="0">
    </testcase>
    <testcase classname="en-US narrow -59 minutes → 59m ago" name="en-US narrow -59 minutes → 59m ago" time="0.012">
    </testcase>
    <testcase classname="en-US narrow +59 minutes → in 59m" name="en-US narrow +59 minutes → in 59m" time="0">
    </testcase>
    <testcase classname="en-US narrow -1 hours → 1h ago" name="en-US narrow -1 hours → 1h ago" time="0.001">
    </testcase>
    <testcase classname="en-US narrow +1 hours → in 1h" name="en-US narrow +1 hours → in 1h" time="0">
    </testcase>
    <testcase classname="en-US narrow -23 hours → 23h ago" name="en-US narrow -23 hours → 23h ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +23 hours → in 23h" name="en-US narrow +23 hours → in 23h" time="0">
    </testcase>
    <testcase classname="en-US narrow -1 days → 1d ago" name="en-US narrow -1 days → 1d ago" time="0.001">
    </testcase>
    <testcase classname="en-US narrow +1 days → in 1d" name="en-US narrow +1 days → in 1d" time="0">
    </testcase>
    <testcase classname="en-US narrow -6 days → 6d ago" name="en-US narrow -6 days → 6d ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +6 days → in 6d" name="en-US narrow +6 days → in 6d" time="0">
    </testcase>
    <testcase classname="en-US narrow -1 weeks → 1w ago" name="en-US narrow -1 weeks → 1w ago" time="0.002">
    </testcase>
    <testcase classname="en-US narrow +1 weeks → in 1w" name="en-US narrow +1 weeks → in 1w" time="0">
    </testcase>
    <testcase classname="en-US narrow -3 weeks → 3w ago" name="en-US narrow -3 weeks → 3w ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +3 weeks → in 3w" name="en-US narrow +3 weeks → in 3w" time="0">
    </testcase>
    <testcase classname="en-US narrow -1 months → 1mo ago" name="en-US narrow -1 months → 1mo ago" time="0.001">
    </testcase>
    <testcase classname="en-US narrow +1 months → in 1mo" name="en-US narrow +1 months → in 1mo" time="0">
    </testcase>
    <testcase classname="en-US narrow -12 months → 12mo ago" name="en-US narrow -12 months → 12mo ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +12 months → in 12mo" name="en-US narrow +12 months → in 12mo" time="0.001">
    </testcase>
    <testcase classname="en-US narrow -1 years → 1y ago" name="en-US narrow -1 years → 1y ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +1 years → in 1y" name="en-US narrow +1 years → in 1y" time="0">
    </testcase>
    <testcase classname="en-US narrow -2 years → 2y ago" name="en-US narrow -2 years → 2y ago" time="0">
    </testcase>
    <testcase classname="en-US narrow +2 years → in 2y" name="en-US narrow +2 years → in 2y" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ibm-products-update-http-errors" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.172" tests="1">
    <testcase classname="ibm-products-update-http-errors transforms correctly" name="ibm-products-update-http-errors transforms correctly" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles/scss/config" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.201" tests="2">
    <testcase classname="@carbon/styles/scss/config Public API" name="@carbon/styles/scss/config Public API" time="0.041">
    </testcase>
    <testcase classname="@carbon/styles/scss/config overrides" name="@carbon/styles/scss/config overrides" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="AspectRatio" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.158" tests="5">
    <testcase classname="AspectRatio renders as expected - Component API should spread extra props onto outermost element" name="AspectRatio renders as expected - Component API should spread extra props onto outermost element" time="0.005">
    </testcase>
    <testcase classname="AspectRatio renders as expected - Component API should respect as prop" name="AspectRatio renders as expected - Component API should respect as prop" time="0.017">
    </testcase>
    <testcase classname="AspectRatio renders as expected - Component API should render children as expected" name="AspectRatio renders as expected - Component API should render children as expected" time="0.004">
    </testcase>
    <testcase classname="AspectRatio renders as expected - Component API should support a custom `className` prop on the outermost element" name="AspectRatio renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="AspectRatio renders as expected - Component API should respect ratio prop" name="AspectRatio renders as expected - Component API should respect ratio prop" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="OrderedList" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:17" time="0.207" tests="6">
    <testcase classname="OrderedList Renders as expected should be an ol element" name="OrderedList Renders as expected should be an ol element" time="0.023">
    </testcase>
    <testcase classname="OrderedList Renders as expected should render with the appropriate classes" name="OrderedList Renders as expected should render with the appropriate classes" time="0.025">
    </testcase>
    <testcase classname="OrderedList Renders as expected should render children as expected" name="OrderedList Renders as expected should render children as expected" time="0.011">
    </testcase>
    <testcase classname="OrderedList Renders as expected should render nested lists" name="OrderedList Renders as expected should render nested lists" time="0.005">
    </testcase>
    <testcase classname="OrderedList Renders as expected should render native lists" name="OrderedList Renders as expected should render native lists" time="0.002">
    </testcase>
    <testcase classname="OrderedList Renders as expected should render expressive lists" name="OrderedList Renders as expected should render expressive lists" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Layout" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.122" tests="10">
    <testcase classname="Layout should render a custom element when &quot;as&quot; prop is provided" name="Layout should render a custom element when &quot;as&quot; prop is provided" time="0.003">
    </testcase>
    <testcase classname="Layout should apply the correct size class for Layout" name="Layout should apply the correct size class for Layout" time="0">
    </testcase>
    <testcase classname="Layout should apply the correct density class for Layout" name="Layout should apply the correct density class for Layout" time="0.001">
    </testcase>
    <testcase classname="Layout should apply custom class name to Layout" name="Layout should apply custom class name to Layout" time="0">
    </testcase>
    <testcase classname="Layout should render children inside Layout" name="Layout should render children inside Layout" time="0.001">
    </testcase>
    <testcase classname="LayoutConstraint should render a custom element when &quot;as&quot; prop is provided for LayoutConstraint" name="LayoutConstraint should render a custom element when &quot;as&quot; prop is provided for LayoutConstraint" time="0">
    </testcase>
    <testcase classname="LayoutConstraint should apply correct size constraints for LayoutConstraint" name="LayoutConstraint should apply correct size constraints for LayoutConstraint" time="0.001">
    </testcase>
    <testcase classname="LayoutConstraint should apply correct density constraints for LayoutConstraint" name="LayoutConstraint should apply correct density constraints for LayoutConstraint" time="0">
    </testcase>
    <testcase classname="LayoutConstraint should apply custom class name to LayoutConstraint" name="LayoutConstraint should apply custom class name to LayoutConstraint" time="0.013">
    </testcase>
    <testcase classname="LayoutConstraint should render children inside LayoutConstraint" name="LayoutConstraint should render children inside LayoutConstraint" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Workspace" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.213" tests="2">
    <testcase classname="Workspace should load a single directory with a `package.json`" name="Workspace should load a single directory with a `package.json`" time="0.037">
    </testcase>
    <testcase classname="Workspace should load a workspace" name="Workspace should load a workspace" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="enable-v12-overflowmenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.237" tests="2">
    <testcase classname="enable-v12-overflowmenu transforms correctly using &quot;enable-v12-overflowmenu&quot; data" name="enable-v12-overflowmenu transforms correctly using &quot;enable-v12-overflowmenu&quot; data" time="0.112">
    </testcase>
    <testcase classname="enable-v12-overflowmenu transforms correctly using &quot;enable-v12-overflowmenu-nowrap&quot; data" name="enable-v12-overflowmenu transforms correctly using &quot;enable-v12-overflowmenu-nowrap&quot; data" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="TextInputSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.217" tests="5">
    <testcase classname="TextInputSkeleton should render the skeleton input with the default classes" name="TextInputSkeleton should render the skeleton input with the default classes" time="0.003">
    </testcase>
    <testcase classname="TextInputSkeleton should render the label skeleton by default" name="TextInputSkeleton should render the label skeleton by default" time="0">
    </testcase>
    <testcase classname="TextInputSkeleton should not render the label skeleton if hideLabel is true" name="TextInputSkeleton should not render the label skeleton if hideLabel is true" time="0">
    </testcase>
    <testcase classname="TextInputSkeleton should apply custom class names to the form item wrapper" name="TextInputSkeleton should apply custom class names to the form item wrapper" time="0.002">
    </testcase>
    <testcase classname="TextInputSkeleton should spread additional props onto the root element" name="TextInputSkeleton should spread additional props onto the root element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="TabContent" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.22" tests="4">
    <testcase classname="TabContent renders as expected renders children as expected" name="TabContent renders as expected renders children as expected" time="0.005">
    </testcase>
    <testcase classname="TabContent renders as expected sets selected and hidden props with opposite boolean values" name="TabContent renders as expected sets selected and hidden props with opposite boolean values" time="0.004">
    </testcase>
    <testcase classname="TabContent renders as expected includes the content container in the tabbable index when no tab contents are provided" name="TabContent renders as expected includes the content container in the tabbable index when no tab contents are provided" time="0.011">
    </testcase>
    <testcase classname="TabContent renders as expected does not include the content container in the tabbable index when tab contents are provided" name="TabContent renders as expected does not include the content container in the tabbable index when tab contents are provided" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ListItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.276" tests="3">
    <testcase classname="ListItem Renders as expected should be an li element" name="ListItem Renders as expected should be an li element" time="0.051">
    </testcase>
    <testcase classname="ListItem Renders as expected should render with the appropriate classes" name="ListItem Renders as expected should render with the appropriate classes" time="0.014">
    </testcase>
    <testcase classname="ListItem Renders as expected should render children as expected" name="ListItem Renders as expected should render children as expected" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="ClassPrefix" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.18" tests="1">
    <testcase classname="ClassPrefix should set the prefix value used by usePrefix" name="ClassPrefix should set the prefix value used by usePrefix" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="registry" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.284" tests="3">
    <testcase classname="registry should register each asset from a directory" name="registry should register each asset from a directory" time="0.029">
    </testcase>
    <testcase classname="registry should register each asset in nested directories" name="registry should register each asset in nested directories" time="0.004">
    </testcase>
    <testcase classname="registry should register assets with the same name under the same icon" name="registry should register assets with the same name under the same icon" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="InlineCheckbox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.19" tests="2">
    <testcase classname="InlineCheckbox should render" name="InlineCheckbox should render" time="0.016">
    </testcase>
    <testcase classname="InlineCheckbox should only propagate click events from the input" name="InlineCheckbox should only propagate click events from the input" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="Theme" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.142" tests="8">
    <testcase classname="Theme should render the children passed in as a prop" name="Theme should render the children passed in as a prop" time="0.005">
    </testcase>
    <testcase classname="Theme should set the theme in context" name="Theme should set the theme in context" time="0.002">
    </testcase>
    <testcase classname="usePrefersDarkScheme should set see white as light" name="usePrefersDarkScheme should set see white as light" time="0.001">
    </testcase>
    <testcase classname="usePrefersDarkScheme should set see g10 as light" name="usePrefersDarkScheme should set see g10 as light" time="0.002">
    </testcase>
    <testcase classname="usePrefersDarkScheme should set see g90 as light" name="usePrefersDarkScheme should set see g90 as light" time="0.001">
    </testcase>
    <testcase classname="usePrefersDarkScheme should set see g100 as light" name="usePrefersDarkScheme should set see g100 as light" time="0">
    </testcase>
    <testcase classname="usePrefersDarkScheme should call usePrefersDarkScheme" name="usePrefersDarkScheme should call usePrefersDarkScheme" time="0.001">
    </testcase>
    <testcase classname="GlobalTheme should set the theme globally" name="GlobalTheme should set the theme globally" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="sort-prop-types" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.2" tests="2">
    <testcase classname="sort-prop-types transforms correctly" name="sort-prop-types transforms correctly" time="0.038">
    </testcase>
    <testcase classname="sort-prop-types transforms correctly using &quot;sort-prop-types2&quot; data" name="sort-prop-types transforms correctly using &quot;sort-prop-types2&quot; data" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Portal" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.249" tests="2">
    <testcase classname="Portal should render its children in the document" name="Portal should render its children in the document" time="0.007">
    </testcase>
    <testcase classname="Portal should support rendering in a custom container" name="Portal should support rendering in a custom container" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="TextDirection" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.23" tests="1">
    <testcase classname="TextDirection should set the direction in context" name="TextDirection should set the direction in context" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="small-to-size-prop" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.283" tests="1">
    <testcase classname="small-to-size-prop transforms correctly" name="small-to-size-prop transforms correctly" time="0.089">
    </testcase>
  </testsuite>
  <testsuite name="yml" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:18" time="0.628" tests="4">
    <testcase classname="yml should read a filepath and return its content as a value" name="yml should read a filepath and return its content as a value" time="0.079">
    </testcase>
    <testcase classname="yml should write the given data as yml to the given filepath" name="yml should write the given data as yml to the given filepath" time="0.002">
    </testcase>
    <testcase classname="yml should throw if the file its trying to read from does not exist" name="yml should throw if the file its trying to read from does not exist" time="0.001">
    </testcase>
    <testcase classname="yml should throw if the given data is invalid yml" name="yml should throw if the given data is invalid yml" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="enable-v12-structured-list-visible-icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.563" tests="1">
    <testcase classname="enable-v12-structured-list-visible-icons transforms correctly" name="enable-v12-structured-list-visible-icons transforms correctly" time="0.289">
    </testcase>
  </testsuite>
  <testsuite name="FluidNumberInputSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.611" tests="3">
    <testcase classname="FluidNumberInputSkeleton should render with the appropriate skeleton classes" name="FluidNumberInputSkeleton should render with the appropriate skeleton classes" time="0.021">
    </testcase>
    <testcase classname="FluidNumberInputSkeleton should apply custom className to the outermost element" name="FluidNumberInputSkeleton should apply custom className to the outermost element" time="0.002">
    </testcase>
    <testcase classname="FluidNumberInputSkeleton should spread extra props onto the outermost element" name="FluidNumberInputSkeleton should spread extra props onto the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SassRenderer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.737" tests="2">
    <testcase classname="SassRenderer should compile sass and return the result" name="SassRenderer should compile sass and return the result" time="0.042">
    </testcase>
    <testcase classname="SassRenderer should retrieve values from sass with get-value" name="SassRenderer should retrieve values from sass with get-value" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="TableToolbarContent" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.345" tests="3">
    <testcase classname="TableToolbarContent renders as expected - Component API should render" name="TableToolbarContent renders as expected - Component API should render" time="0.005">
    </testcase>
    <testcase classname="TableToolbarContent renders as expected - Component API should spread extra props onto outermost element" name="TableToolbarContent renders as expected - Component API should spread extra props onto outermost element" time="0.002">
    </testcase>
    <testcase classname="TableToolbarContent renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableToolbarContent renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SkeletonIcon" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:19" time="0.41" tests="1">
    <testcase classname="SkeletonIcon should pass in an extra className when one is given" name="SkeletonIcon should pass in an extra className when one is given" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="events tools" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.208" tests="2">
    <testcase classname="events tools composeEventHandlers should call all handlers if the event has not been prevented" name="events tools composeEventHandlers should call all handlers if the event has not been prevented" time="0.021">
    </testcase>
    <testcase classname="events tools composeEventHandlers should stop if a handler calls `preventDefault`" name="events tools composeEventHandlers should stop if a handler calls `preventDefault`" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ToggleSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.202" tests="2">
    <testcase classname="ToggleSkeleton should support a custom className on the outermost element" name="ToggleSkeleton should support a custom className on the outermost element" time="0.004">
    </testcase>
    <testcase classname="ToggleSkeleton should spread props onto the outermost element" name="ToggleSkeleton should spread props onto the outermost element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Heading" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.26" tests="7">
    <testcase classname="Heading should begin with an &lt;h1&gt; tag" name="Heading should begin with an &lt;h1&gt; tag" time="0.004">
    </testcase>
    <testcase classname="Heading should increment heading levels as you nest sections" name="Heading should increment heading levels as you nest sections" time="0.002">
    </testcase>
    <testcase classname="Heading should override heading levels when specifying the level of a section" name="Heading should override heading levels when specifying the level of a section" time="0.003">
    </testcase>
    <testcase classname="Heading should stop increment heading levels past level 6" name="Heading should stop increment heading levels past level 6" time="0.006">
    </testcase>
    <testcase classname="Heading Component API should pass through all props for &lt;Section&gt;" name="Heading Component API should pass through all props for &lt;Section&gt;" time="0.002">
    </testcase>
    <testcase classname="Heading Component API should use the `as` prop to change the element in &lt;Section&gt;" name="Heading Component API should use the `as` prop to change the element in &lt;Section&gt;" time="0.002">
    </testcase>
    <testcase classname="Heading Component API should pass through all props for &lt;Heading&gt;" name="Heading Component API should pass through all props for &lt;Heading&gt;" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="TokenSet" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.2" tests="5">
    <testcase classname="TokenSet iterator should support Symbol.iterator" name="TokenSet iterator should support Symbol.iterator" time="0.002">
    </testcase>
    <testcase classname="TokenSet getTokenSets should return a single element array if no nested token sets exist" name="TokenSet getTokenSets should return a single element array if no nested token sets exist" time="0.001">
    </testcase>
    <testcase classname="TokenSet getTokenSets should return each child token set in the parent set" name="TokenSet getTokenSets should return each child token set in the parent set" time="0">
    </testcase>
    <testcase classname="TokenSet getTokenSet should return a specific set, or null if it does not exist" name="TokenSet getTokenSet should return a specific set, or null if it does not exist" time="0">
    </testcase>
    <testcase classname="TokenSet hasToken should return a boolean indicating if the token is in the set, or a child set" name="TokenSet hasToken should return a boolean indicating if the token is in the set, or a child set" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Text" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.16" tests="5">
    <testcase classname="Text should support specifying direction with the `dir` prop" name="Text should support specifying direction with the `dir` prop" time="0.007">
    </testcase>
    <testcase classname="Text should support custom elements with the `as` prop" name="Text should support custom elements with the `as` prop" time="0.002">
    </testcase>
    <testcase classname="Text should support spreading props onto the outermost node" name="Text should support spreading props onto the outermost node" time="0.002">
    </testcase>
    <testcase classname="Text should not use redundant `dir` attributes on text nodes" name="Text should not use redundant `dir` attributes on text nodes" time="0.002">
    </testcase>
    <testcase classname="Text should support overriding `dir` with `getTextDirection`" name="Text should support overriding `dir` with `getTextDirection`" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Loading" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.193" tests="8">
    <testcase classname="Loading renders as expected - Component API should change classes based on active" name="Loading renders as expected - Component API should change classes based on active" time="0.01">
    </testcase>
    <testcase classname="Loading renders as expected - Component API should support a custom `className` prop on the outermost element" name="Loading renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="Loading renders as expected - Component API should spread extra props on the outermost element" name="Loading renders as expected - Component API should spread extra props on the outermost element" time="0.001">
    </testcase>
    <testcase classname="Loading renders as expected - Component API should specify a description based on prop" name="Loading renders as expected - Component API should specify a description based on prop" time="0.001">
    </testcase>
    <testcase classname="Loading renders as expected - Component API should respect small prop" name="Loading renders as expected - Component API should respect small prop" time="0.001">
    </testcase>
    <testcase classname="Loading renders as expected - Component API should respect withOverlay prop" name="Loading renders as expected - Component API should respect withOverlay prop" time="0.013">
    </testcase>
    <testcase classname="Loading with a screenreader should have a label on the live region" name="Loading with a screenreader should have a label on the live region" time="0.005">
    </testcase>
    <testcase classname="Loading with a screenreader should announce a loading status" name="Loading with a screenreader should announce a loading status" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="childrenOfType" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.133" tests="7">
    <testcase classname="childrenOfType should validate children of a given element type" name="childrenOfType should validate children of a given element type" time="0.001">
    </testcase>
    <testcase classname="childrenOfType should warn with an invalid prop type for an invalid element child type" name="childrenOfType should warn with an invalid prop type for an invalid element child type" time="0.005">
    </testcase>
    <testcase classname="childrenOfType should validate children of a given stateless functional component type" name="childrenOfType should validate children of a given stateless functional component type" time="0">
    </testcase>
    <testcase classname="childrenOfType should warn with an invalid prop type for an invalid SFC child type" name="childrenOfType should warn with an invalid prop type for an invalid SFC child type" time="0.001">
    </testcase>
    <testcase classname="childrenOfType should validate children of a given class component type" name="childrenOfType should validate children of a given class component type" time="0.001">
    </testcase>
    <testcase classname="childrenOfType should warn with an invalid prop type for an invalid class component child type" name="childrenOfType should warn with an invalid prop type for an invalid class component child type" time="0.002">
    </testcase>
    <testcase classname="childrenOfType should work with `isRequired`" name="childrenOfType should work with `isRequired`" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ToggleSmallSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.13" tests="3">
    <testcase classname="ToggleSmallSkeleton should support a custom `className` prop on the outermost element" name="ToggleSmallSkeleton should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="ToggleSmallSkeleton should spread additional props on the outermost element" name="ToggleSmallSkeleton should spread additional props on the outermost element" time="0.007">
    </testcase>
    <testcase classname="ToggleSmallSkeleton should render the `labelText` prop correctly" name="ToggleSmallSkeleton should render the `labelText` prop correctly" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="useMatchMedia" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.132" tests="3">
    <testcase classname="useMatchMedia should return true if mediaQueryList matches" name="useMatchMedia should return true if mediaQueryList matches" time="0.003">
    </testcase>
    <testcase classname="useMatchMedia should keep state in sync when mediaQueryString is changed" name="useMatchMedia should keep state in sync when mediaQueryString is changed" time="0.001">
    </testcase>
    <testcase classname="useMatchMedia should update the match value if the query no longer applies" name="useMatchMedia should update the match value if the query no longer applies" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FormItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.174" tests="2">
    <testcase classname="FormItem should support a custom `className` prop on the outermost element" name="FormItem should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="FormItem should spread extra props on the outermost element" name="FormItem should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SelectItemGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.223" tests="7">
    <testcase classname="SelectItemGroup renders as expected - Component API should spread extra props onto outermost element" name="SelectItemGroup renders as expected - Component API should spread extra props onto outermost element" time="0.005">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API should render children as expected" name="SelectItemGroup renders as expected - Component API should render children as expected" time="0.019">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API should have the expected classes" name="SelectItemGroup renders as expected - Component API should have the expected classes" time="0.001">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API should support a custom `className` prop on the outermost element" name="SelectItemGroup renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API Should not be disabled by default" name="SelectItemGroup renders as expected - Component API Should not be disabled by default" time="0">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API should set disabled as expected" name="SelectItemGroup renders as expected - Component API should set disabled as expected" time="0.001">
    </testcase>
    <testcase classname="SelectItemGroup renders as expected - Component API should respect label prop" name="SelectItemGroup renders as expected - Component API should respect label prop" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useNoInteractiveChildren" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:20" time="0.329" tests="2">
    <testcase classname="useNoInteractiveChildren should render without errors if no interactive content is found" name="useNoInteractiveChildren should render without errors if no interactive content is found" time="0.002">
    </testcase>
    <testcase classname="useNoInteractiveChildren should throw an error if interactive content is found" name="useNoInteractiveChildren should throw an error if interactive content is found" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="TokenGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.169" tests="5">
    <testcase classname="TokenGroup getToken should return a token if it exists, otherwise return null" name="TokenGroup getToken should return a token if it exists, otherwise return null" time="0">
    </testcase>
    <testcase classname="TokenGroup getTokens should return a flat list of tokens with context" name="TokenGroup getTokens should return a flat list of tokens with context" time="0.001">
    </testcase>
    <testcase classname="TokenGroup getTokenGroups should return an array of all token groups" name="TokenGroup getTokenGroups should return an array of all token groups" time="0">
    </testcase>
    <testcase classname="TokenGroup getTokenProperties should return an array of all properties in the groups or tokens" name="TokenGroup getTokenProperties should return an array of all properties in the groups or tokens" time="0">
    </testcase>
    <testcase classname="TokenGroup getTokenStates should return an array of states in the tokens of the group" name="TokenGroup getTokenStates should return an array of states in the tokens of the group" time="0">
    </testcase>
  </testsuite>
  <testsuite name="IdPrefix" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.262" tests="1">
    <testcase classname="IdPrefix should set the prefix value used by usePrefix" name="IdPrefix should set the prefix value used by usePrefix" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SideNavLinkText" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.157" tests="2">
    <testcase classname="SideNavLinkText should support a custom `className` prop on the outermost element" name="SideNavLinkText should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="SideNavLinkText should spread extra props on the outermost element" name="SideNavLinkText should spread extra props on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="FluidForm" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.175" tests="5">
    <testcase classname="FluidForm renders as expected - Component API should render children as expected" name="FluidForm renders as expected - Component API should render children as expected" time="0.007">
    </testcase>
    <testcase classname="FluidForm renders as expected - Component API should be a fluid form" name="FluidForm renders as expected - Component API should be a fluid form" time="0.001">
    </testcase>
    <testcase classname="FluidForm renders as expected - Component API should spread extra props onto outermost container" name="FluidForm renders as expected - Component API should spread extra props onto outermost container" time="0">
    </testcase>
    <testcase classname="FluidForm renders as expected - Component API should support a custom `className` prop on the outermost element" name="FluidForm renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="FluidForm renders as expected - Component API should handle submit events" name="FluidForm renders as expected - Component API should handle submit events" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/layout tokens" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.116" tests="37">
    <testcase classname="@carbon/layout tokens spacing01 should be exported" name="@carbon/layout tokens spacing01 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing02 should be exported" name="@carbon/layout tokens spacing02 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing03 should be exported" name="@carbon/layout tokens spacing03 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing04 should be exported" name="@carbon/layout tokens spacing04 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing05 should be exported" name="@carbon/layout tokens spacing05 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing06 should be exported" name="@carbon/layout tokens spacing06 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing07 should be exported" name="@carbon/layout tokens spacing07 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing08 should be exported" name="@carbon/layout tokens spacing08 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing09 should be exported" name="@carbon/layout tokens spacing09 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing10 should be exported" name="@carbon/layout tokens spacing10 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing11 should be exported" name="@carbon/layout tokens spacing11 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing12 should be exported" name="@carbon/layout tokens spacing12 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens spacing13 should be exported" name="@carbon/layout tokens spacing13 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens fluidSpacing01 should be exported" name="@carbon/layout tokens fluidSpacing01 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens fluidSpacing02 should be exported" name="@carbon/layout tokens fluidSpacing02 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens fluidSpacing03 should be exported" name="@carbon/layout tokens fluidSpacing03 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens fluidSpacing04 should be exported" name="@carbon/layout tokens fluidSpacing04 should be exported" time="0.001">
    </testcase>
    <testcase classname="@carbon/layout tokens container01 should be exported" name="@carbon/layout tokens container01 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens container02 should be exported" name="@carbon/layout tokens container02 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens container03 should be exported" name="@carbon/layout tokens container03 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens container04 should be exported" name="@carbon/layout tokens container04 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens container05 should be exported" name="@carbon/layout tokens container05 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens sizeXSmall should be exported" name="@carbon/layout tokens sizeXSmall should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens sizeSmall should be exported" name="@carbon/layout tokens sizeSmall should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens sizeMedium should be exported" name="@carbon/layout tokens sizeMedium should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens sizeLarge should be exported" name="@carbon/layout tokens sizeLarge should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens sizeXLarge should be exported" name="@carbon/layout tokens sizeXLarge should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens size2XLarge should be exported" name="@carbon/layout tokens size2XLarge should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens iconSize01 should be exported" name="@carbon/layout tokens iconSize01 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens iconSize02 should be exported" name="@carbon/layout tokens iconSize02 should be exported" time="0.001">
    </testcase>
    <testcase classname="@carbon/layout tokens layout01 should be exported" name="@carbon/layout tokens layout01 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout02 should be exported" name="@carbon/layout tokens layout02 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout03 should be exported" name="@carbon/layout tokens layout03 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout04 should be exported" name="@carbon/layout tokens layout04 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout05 should be exported" name="@carbon/layout tokens layout05 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout06 should be exported" name="@carbon/layout tokens layout06 should be exported" time="0">
    </testcase>
    <testcase classname="@carbon/layout tokens layout07 should be exported" name="@carbon/layout tokens layout07 should be exported" time="0">
    </testcase>
  </testsuite>
  <testsuite name="NumberInputSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.147" tests="3">
    <testcase classname="NumberInputSkeleton should place className on the outermost element" name="NumberInputSkeleton should place className on the outermost element" time="0.002">
    </testcase>
    <testcase classname="NumberInputSkeleton should spread additional props on the outermost element" name="NumberInputSkeleton should spread additional props on the outermost element" time="0">
    </testcase>
    <testcase classname="NumberInputSkeleton should support hiding the label through `hideLabel`" name="NumberInputSkeleton should support hiding the label through `hideLabel`" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="IconSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.153" tests="1">
    <testcase classname="IconSkeleton should pass in an extra className when one is given" name="IconSkeleton should pass in an extra className when one is given" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Link" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.26" tests="4">
    <testcase classname="Link should render an element with role=&quot;link&quot;" name="Link should render an element with role=&quot;link&quot;" time="0.127">
    </testcase>
    <testcase classname="Link should support a custom `className` prop on the outermost element" name="Link should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="Link should spread extra props on the outermost element" name="Link should spread extra props on the outermost element" time="0.002">
    </testcase>
    <testcase classname="Link should support a `ref` that is placed on the outermost element" name="Link should support a `ref` that is placed on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useLayoutDirection" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.192" tests="2">
    <testcase classname="useLayoutDirection should provide a default value" name="useLayoutDirection should provide a default value" time="0.002">
    </testcase>
    <testcase classname="useLayoutDirection should provide the current direction from context" name="useLayoutDirection should provide the current direction from context" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FluidSelectSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.289" tests="2">
    <testcase classname="FluidSelectSkeleton should render with fluid classes" name="FluidSelectSkeleton should render with fluid classes" time="0.004">
    </testcase>
    <testcase classname="FluidSelectSkeleton should support a custom `className` prop on the outermost element" name="FluidSelectSkeleton should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Layer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.184" tests="3">
    <testcase classname="Layer should render the children passed in as a prop" name="Layer should render the children passed in as a prop" time="0.002">
    </testcase>
    <testcase classname="Layer should spread any additional props onto the top-level element" name="Layer should spread any additional props onto the top-level element" time="0.001">
    </testcase>
    <testcase classname="Layer should accept a custom class name" name="Layer should accept a custom class name" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FluidComboBoxSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.152" tests="2">
    <testcase classname="FluidComboBoxSkeleton should render with fluid classes" name="FluidComboBoxSkeleton should render with fluid classes" time="0.004">
    </testcase>
    <testcase classname="FluidComboBoxSkeleton should support a custom `className` prop on the outermost element" name="FluidComboBoxSkeleton should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="match" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.126" tests="16">
    <testcase classname="match should match when using ArrowDown" name="match should match when using ArrowDown" time="0.004">
    </testcase>
    <testcase classname="match should match when using ArrowLeft" name="match should match when using ArrowLeft" time="0.001">
    </testcase>
    <testcase classname="match should match when using ArrowRight" name="match should match when using ArrowRight" time="0">
    </testcase>
    <testcase classname="match should match when using ArrowUp" name="match should match when using ArrowUp" time="0.001">
    </testcase>
    <testcase classname="match should match when using Delete" name="match should match when using Delete" time="0.001">
    </testcase>
    <testcase classname="match should match when using End" name="match should match when using End" time="0">
    </testcase>
    <testcase classname="match should match when using Enter" name="match should match when using Enter" time="0.001">
    </testcase>
    <testcase classname="match should match when using Escape" name="match should match when using Escape" time="0">
    </testcase>
    <testcase classname="match should match when using Home" name="match should match when using Home" time="0">
    </testcase>
    <testcase classname="match should match when using PageDown" name="match should match when using PageDown" time="0.001">
    </testcase>
    <testcase classname="match should match when using PageUp" name="match should match when using PageUp" time="0">
    </testcase>
    <testcase classname="match should match when using Space" name="match should match when using Space" time="0">
    </testcase>
    <testcase classname="match should match when using Tab" name="match should match when using Tab" time="0.001">
    </testcase>
    <testcase classname="match should not match if no key code provided matches the event" name="match should not match if no key code provided matches the event" time="0">
    </testcase>
    <testcase classname="match should match the first valid key code given" name="match should match the first valid key code given" time="0">
    </testcase>
    <testcase classname="match should support multiple options for the `key` field" name="match should support multiple options for the `key` field" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ButtonSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:21" time="0.141" tests="5">
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `sm`" name="ButtonSkeleton should set the expected classes for the size: `sm`" time="0.007">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `md`" name="ButtonSkeleton should set the expected classes for the size: `md`" time="0">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `lg`" name="ButtonSkeleton should set the expected classes for the size: `lg`" time="0">
    </testcase>
    <testcase classname="ButtonSkeleton should support a custom className on the outermost element" name="ButtonSkeleton should support a custom className on the outermost element" time="0.009">
    </testcase>
    <testcase classname="ButtonSkeleton should spread props onto the outermost element" name="ButtonSkeleton should spread props onto the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UnorderedList" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.135" tests="3">
    <testcase classname="UnorderedList should render children as expected" name="UnorderedList should render children as expected" time="0.003">
    </testcase>
    <testcase classname="UnorderedList should render nested lists" name="UnorderedList should render nested lists" time="0.002">
    </testcase>
    <testcase classname="UnorderedList should add custom className given via className prop" name="UnorderedList should add custom className given via className prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FormGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.116" tests="6">
    <testcase classname="FormGroup should support a custom `className` prop on the outermost element" name="FormGroup should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="FormGroup should be set data-invalid when invalid prop is true" name="FormGroup should be set data-invalid when invalid prop is true" time="0.002">
    </testcase>
    <testcase classname="FormGroup should render legendText" name="FormGroup should render legendText" time="0.01">
    </testcase>
    <testcase classname="FormGroup should set the id for legend based on legendId" name="FormGroup should set the id for legend based on legendId" time="0.002">
    </testcase>
    <testcase classname="FormGroup should display messageText if message is true" name="FormGroup should display messageText if message is true" time="0.001">
    </testcase>
    <testcase classname="FormGroup should not display the messageText if message is false" name="FormGroup should not display the messageText if message is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SwitcherDivider" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.174" tests="2">
    <testcase classname="SwitcherDivider renders as expected - Component API should spread extra props onto outermost element" name="SwitcherDivider renders as expected - Component API should spread extra props onto outermost element" time="0.005">
    </testcase>
    <testcase classname="SwitcherDivider renders as expected - Component API should support a custom `className` prop on the outermost element" name="SwitcherDivider renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="HeaderNavigation" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.132" tests="5">
    <testcase classname="HeaderNavigation should render children that are passed to the component" name="HeaderNavigation should render children that are passed to the component" time="0.006">
    </testcase>
    <testcase classname="HeaderNavigation should add an accessibility label to the &lt;nav&gt;" name="HeaderNavigation should add an accessibility label to the &lt;nav&gt;" time="0.005">
    </testcase>
    <testcase classname="HeaderNavigation should add an accessibility label to the &lt;nav&gt; when rendered with a label" name="HeaderNavigation should add an accessibility label to the &lt;nav&gt; when rendered with a label" time="0.004">
    </testcase>
    <testcase classname="HeaderNavigation should support a custom className" name="HeaderNavigation should support a custom className" time="0.001">
    </testcase>
    <testcase classname="HeaderNavigation should pass additional props to the outermost element" name="HeaderNavigation should pass additional props to the outermost element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="update-carbon-icons-react-import-to-carbon-react" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.156" tests="1">
    <testcase classname="update-carbon-icons-react-import-to-carbon-react transforms correctly" name="update-carbon-icons-react-import-to-carbon-react transforms correctly" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="SideNavHeader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.129" tests="3">
    <testcase classname="SideNavHeader should render a &lt;header&gt; element" name="SideNavHeader should render a &lt;header&gt; element" time="0.002">
    </testcase>
    <testcase classname="SideNavHeader should support a custom icon through `renderIcon`" name="SideNavHeader should support a custom icon through `renderIcon`" time="0.001">
    </testcase>
    <testcase classname="SideNavHeader should support a custom `className` prop on the outermost element" name="SideNavHeader should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ibm-products-update-userprofileimage" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.167" tests="1">
    <testcase classname="ibm-products-update-userprofileimage transforms correctly" name="ibm-products-update-userprofileimage transforms correctly" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="SkeletonText" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.153" tests="2">
    <testcase classname="SkeletonText should pass in an extra className when one is given" name="SkeletonText should pass in an extra className when one is given" time="0.006">
    </testcase>
    <testcase classname="SkeletonText Heading should add heading classNames when the heading prop is passed in" name="SkeletonText Heading should add heading classNames when the heading prop is passed in" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="update-carbon-components-react-import-to-scoped" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.126" tests="1">
    <testcase classname="update-carbon-components-react-import-to-scoped transforms correctly" name="update-carbon-components-react-import-to-scoped transforms correctly" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="slug-prop-to-decorator-prop" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.113" tests="1">
    <testcase classname="slug-prop-to-decorator-prop transforms correctly" name="slug-prop-to-decorator-prop transforms correctly" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="FluidDropdownSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.111" tests="2">
    <testcase classname="FluidDropdownSkeleton should render with fluid classes" name="FluidDropdownSkeleton should render with fluid classes" time="0.004">
    </testcase>
    <testcase classname="FluidDropdownSkeleton should support a custom `className` prop on the outermost element" name="FluidDropdownSkeleton should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TabsSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.173" tests="2">
    <testcase classname="TabsSkeleton should support a custom `className` prop on the outermost element" name="TabsSkeleton should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
    <testcase classname="TabsSkeleton should spread additional props on the outermost element" name="TabsSkeleton should spread additional props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FormLabel" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.145" tests="3">
    <testcase classname="FormLabel should support a custom `className` prop on the outermost element" name="FormLabel should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="FormLabel should spread extra props on the outermost element" name="FormLabel should spread extra props on the outermost element" time="0.001">
    </testcase>
    <testcase classname="FormLabel should support a unique id prop on the outermost element" name="FormLabel should support a unique id prop on the outermost element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getDerivedStateFromProps" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.114" tests="5">
    <testcase classname="getDerivedStateFromProps uses prevState if available" name="getDerivedStateFromProps uses prevState if available" time="0.001">
    </testcase>
    <testcase classname="getDerivedStateFromProps has default values if prevState is not available" name="getDerivedStateFromProps has default values if prevState is not available" time="0">
    </testcase>
    <testcase classname="getDerivedStateFromProps with previous state should preserve the previous sort state" name="getDerivedStateFromProps with previous state should preserve the previous sort state" time="0.001">
    </testcase>
    <testcase classname="getDerivedStateFromProps with previous state should preserve the previous filter state" name="getDerivedStateFromProps with previous state should preserve the previous filter state" time="0">
    </testcase>
    <testcase classname="getDerivedStateFromProps with previous state should preserve the previous batch action state" name="getDerivedStateFromProps with previous state should preserve the previous batch action state" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/motion" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.324" tests="2">
    <testcase classname="@carbon/motion Public API" name="@carbon/motion Public API" time="0.001">
    </testcase>
    <testcase classname="@carbon/motion @carbon/motion/scss/motion.scss" name="@carbon/motion @carbon/motion/scss/motion.scss" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="createOverflowHandler (width)" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.15" tests="18">
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) When container width is 500px, expect 10 visible and 0 hidden" name="createOverflowHandler (width) Equal sized items (40px each) When container width is 500px, expect 10 visible and 0 hidden" time="0.003">
    </testcase>
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) When container width is 400px, expect 10 visible and 0 hidden" name="createOverflowHandler (width) Equal sized items (40px each) When container width is 400px, expect 10 visible and 0 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) When container width is 200px, expect 5 visible and 5 hidden" name="createOverflowHandler (width) Equal sized items (40px each) When container width is 200px, expect 5 visible and 5 hidden" time="0.013">
    </testcase>
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) When container width is 80px, expect 2 visible and 8 hidden" name="createOverflowHandler (width) Equal sized items (40px each) When container width is 80px, expect 2 visible and 8 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) When container width is 0px, expect 0 visible and 10 hidden" name="createOverflowHandler (width) Equal sized items (40px each) When container width is 0px, expect 0 visible and 10 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (width) Equal sized items (40px each) Respects maxVisibleItems option" name="createOverflowHandler (width) Equal sized items (40px each) Respects maxVisibleItems option" time="0.002">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) When container width is 500px, expect 10 visible and 0 hidden" name="createOverflowHandler (width) Varying sized items (40-60px) When container width is 500px, expect 10 visible and 0 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) When container width is 400px, expect 8 visible and 2 hidden" name="createOverflowHandler (width) Varying sized items (40-60px) When container width is 400px, expect 8 visible and 2 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) When container width is 200px, expect 4 visible and 6 hidden" name="createOverflowHandler (width) Varying sized items (40-60px) When container width is 200px, expect 4 visible and 6 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) When container width is 80px, expect 2 visible and 8 hidden" name="createOverflowHandler (width) Varying sized items (40-60px) When container width is 80px, expect 2 visible and 8 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) When container width is 0px, expect 0 visible and 10 hidden" name="createOverflowHandler (width) Varying sized items (40-60px) When container width is 0px, expect 0 visible and 10 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (width) Varying sized items (40-60px) Respects maxVisibleItems option" name="createOverflowHandler (width) Varying sized items (40-60px) Respects maxVisibleItems option" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) When container height is 500px, expect 10 visible and 0 hidden" name="createOverflowHandler (height) Varying sized items (40-60px) When container height is 500px, expect 10 visible and 0 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) When container height is 400px, expect 8 visible and 2 hidden" name="createOverflowHandler (height) Varying sized items (40-60px) When container height is 400px, expect 8 visible and 2 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) When container height is 200px, expect 4 visible and 6 hidden" name="createOverflowHandler (height) Varying sized items (40-60px) When container height is 200px, expect 4 visible and 6 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) When container height is 80px, expect 2 visible and 8 hidden" name="createOverflowHandler (height) Varying sized items (40-60px) When container height is 80px, expect 2 visible and 8 hidden" time="0">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) When container height is 0px, expect 0 visible and 10 hidden" name="createOverflowHandler (height) Varying sized items (40-60px) When container height is 0px, expect 0 visible and 10 hidden" time="0.001">
    </testcase>
    <testcase classname="createOverflowHandler (height) Varying sized items (40-60px) Respects maxVisibleItems option with height dimension" name="createOverflowHandler (height) Varying sized items (40-60px) Respects maxVisibleItems option with height dimension" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getDisplayName" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.133" tests="3">
    <testcase classname="getDisplayName should get the name from a React element" name="getDisplayName should get the name from a React element" time="0">
    </testcase>
    <testcase classname="getDisplayName should get the name from a Stateless Functional Component" name="getDisplayName should get the name from a Stateless Functional Component" time="0.001">
    </testcase>
    <testcase classname="getDisplayName should get the displayName from a class Component" name="getDisplayName should get the displayName from a class Component" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:22" time="0.147" tests="7">
    <testcase classname=" without size" name=" without size" time="0.001">
    </testcase>
    <testcase classname=" with size" name=" with size" time="0.001">
    </testcase>
    <testcase classname=" with namespace" name=" with namespace" time="0">
    </testcase>
    <testcase classname=" with kebab-case" name=" with kebab-case" time="0">
    </testcase>
    <testcase classname=" with variant" name=" with variant" time="0">
    </testcase>
    <testcase classname=" with invalid identifier as first character" name=" with invalid identifier as first character" time="0.001">
    </testcase>
    <testcase classname=" with glyph" name=" with glyph" time="0">
    </testcase>
  </testsuite>
  <testsuite name="usePrefix" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.261" tests="2">
    <testcase classname="usePrefix should emit the default prefix without context" name="usePrefix should emit the default prefix without context" time="0.002">
    </testcase>
    <testcase classname="usePrefix should emit the prefix in context" name="usePrefix should emit the prefix in context" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="LayoutDirection" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.202" tests="2">
    <testcase classname="LayoutDirection should render its children in a node that has a `dir` attribute" name="LayoutDirection should render its children in a node that has a `dir` attribute" time="0.024">
    </testcase>
    <testcase classname="LayoutDirection should support customizing the outermost node through the `as` prop" name="LayoutDirection should support customizing the outermost node through the `as` prop" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="en-US" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.261" tests="69">
    <testcase classname="en-US formatTime full → 1:12:47 PM Mountain Daylight Time" name="en-US formatTime full → 1:12:47 PM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatTime long → 1:12:47 PM MDT" name="en-US formatTime long → 1:12:47 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatTime medium → 1:12:47 PM" name="en-US formatTime medium → 1:12:47 PM" time="0">
    </testcase>
    <testcase classname="en-US formatTime short → 1:12 PM" name="en-US formatTime short → 1:12 PM" time="0.009">
    </testcase>
    <testcase classname="en-US formatDate full → Thursday, April 28, 2016" name="en-US formatDate full → Thursday, April 28, 2016" time="0">
    </testcase>
    <testcase classname="en-US formatDate long → April 28, 2016" name="en-US formatDate long → April 28, 2016" time="0">
    </testcase>
    <testcase classname="en-US formatDate medium → Apr 28, 2016" name="en-US formatDate medium → Apr 28, 2016" time="0">
    </testcase>
    <testcase classname="en-US formatDate short → 4/28/16" name="en-US formatDate short → 4/28/16" time="0">
    </testcase>
    <testcase classname="en-US format full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time" name="en-US format full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US format manual time: full, date: full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time" name="en-US format manual time: full, date: full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US format manual time: full, date: long → April 28, 2016 at 1:12:47 PM Mountain Daylight Time" name="en-US format manual time: full, date: long → April 28, 2016 at 1:12:47 PM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US format manual time: full, date: medium → Apr 28, 2016, 1:12:47 PM Mountain Daylight Time" name="en-US format manual time: full, date: medium → Apr 28, 2016, 1:12:47 PM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US format manual time: full, date: short → 4/28/16, 1:12:47 PM Mountain Daylight Time" name="en-US format manual time: full, date: short → 4/28/16, 1:12:47 PM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US format long → April 28, 2016 at 1:12:47 PM MDT" name="en-US format long → April 28, 2016 at 1:12:47 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US format manual time: long, date: full → Thursday, April 28, 2016 at 1:12:47 PM MDT" name="en-US format manual time: long, date: full → Thursday, April 28, 2016 at 1:12:47 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US format manual time: long, date: long → April 28, 2016 at 1:12:47 PM MDT" name="en-US format manual time: long, date: long → April 28, 2016 at 1:12:47 PM MDT" time="0.003">
    </testcase>
    <testcase classname="en-US format manual time: long, date: medium → Apr 28, 2016, 1:12:47 PM MDT" name="en-US format manual time: long, date: medium → Apr 28, 2016, 1:12:47 PM MDT" time="0.001">
    </testcase>
    <testcase classname="en-US format manual time: long, date: short → 4/28/16, 1:12:47 PM MDT" name="en-US format manual time: long, date: short → 4/28/16, 1:12:47 PM MDT" time="0.001">
    </testcase>
    <testcase classname="en-US format medium → Apr 28, 2016, 1:12:47 PM" name="en-US format medium → Apr 28, 2016, 1:12:47 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: medium, date: full → Thursday, April 28, 2016 at 1:12:47 PM" name="en-US format manual time: medium, date: full → Thursday, April 28, 2016 at 1:12:47 PM" time="0.001">
    </testcase>
    <testcase classname="en-US format manual time: medium, date: long → April 28, 2016 at 1:12:47 PM" name="en-US format manual time: medium, date: long → April 28, 2016 at 1:12:47 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: medium, date: medium → Apr 28, 2016, 1:12:47 PM" name="en-US format manual time: medium, date: medium → Apr 28, 2016, 1:12:47 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: medium, date: short → 4/28/16, 1:12:47 PM" name="en-US format manual time: medium, date: short → 4/28/16, 1:12:47 PM" time="0">
    </testcase>
    <testcase classname="en-US format short → 4/28/16, 1:12 PM" name="en-US format short → 4/28/16, 1:12 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: short, date: full → Thursday, April 28, 2016 at 1:12 PM" name="en-US format manual time: short, date: full → Thursday, April 28, 2016 at 1:12 PM" time="0.001">
    </testcase>
    <testcase classname="en-US format manual time: short, date: long → April 28, 2016 at 1:12 PM" name="en-US format manual time: short, date: long → April 28, 2016 at 1:12 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: short, date: medium → Apr 28, 2016, 1:12 PM" name="en-US format manual time: short, date: medium → Apr 28, 2016, 1:12 PM" time="0">
    </testcase>
    <testcase classname="en-US format manual time: short, date: short → 4/28/16, 1:12 PM" name="en-US format manual time: short, date: short → 4/28/16, 1:12 PM" time="0">
    </testcase>
    <testcase classname="en-US format tooltip → Thursday, April 28, 2016 at 1:12:47 PM MDT" name="en-US format tooltip → Thursday, April 28, 2016 at 1:12:47 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time – Sunday, July 1, 2018 at 3:00:02 AM Mountain Daylight Time" name="en-US formatRange full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time – Sunday, July 1, 2018 at 3:00:02 AM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time – Sunday, July 1, 2018 at 3:00:02 AM Mountain Daylight Time" name="en-US formatRange manual time: full, date: full → Thursday, April 28, 2016 at 1:12:47 PM Mountain Daylight Time – Sunday, July 1, 2018 at 3:00:02 AM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: full → Thursday, April 28, 2016 at 1:12:47 PM MDT – Sunday, July 1, 2018 at 3:00:02 AM MDT" name="en-US formatRange manual time: long, date: full → Thursday, April 28, 2016 at 1:12:47 PM MDT – Sunday, July 1, 2018 at 3:00:02 AM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: full → Thursday, April 28, 2016 at 1:12:47 PM – Sunday, July 1, 2018 at 3:00:02 AM" name="en-US formatRange manual time: medium, date: full → Thursday, April 28, 2016 at 1:12:47 PM – Sunday, July 1, 2018 at 3:00:02 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: full → Thursday, April 28, 2016 at 1:12 PM – Sunday, July 1, 2018 at 3:00 AM" name="en-US formatRange manual time: short, date: full → Thursday, April 28, 2016 at 1:12 PM – Sunday, July 1, 2018 at 3:00 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: null, date: full → Thursday, April 28, 2016 – Sunday, July 1, 2018" name="en-US formatRange manual time: null, date: full → Thursday, April 28, 2016 – Sunday, July 1, 2018" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" name="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" name="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" name="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" name="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" time="0">
    </testcase>
    <testcase classname="en-US formatRange long → April 28, 2016 at 1:12:47 PM MDT – July 1, 2018 at 3:00:02 AM MDT" name="en-US formatRange long → April 28, 2016 at 1:12:47 PM MDT – July 1, 2018 at 3:00:02 AM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: long → April 28, 2016 at 1:12:47 PM Mountain Daylight Time – July 1, 2018 at 3:00:02 AM Mountain Daylight Time" name="en-US formatRange manual time: full, date: long → April 28, 2016 at 1:12:47 PM Mountain Daylight Time – July 1, 2018 at 3:00:02 AM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: long → April 28, 2016 at 1:12:47 PM MDT – July 1, 2018 at 3:00:02 AM MDT" name="en-US formatRange manual time: long, date: long → April 28, 2016 at 1:12:47 PM MDT – July 1, 2018 at 3:00:02 AM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: long → April 28, 2016 at 1:12:47 PM – July 1, 2018 at 3:00:02 AM" name="en-US formatRange manual time: medium, date: long → April 28, 2016 at 1:12:47 PM – July 1, 2018 at 3:00:02 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: long → April 28, 2016 at 1:12 PM – July 1, 2018 at 3:00 AM" name="en-US formatRange manual time: short, date: long → April 28, 2016 at 1:12 PM – July 1, 2018 at 3:00 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: null, date: long → April 28, 2016 – July 1, 2018" name="en-US formatRange manual time: null, date: long → April 28, 2016 – July 1, 2018" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" name="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" name="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" name="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" name="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" time="0.002">
    </testcase>
    <testcase classname="en-US formatRange medium → Apr 28, 2016, 1:12:47 PM – Jul 1, 2018, 3:00:02 AM" name="en-US formatRange medium → Apr 28, 2016, 1:12:47 PM – Jul 1, 2018, 3:00:02 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: medium → Apr 28, 2016, 1:12:47 PM Mountain Daylight Time – Jul 1, 2018, 3:00:02 AM Mountain Daylight Time" name="en-US formatRange manual time: full, date: medium → Apr 28, 2016, 1:12:47 PM Mountain Daylight Time – Jul 1, 2018, 3:00:02 AM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: medium → Apr 28, 2016, 1:12:47 PM MDT – Jul 1, 2018, 3:00:02 AM MDT" name="en-US formatRange manual time: long, date: medium → Apr 28, 2016, 1:12:47 PM MDT – Jul 1, 2018, 3:00:02 AM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: medium → Apr 28, 2016, 1:12:47 PM – Jul 1, 2018, 3:00:02 AM" name="en-US formatRange manual time: medium, date: medium → Apr 28, 2016, 1:12:47 PM – Jul 1, 2018, 3:00:02 AM" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: medium → Apr 28, 2016, 1:12 PM – Jul 1, 2018, 3:00 AM" name="en-US formatRange manual time: short, date: medium → Apr 28, 2016, 1:12 PM – Jul 1, 2018, 3:00 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: null, date: medium → Apr 28, 2016 – Jul 1, 2018" name="en-US formatRange manual time: null, date: medium → Apr 28, 2016 – Jul 1, 2018" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" name="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" name="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" name="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" name="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" time="0">
    </testcase>
    <testcase classname="en-US formatRange short → 4/28/16, 1:12 PM – 7/1/18, 3:00 AM" name="en-US formatRange short → 4/28/16, 1:12 PM – 7/1/18, 3:00 AM" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: short → 4/28/16, 1:12:47 PM Mountain Daylight Time – 7/1/18, 3:00:02 AM Mountain Daylight Time" name="en-US formatRange manual time: full, date: short → 4/28/16, 1:12:47 PM Mountain Daylight Time – 7/1/18, 3:00:02 AM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: short → 4/28/16, 1:12:47 PM MDT – 7/1/18, 3:00:02 AM MDT" name="en-US formatRange manual time: long, date: short → 4/28/16, 1:12:47 PM MDT – 7/1/18, 3:00:02 AM MDT" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: short → 4/28/16, 1:12:47 PM – 7/1/18, 3:00:02 AM" name="en-US formatRange manual time: medium, date: short → 4/28/16, 1:12:47 PM – 7/1/18, 3:00:02 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: short → 4/28/16, 1:12 PM – 7/1/18, 3:00 AM" name="en-US formatRange manual time: short, date: short → 4/28/16, 1:12 PM – 7/1/18, 3:00 AM" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: null, date: short → 4/28/16 – 7/1/18" name="en-US formatRange manual time: null, date: short → 4/28/16 – 7/1/18" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" name="en-US formatRange manual time: full, date: null → 1:12:47 PM Mountain Daylight Time – 3:04:30 PM Mountain Daylight Time" time="0">
    </testcase>
    <testcase classname="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" name="en-US formatRange manual time: long, date: null → 1:12:47 PM MDT – 3:04:30 PM MDT" time="0.001">
    </testcase>
    <testcase classname="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" name="en-US formatRange manual time: medium, date: null → 1:12:47 PM – 3:04:30 PM" time="0.002">
    </testcase>
    <testcase classname="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" name="en-US formatRange manual time: short, date: null → 1:12 – 3:04 PM" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="fontWeight" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.103" tests="4">
    <testcase classname="fontWeight should export the supported font weights" name="fontWeight should export the supported font weights" time="0">
    </testcase>
    <testcase classname="fontWeight should support getting the quoted string for a font weight" name="fontWeight should support getting the quoted string for a font weight" time="0.001">
    </testcase>
    <testcase classname="fontWeight should error out if trying to get a font weight that does not exist" name="fontWeight should error out if trying to get a font weight that does not exist" time="0.002">
    </testcase>
    <testcase classname="fontWeight should be printable" name="fontWeight should be printable" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FluidMultiSelectSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.147" tests="2">
    <testcase classname="FluidMultiSelectSkeleton should render with fluid classes" name="FluidMultiSelectSkeleton should render with fluid classes" time="0.002">
    </testcase>
    <testcase classname="FluidMultiSelectSkeleton should support a custom `className` prop on the outermost element" name="FluidMultiSelectSkeleton should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useContextMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.21" tests="2">
    <testcase classname="useContextMenu should open the context menu on right-click" name="useContextMenu should open the context menu on right-click" time="0.029">
    </testcase>
    <testcase classname="useContextMenu should close context menu when calling onClose" name="useContextMenu should close context menu when calling onClose" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="refactor-to-callout" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.141" tests="4">
    <testcase classname="refactor-to-callout transforms correctly" name="refactor-to-callout transforms correctly" time="0.035">
    </testcase>
    <testcase classname="refactor-to-callout transforms correctly using &quot;refactor-to-callout2&quot; data" name="refactor-to-callout transforms correctly using &quot;refactor-to-callout2&quot; data" time="0.003">
    </testcase>
    <testcase classname="refactor-to-callout transforms correctly using &quot;refactor-to-callout3&quot; data" name="refactor-to-callout transforms correctly using &quot;refactor-to-callout3&quot; data" time="0.003">
    </testcase>
    <testcase classname="refactor-to-callout transforms correctly using &quot;refactor-to-callout4&quot; data" name="refactor-to-callout transforms correctly using &quot;refactor-to-callout4&quot; data" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="defaultSortItems" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.123" tests="8">
    <testcase classname="defaultSortItems should sort un-selected options alphabetically" name="defaultSortItems should sort un-selected options alphabetically" time="0.009">
    </testcase>
    <testcase classname="defaultSortItems should sort un-selected numbers in increasing order" name="defaultSortItems should sort un-selected numbers in increasing order" time="0">
    </testcase>
    <testcase classname="defaultSortItems should sort un-selected alpha-numeric sequences with increasing order" name="defaultSortItems should sort un-selected alpha-numeric sequences with increasing order" time="0.002">
    </testcase>
    <testcase classname="defaultSortItems should order a selected item before all other options" name="defaultSortItems should order a selected item before all other options" time="0">
    </testcase>
    <testcase classname="defaultSortItems should sort selected items and order them before all other options" name="defaultSortItems should sort selected items and order them before all other options" time="0.001">
    </testcase>
    <testcase classname="defaultCompareItems should return a negative number if the first string comes before the second" name="defaultCompareItems should return a negative number if the first string comes before the second" time="0.001">
    </testcase>
    <testcase classname="defaultCompareItems should return a positive number if the first string comes after the second" name="defaultCompareItems should return a positive number if the first string comes after the second" time="0">
    </testcase>
    <testcase classname="defaultCompareItems should return 0 if both strings are equal" name="defaultCompareItems should return 0 if both strings are equal" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SideNavDivider" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.155" tests="1">
    <testcase classname="SideNavDivider renders as expected - Component API should support a custom `className` prop on the outermost element" name="SideNavDivider renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons-react" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="55.418" tests="2">
    <testcase classname="@carbon/icons-react should export each SVG asset" name="@carbon/icons-react should export each SVG asset" time="4.543">
    </testcase>
    <testcase classname="@carbon/icons-react should export each SVG asset as a direct path" name="@carbon/icons-react should export each SVG asset as a direct path" time="39.136">
    </testcase>
  </testsuite>
  <testsuite name="Token" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.183" tests="4">
    <testcase classname="Token should build a token with a string or object" name="Token should build a token with a string or object" time="0.002">
    </testcase>
    <testcase classname="Token should have a name property" name="Token should have a name property" time="0">
    </testcase>
    <testcase classname="Token should have a properties property if one is provided" name="Token should have a properties property if one is provided" time="0.001">
    </testcase>
    <testcase classname="Token should have a state property if one is provided" name="Token should have a state property if one is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FluidSearchSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.208" tests="3">
    <testcase classname="FluidSearchSkeleton should render as expected" name="FluidSearchSkeleton should render as expected" time="0.007">
    </testcase>
    <testcase classname="FluidSearchSkeleton should apply additional custom class names if provided" name="FluidSearchSkeleton should apply additional custom class names if provided" time="0.001">
    </testcase>
    <testcase classname="FluidSearchSkeleton provides &quot;isFluid&quot; context value as true" name="FluidSearchSkeleton provides &quot;isFluid&quot; context value as true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PaginationSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.182" tests="2">
    <testcase classname="PaginationSkeleton should support a custom `className` prop on the outermost element" name="PaginationSkeleton should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="PaginationSkeleton should spread additional props on the outermost element" name="PaginationSkeleton should spread additional props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="StructuredListSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.117" tests="2">
    <testcase classname="StructuredListSkeleton should support a custom `className` prop on the outermost element" name="StructuredListSkeleton should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="StructuredListSkeleton should spread additional props on the outermost element" name="StructuredListSkeleton should spread additional props on the outermost element" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="BadgeIndicator" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.143" tests="4">
    <testcase classname="BadgeIndicator should set a count" name="BadgeIndicator should set a count" time="0.005">
    </testcase>
    <testcase classname="BadgeIndicator should truncate the count over 999" name="BadgeIndicator should truncate the count over 999" time="0.002">
    </testcase>
    <testcase classname="BadgeIndicator should support a custom class name on the outermost element" name="BadgeIndicator should support a custom class name on the outermost element" time="0.001">
    </testcase>
    <testcase classname="BadgeIndicator should support a ref on the outermost element" name="BadgeIndicator should support a ref on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SkeletonPlaceholder" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.153" tests="1">
    <testcase classname="SkeletonPlaceholder should pass in an extra className when one is given" name="SkeletonPlaceholder should pass in an extra className when one is given" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="TableToolbar" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.199" tests="5">
    <testcase classname="TableToolbar renders as expected - Component API should render" name="TableToolbar renders as expected - Component API should render" time="0.003">
    </testcase>
    <testcase classname="TableToolbar renders as expected - Component API should spread extra props onto outermost element" name="TableToolbar renders as expected - Component API should spread extra props onto outermost element" time="0.002">
    </testcase>
    <testcase classname="TableToolbar renders as expected - Component API should respect aria-label prop" name="TableToolbar renders as expected - Component API should respect aria-label prop" time="0.004">
    </testcase>
    <testcase classname="TableToolbar renders as expected - Component API should render children as expected" name="TableToolbar renders as expected - Component API should render children as expected" time="0.004">
    </testcase>
    <testcase classname="TableToolbar renders as expected - Component API should respect size prop" name="TableToolbar renders as expected - Component API should respect size prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ButtonSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:23" time="0.226" tests="8">
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `sm`" name="ButtonSkeleton should set the expected classes for the size: `sm`" time="0.002">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `md`" name="ButtonSkeleton should set the expected classes for the size: `md`" time="0.001">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `lg`" name="ButtonSkeleton should set the expected classes for the size: `lg`" time="0">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `xl`" name="ButtonSkeleton should set the expected classes for the size: `xl`" time="0.001">
    </testcase>
    <testcase classname="ButtonSkeleton should set the expected classes for the size: `2xl`" name="ButtonSkeleton should set the expected classes for the size: `2xl`" time="0">
    </testcase>
    <testcase classname="ButtonSkeleton link variant should render an &lt;a&gt; when `href` is passed as a prop" name="ButtonSkeleton link variant should render an &lt;a&gt; when `href` is passed as a prop" time="0.01">
    </testcase>
    <testcase classname="ButtonSkeleton link variant should render with [role=&quot;button&quot;]" name="ButtonSkeleton link variant should render with [role=&quot;button&quot;]" time="0.006">
    </testcase>
    <testcase classname="ButtonSkeleton deprecated should set the small class name when the small prop is set" name="ButtonSkeleton deprecated should set the small class name when the small prop is set" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.167" tests="1">
    <testcase classname=" metadata" name=" metadata" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="SelectItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.142" tests="7">
    <testcase classname="SelectItem renders as expected - Component API should spread extra props onto outermost element" name="SelectItem renders as expected - Component API should spread extra props onto outermost element" time="0.006">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API Has the expected classes" name="SelectItem renders as expected - Component API Has the expected classes" time="0.002">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API should support a custom `className` prop on the outermost element" name="SelectItem renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API should respect disabled prop" name="SelectItem renders as expected - Component API should respect disabled prop" time="0.001">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API Should not be disabled by default" name="SelectItem renders as expected - Component API Should not be disabled by default" time="0.001">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API should respect hidden prop" name="SelectItem renders as expected - Component API should respect hidden prop" time="0.001">
    </testcase>
    <testcase classname="SelectItem renders as expected - Component API should respect value prop" name="SelectItem renders as expected - Component API should respect value prop" time="0">
    </testcase>
  </testsuite>
  <testsuite name="refactor-light-to-layer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.121" tests="1">
    <testcase classname="refactor-light-to-layer transforms correctly" name="refactor-light-to-layer transforms correctly" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="Storage" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.148" tests="2">
    <testcase classname="Storage Storage#load should load all extensions with data stored in files from a directory" name="Storage Storage#load should load all extensions with data stored in files from a directory" time="0.033">
    </testcase>
    <testcase classname="Storage Storage#write should write all extensions with data to files in the given directory" name="Storage Storage#write should write all extensions with data to files in the given directory" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="sorting state" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.081" tests="7">
    <testcase classname="sorting state sortStates should describe the available sort states" name="sorting state sortStates should describe the available sort states" time="0.001">
    </testcase>
    <testcase classname="sorting state initialSortState should set the initial sort state to NONE" name="sorting state initialSortState should set the initial sort state to NONE" time="0">
    </testcase>
    <testcase classname="sorting state getNextSortDirection should default to ASC" name="sorting state getNextSortDirection should default to ASC" time="0.001">
    </testcase>
    <testcase classname="sorting state getNextSortDirection should transition from ASC -&gt; DESC -&gt; NONE" name="sorting state getNextSortDirection should transition from ASC -&gt; DESC -&gt; NONE" time="0">
    </testcase>
    <testcase classname="sorting state getNextSortDirection should reset to ASC if the header changes" name="sorting state getNextSortDirection should reset to ASC if the header changes" time="0">
    </testcase>
    <testcase classname="sorting state getNextSortState should initialize in ASC order for the first header called" name="sorting state getNextSortState should initialize in ASC order for the first header called" time="0.001">
    </testcase>
    <testcase classname="sorting state getNextSortState should iterate through the sort order for the same header key" name="sorting state getNextSortState should iterate through the sort order for the same header key" time="0">
    </testcase>
  </testsuite>
  <testsuite name="HeaderSideNavItems" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.162" tests="3">
    <testcase classname="HeaderSideNavItems renders as expected - Component API should render children as expected" name="HeaderSideNavItems renders as expected - Component API should render children as expected" time="0.037">
    </testcase>
    <testcase classname="HeaderSideNavItems renders as expected - Component API should support a custom `className` prop on the outermost element" name="HeaderSideNavItems renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="HeaderSideNavItems renders as expected - Component API should respect hasDivider prop" name="HeaderSideNavItems renders as expected - Component API should respect hasDivider prop" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="cells tools" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.154" tests="1">
    <testcase classname="cells tools getCellId should return a string for the given rowId and header" name="cells tools getCellId should return a string for the given rowId and header" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SideNavDetails" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.21" tests="2">
    <testcase classname="SideNavDetails should support rendering a title through `title`" name="SideNavDetails should support rendering a title through `title`" time="0.002">
    </testcase>
    <testcase classname="SideNavDetails should support a custom `className` prop on the outermost element" name="SideNavDetails should support a custom `className` prop on the outermost element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="toString" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.198" tests="1">
    <testcase classname="toString should convert a given descriptor to a string" name="toString should convert a given descriptor to a string" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="scale" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.073" tests="3">
    <testcase classname="scale should export the type scale" name="scale should export the type scale" time="0">
    </testcase>
    <testcase classname="scale getTypeSize should return the base font for steps &lt;= 1" name="scale getTypeSize should return the base font for steps &lt;= 1" time="0">
    </testcase>
    <testcase classname="scale getTypeSize should support steps greater than 1" name="scale getTypeSize should support steps greater than 1" time="0">
    </testcase>
  </testsuite>
  <testsuite name="v11" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.262" tests="11">
    <testcase classname="v11 v11 token group" name="v11 v11 token group" time="0.001">
    </testcase>
    <testcase classname="v11 background token group" name="v11 background token group" time="0">
    </testcase>
    <testcase classname="v11 layer token group" name="v11 layer token group" time="0">
    </testcase>
    <testcase classname="v11 field token group" name="v11 field token group" time="0">
    </testcase>
    <testcase classname="v11 border token group" name="v11 border token group" time="0">
    </testcase>
    <testcase classname="v11 text token group" name="v11 text token group" time="0">
    </testcase>
    <testcase classname="v11 link token group" name="v11 link token group" time="0.001">
    </testcase>
    <testcase classname="v11 icon token group" name="v11 icon token group" time="0">
    </testcase>
    <testcase classname="v11 support token group" name="v11 support token group" time="0">
    </testcase>
    <testcase classname="v11 focus token group" name="v11 focus token group" time="0">
    </testcase>
    <testcase classname="v11 skeleton token group" name="v11 skeleton token group" time="0">
    </testcase>
  </testsuite>
  <testsuite name="fontFamily" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.096" tests="4">
    <testcase classname="fontFamily should export the supported font families" name="fontFamily should export the supported font families" time="0">
    </testcase>
    <testcase classname="fontFamily should support getting the quoted string for a font family" name="fontFamily should support getting the quoted string for a font family" time="0">
    </testcase>
    <testcase classname="fontFamily should error out if trying to get a font that does not exist" name="fontFamily should error out if trying to get a font that does not exist" time="0.002">
    </testcase>
    <testcase classname="fontFamily should be printable" name="fontFamily should be printable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Extension" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.113" tests="5">
    <testcase classname="Extension should load the given extensions" name="Extension should load the given extensions" time="0">
    </testcase>
    <testcase classname="Extension should support loading an extension with options" name="Extension should support loading an extension with options" time="0">
    </testcase>
    <testcase classname="Extension should load extensions listed under `before` before the extension" name="Extension should load extensions listed under `before` before the extension" time="0">
    </testcase>
    <testcase classname="Extension should not load an extension twice if it has already been loaded" name="Extension should not load an extension twice if it has already been loaded" time="0">
    </testcase>
    <testcase classname="Extension should throw if an invalid extension is provided" name="Extension should throw if an invalid extension is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="wrapComponent" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.441" tests="5">
    <testcase classname="wrapComponent should render the outermost element as the given type" name="wrapComponent should render the outermost element as the given type" time="0.014">
    </testcase>
    <testcase classname="wrapComponent should set the `displayName` for a component" name="wrapComponent should set the `displayName` for a component" time="0.001">
    </testcase>
    <testcase classname="wrapComponent should support static class names with `className`" name="wrapComponent should support static class names with `className`" time="0.001">
    </testcase>
    <testcase classname="wrapComponent should support prefix class names with `className`" name="wrapComponent should support prefix class names with `className`" time="0.001">
    </testcase>
    <testcase classname="wrapComponent should spread additional props on the outermost node" name="wrapComponent should spread additional props on the outermost node" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Form - RTL" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.163" tests="2">
    <testcase classname="Form - RTL should support a custom `className` prop on the outermost element" name="Form - RTL should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="Form - RTL should spread extra props on the outermost element" name="Form - RTL should spread extra props on the outermost element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useNoInteractiveChildren" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.112" tests="2">
    <testcase classname="useNoInteractiveChildren should render without errors if no interactive content is found" name="useNoInteractiveChildren should render without errors if no interactive content is found" time="0.001">
    </testcase>
    <testcase classname="useNoInteractiveChildren should throw an error if interactive content is found" name="useNoInteractiveChildren should throw an error if interactive content is found" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="useId SSR" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.11" tests="1">
    <testcase classname="useId SSR should generate an id on the server" name="useId SSR should generate an id on the server" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="usePrefix" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.093" tests="2">
    <testcase classname="usePrefix should emit the default prefix without context" name="usePrefix should emit the default prefix without context" time="0.002">
    </testcase>
    <testcase classname="usePrefix should emit the prefix in context" name="usePrefix should emit the prefix in context" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="SideNavItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.135" tests="2">
    <testcase classname="SideNavItem should set the large class when `large` is true" name="SideNavItem should set the large class when `large` is true" time="0.003">
    </testcase>
    <testcase classname="SideNavItem should support a custom `className` prop on the outermost element" name="SideNavItem should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getAttributes" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.17" tests="11">
    <testcase classname="getAttributes should default `aria-hidden=&quot;true&quot;` and `focusable=&quot;false&quot;` for SVGs" name="getAttributes should default `aria-hidden=&quot;true&quot;` and `focusable=&quot;false&quot;` for SVGs" time="0.004">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;false&quot;` when using only tabindex" name="getAttributes should set `focusable=&quot;false&quot;` when using only tabindex" time="0.001">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;true&quot;` when using aria-label and tabindex" name="getAttributes should set `focusable=&quot;true&quot;` when using aria-label and tabindex" time="0">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;false&quot;` when using only aria-label" name="getAttributes should set `focusable=&quot;false&quot;` when using only aria-label" time="0.001">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;true&quot;` when using aria-labelledby and tabindex" name="getAttributes should set `focusable=&quot;true&quot;` when using aria-labelledby and tabindex" time="0">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;false&quot;` when using only aria-labelledby" name="getAttributes should set `focusable=&quot;false&quot;` when using only aria-labelledby" time="0">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;true&quot;` when using title and tabindex" name="getAttributes should set `focusable=&quot;true&quot;` when using title and tabindex" time="0">
    </testcase>
    <testcase classname="getAttributes should set `focusable=&quot;false&quot;` when using only title" name="getAttributes should set `focusable=&quot;false&quot;` when using only title" time="0">
    </testcase>
    <testcase classname="getAttributes should set role and remove aria-hidden if `aria-label` is set" name="getAttributes should set role and remove aria-hidden if `aria-label` is set" time="0">
    </testcase>
    <testcase classname="getAttributes should set role and remove aria-hidden if `aria-labelledby` is set" name="getAttributes should set role and remove aria-hidden if `aria-labelledby` is set" time="0">
    </testcase>
    <testcase classname="getAttributes should set role and remove aria-hidden if `title` is set" name="getAttributes should set role and remove aria-hidden if `title` is set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:24" time="0.087" tests="2">
    <testcase classname=" colors" name=" colors" time="0.001">
    </testcase>
    <testcase classname=" hoverColors" name=" hoverColors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="warning" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.11" tests="3">
    <testcase classname="warning calls console.warn() when the condition is false" name="warning calls console.warn() when the condition is false" time="0">
    </testcase>
    <testcase classname="warning does not call console.warn() when the condition is true" name="warning does not call console.warn() when the condition is true" time="0">
    </testcase>
    <testcase classname="warning throws an error when no message is provided" name="warning throws an error when no message is provided" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="sortRow" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.19" tests="5">
    <testcase classname="sortRow should sort data in ascending order" name="sortRow should sort data in ascending order" time="0.007">
    </testcase>
    <testcase classname="sortRow should sort data in descending order" name="sortRow should sort data in descending order" time="0.008">
    </testcase>
    <testcase classname="sortRow should return unsorted data if cells not found" name="sortRow should return unsorted data if cells not found" time="0">
    </testcase>
    <testcase classname="defaultSortRow should sort data in ascending order" name="defaultSortRow should sort data in ascending order" time="0">
    </testcase>
    <testcase classname="defaultSortRow should sort data in descending order" name="defaultSortRow should sort data in descending order" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RadioButtonSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.215" tests="2">
    <testcase classname="RadioButtonSkeleton should support `className` on the outermost element" name="RadioButtonSkeleton should support `className` on the outermost element" time="0.003">
    </testcase>
    <testcase classname="RadioButtonSkeleton should spread props on the outermost element" name="RadioButtonSkeleton should spread props on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="normalize" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.138" tests="4">
    <testcase classname="normalize should return an object with normalized fields" name="normalize should return an object with normalized fields" time="0.001">
    </testcase>
    <testcase classname="normalize should return an array of the row ids" name="normalize should return an array of the row ids" time="0.016">
    </testcase>
    <testcase classname="normalize should return a normalized map of rows by id" name="normalize should return a normalized map of rows by id" time="0.001">
    </testcase>
    <testcase classname="normalize should return a normalized map of cells by id" name="normalize should return a normalized map of cells by id" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="FluidTextInputSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.275" tests="2">
    <testcase classname="FluidTextInputSkeleton should render with fluid classes" name="FluidTextInputSkeleton should render with fluid classes" time="0.001">
    </testcase>
    <testcase classname="FluidTextInputSkeleton should support a custom `className` prop on the outermost element" name="FluidTextInputSkeleton should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FluidTextAreaSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.13" tests="2">
    <testcase classname="FluidTextAreaSkeleton should render with fluid classes" name="FluidTextAreaSkeleton should render with fluid classes" time="0.002">
    </testcase>
    <testcase classname="FluidTextAreaSkeleton should support a custom `className` prop on the outermost element" name="FluidTextAreaSkeleton should support a custom `className` prop on the outermost element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="mergeRefs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.131" tests="2">
    <testcase classname="mergeRefs supports forwardRef as well as ref callback" name="mergeRefs supports forwardRef as well as ref callback" time="0.004">
    </testcase>
    <testcase classname="mergeRefs skips empty ref" name="mergeRefs skips empty ref" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useLayer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.153" tests="2">
    <testcase classname="useLayer default value" name="useLayer default value" time="0.001">
    </testcase>
    <testcase classname="useLayer nesting" name="useLayer nesting" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TokenFormat" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.162" tests="4">
    <testcase classname="TokenFormat should return the given name if no formatting is required" name="TokenFormat should return the given name if no formatting is required" time="0">
    </testcase>
    <testcase classname="TokenFormat formats.js token-name should be formatted to tokenName" name="TokenFormat formats.js token-name should be formatted to tokenName" time="0">
    </testcase>
    <testcase classname="TokenFormat formats.js test-ui should be formatted to testUI" name="TokenFormat formats.js test-ui should be formatted to testUI" time="0">
    </testcase>
    <testcase classname="TokenFormat formats.js token-01 should be formatted to token01" name="TokenFormat formats.js token-01 should be formatted to token01" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SkipToContent" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.15" tests="4">
    <testcase classname="SkipToContent should support setting the `href` of the underlying &lt;a&gt; element" name="SkipToContent should support setting the `href` of the underlying &lt;a&gt; element" time="0.009">
    </testcase>
    <testcase classname="SkipToContent should support setting the `tabIndex` of the underlying &lt;a&gt; element" name="SkipToContent should support setting the `tabIndex` of the underlying &lt;a&gt; element" time="0.002">
    </testcase>
    <testcase classname="SkipToContent should support a custom `className` prop on the outermost element" name="SkipToContent should support a custom `className` prop on the outermost element" time="0">
    </testcase>
    <testcase classname="SkipToContent should spread extra props on the outermost element" name="SkipToContent should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useAnnouncer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.13" tests="4">
    <testcase classname="useAnnouncer should emit announcement for characters" name="useAnnouncer should emit announcement for characters" time="0.002">
    </testcase>
    <testcase classname="useAnnouncer should emit announcement for words" name="useAnnouncer should emit announcement for words" time="0">
    </testcase>
    <testcase classname="useAnnouncer should emit announcement for maximum words reached" name="useAnnouncer should emit announcement for maximum words reached" time="0.001">
    </testcase>
    <testcase classname="useAnnouncer should emit announcement for maximum characters reached" name="useAnnouncer should emit announcement for maximum characters reached" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.154" tests="2">
    <testcase classname="CheckboxSkeleton should support a custom className on the outermost element" name="CheckboxSkeleton should support a custom className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="CheckboxSkeleton should spread props onto the outermost element" name="CheckboxSkeleton should spread props onto the outermost element" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="deprecate" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.173" tests="2">
    <testcase classname="deprecate should call warning and prop type checker if the prop type is called" name="deprecate should call warning and prop type checker if the prop type is called" time="0.015">
    </testcase>
    <testcase classname="deprecate should not call warning more than once for a component and prop name" name="deprecate should not call warning more than once for a component and prop name" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="toSVG" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.122" tests="1">
    <testcase classname="toSVG should convert a given descriptor to a valid DOM node" name="toSVG should convert a given descriptor to a valid DOM node" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="memory" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.115" tests="3">
    <testcase classname="memory should read a filepath and return its content as a value" name="memory should read a filepath and return its content as a value" time="0.002">
    </testcase>
    <testcase classname="memory should write the given data as yml to the given filepath" name="memory should write the given data as yml to the given filepath" time="0.001">
    </testcase>
    <testcase classname="memory should throw if the file its trying to read from does not exist" name="memory should throw if the file its trying to read from does not exist" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.127" tests="4">
    <testcase classname=" increments the index forward" name=" increments the index forward" time="0.001">
    </testcase>
    <testcase classname=" increments the index backward" name=" increments the index backward" time="0">
    </testcase>
    <testcase classname=" loops last index to first" name=" loops last index to first" time="0">
    </testcase>
    <testcase classname=" loops first index to last" name=" loops first index to last" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="uniqueId" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.138" tests="2">
    <testcase classname="uniqueId increments unique id as expected" name="uniqueId increments unique id as expected" time="0">
    </testcase>
    <testcase classname="uniqueId accepts a custom prefix" name="uniqueId accepts a custom prefix" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useId" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.172" tests="3">
    <testcase classname="useId should generate a unique id that is stable across renders" name="useId should generate a unique id that is stable across renders" time="0.005">
    </testcase>
    <testcase classname="useId should generate a unique id when using the useFallbackId empty" name="useId should generate a unique id when using the useFallbackId empty" time="0.002">
    </testcase>
    <testcase classname="useId should received a unique id by passing a string on params when using useFallbackId" name="useId should received a unique id by passing a string on params when using useFallbackId" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Icon" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.168" tests="4">
    <testcase classname="Icon should render" name="Icon should render" time="0.002">
    </testcase>
    <testcase classname="Icon should treat focusable as a string" name="Icon should treat focusable as a string" time="0.007">
    </testcase>
    <testcase classname="Icon should forward refs to the rendered SVG DOM element" name="Icon should forward refs to the rendered SVG DOM element" time="0.003">
    </testcase>
    <testcase classname="Icon should be focusable if an aria label and tab index is used" name="Icon should be focusable if an aria label and tab index is used" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="SideNavLink" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.247" tests="5">
    <testcase classname="SideNavLink should set the current class when `isActive` is true" name="SideNavLink should set the current class when `isActive` is true" time="0.01">
    </testcase>
    <testcase classname="SideNavLink should support a custom icon through `renderIcon`" name="SideNavLink should support a custom icon through `renderIcon`" time="0.018">
    </testcase>
    <testcase classname="SideNavLink should support a custom `className` prop on the element with role=&quot;link&quot;" name="SideNavLink should support a custom `className` prop on the element with role=&quot;link&quot;" time="0.007">
    </testcase>
    <testcase classname="SideNavLink should spread extra props on the element with role=&quot;link&quot;" name="SideNavLink should spread extra props on the element with role=&quot;link&quot;" time="0.006">
    </testcase>
    <testcase classname="SideNavLink should set a `ref` on the element with role=&quot;link&quot;" name="SideNavLink should set a `ref` on the element with role=&quot;link&quot;" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="SideNavSwitcher" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.512" tests="4">
    <testcase classname="SideNavSwitcher should label the &lt;select&gt; through `labelText`" name="SideNavSwitcher should label the &lt;select&gt; through `labelText`" time="0.033">
    </testcase>
    <testcase classname="SideNavSwitcher should call `onChange` when the value of the &lt;select&gt; changes" name="SideNavSwitcher should call `onChange` when the value of the &lt;select&gt; changes" time="0.076">
    </testcase>
    <testcase classname="SideNavSwitcher should support a custom `className` prop on the outermost element" name="SideNavSwitcher should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="SideNavSwitcher should support a `ref` on the &lt;select&gt; element" name="SideNavSwitcher should support a `ref` on the &lt;select&gt; element" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="SideNavItems" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.432" tests="1">
    <testcase classname="SideNavItems should support a custom `className` prop on the outermost element" name="SideNavItems should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="SideNavMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:25" time="0.76" tests="19">
    <testcase classname="SideNavMenu should be expanded by default if `defaultExpanded` is true" name="SideNavMenu should be expanded by default if `defaultExpanded` is true" time="0.097">
    </testcase>
    <testcase classname="SideNavMenu should set the active class if `isActive` is true and the component has an active child" name="SideNavMenu should set the active class if `isActive` is true and the component has an active child" time="0.002">
    </testcase>
    <testcase classname="SideNavMenu should set the large class if `large` is true" name="SideNavMenu should set the large class if `large` is true" time="0.002">
    </testcase>
    <testcase classname="SideNavMenu should support rendering an icon through `renderIcon`" name="SideNavMenu should support rendering an icon through `renderIcon`" time="0.003">
    </testcase>
    <testcase classname="SideNavMenu should toggle the menu on click" name="SideNavMenu should toggle the menu on click" time="0.102">
    </testcase>
    <testcase classname="SideNavMenu should support a custom `className` prop on the outermost element" name="SideNavMenu should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="SideNavMenu should support a `ref` on the &lt;button&gt; element" name="SideNavMenu should support a `ref` on the &lt;button&gt; element" time="0.006">
    </testcase>
    <testcase classname="SideNavMenu sets isExpanded and prevExpanded when sideNav is not expanded and isRail is true" name="SideNavMenu sets isExpanded and prevExpanded when sideNav is not expanded and isRail is true" time="0.022">
    </testcase>
    <testcase classname="SideNavMenu sets isExpanded and prevExpanded when sideNav is expanded, prevExpanded is true and isRail is true" name="SideNavMenu sets isExpanded and prevExpanded when sideNav is expanded, prevExpanded is true and isRail is true" time="0.016">
    </testcase>
    <testcase classname="SideNavMenu closes sideNav on escape key press" name="SideNavMenu closes sideNav on escape key press" time="0.026">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a child in children array has isActive" name="properly detects active descendants and applies active styling when a child in children array has isActive" time="0.004">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a child in children array has aria-current" name="properly detects active descendants and applies active styling when a child in children array has aria-current" time="0.006">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a child in nested children array has isActive" name="properly detects active descendants and applies active styling when a child in nested children array has isActive" time="0.008">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a child in nested children array has aria-current" name="properly detects active descendants and applies active styling when a child in nested children array has aria-current" time="0.007">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a single child has isActive" name="properly detects active descendants and applies active styling when a single child has isActive" time="0.008">
    </testcase>
    <testcase classname="properly detects active descendants and applies active styling when a single child has aria-current" name="properly detects active descendants and applies active styling when a single child has aria-current" time="0.003">
    </testcase>
    <testcase classname="properly detects non-active descendants and does not apply active styling when a child in children array is not a valid element" name="properly detects non-active descendants and does not apply active styling when a child in children array is not a valid element" time="0.002">
    </testcase>
    <testcase classname="properly detects non-active descendants and does not apply active styling when all children have no props given" name="properly detects non-active descendants and does not apply active styling when all children have no props given" time="0.001">
    </testcase>
    <testcase classname="properly detects non-active descendants and does not apply active styling when a single child has no props" name="properly detects non-active descendants and does not apply active styling when a single child has no props" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SideNavFooter" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.541" tests="3">
    <testcase classname="SideNavFooter should support labeling a rendered &lt;button&gt; through assistiveText" name="SideNavFooter should support labeling a rendered &lt;button&gt; through assistiveText" time="0.015">
    </testcase>
    <testcase classname="SideNavFooter should call `onToggle` when a user interacts with the toggle" name="SideNavFooter should call `onToggle` when a user interacts with the toggle" time="0.031">
    </testcase>
    <testcase classname="SideNavFooter should support a custom `className` prop on the outermost element" name="SideNavFooter should support a custom `className` prop on the outermost element" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="HeaderName" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.269" tests="6">
    <testcase classname="HeaderName should render `children` in an element with role=&quot;link&quot;" name="HeaderName should render `children` in an element with role=&quot;link&quot;" time="0.014">
    </testcase>
    <testcase classname="HeaderName should support a custom prefix" name="HeaderName should support a custom prefix" time="0.006">
    </testcase>
    <testcase classname="HeaderName should support no prefix" name="HeaderName should support no prefix" time="0.004">
    </testcase>
    <testcase classname="HeaderName should support specifying the href for the link with `href`" name="HeaderName should support specifying the href for the link with `href`" time="0.001">
    </testcase>
    <testcase classname="HeaderName should support a custom `className` prop on the outermost element" name="HeaderName should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="HeaderName should spread extra props on the outermost element" name="HeaderName should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SideNav" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.435" tests="27">
    <testcase classname="SideNav should label the &lt;nav&gt; through `aria-label`" name="SideNav should label the &lt;nav&gt; through `aria-label`" time="0.01">
    </testcase>
    <testcase classname="SideNav should render an overlay if `isFixedNav` is false" name="SideNav should render an overlay if `isFixedNav` is false" time="0.002">
    </testcase>
    <testcase classname="SideNav should not render an overlay if `isFixedNav` is true" name="SideNav should not render an overlay if `isFixedNav` is true" time="0.003">
    </testcase>
    <testcase classname="SideNav should toggle the overlay-active class when `expanded` is true" name="SideNav should toggle the overlay-active class when `expanded` is true" time="0.002">
    </testcase>
    <testcase classname="SideNav should toggle the overlay-active class when `defaultExpanded` is true" name="SideNav should toggle the overlay-active class when `defaultExpanded` is true" time="0.001">
    </testcase>
    <testcase classname="SideNav should support a custom `className` prop on the element with role=&quot;navigation&quot;" name="SideNav should support a custom `className` prop on the element with role=&quot;navigation&quot;" time="0.01">
    </testcase>
    <testcase classname="SideNav should spread extra props on the outermost element" name="SideNav should spread extra props on the outermost element" time="0.002">
    </testcase>
    <testcase classname="SideNav should support a `ref` on the element with role=&quot;navigation&quot;" name="SideNav should support a `ref` on the element with role=&quot;navigation&quot;" time="0.002">
    </testcase>
    <testcase classname="SideNav should call onOverlayClick when overlay is clicked" name="SideNav should call onOverlayClick when overlay is clicked" time="0.002">
    </testcase>
    <testcase classname="SideNav should not add focus or mouse listeners when disabled" name="SideNav should not add focus or mouse listeners when disabled" time="0.009">
    </testcase>
    <testcase classname="SideNav should handle keyboard events like Escape" name="SideNav should handle keyboard events like Escape" time="0.014">
    </testcase>
    <testcase classname="SideNav should correctly handle `isRail` when true" name="SideNav should correctly handle `isRail` when true" time="0.002">
    </testcase>
    <testcase classname="SideNav should correctly handle `isRail` when false" name="SideNav should correctly handle `isRail` when false" time="0.002">
    </testcase>
    <testcase classname="SideNav should toggle the expanded state when uncontrolled" name="SideNav should toggle the expanded state when uncontrolled" time="0.002">
    </testcase>
    <testcase classname="SideNav should handle children without throwing error" name="SideNav should handle children without throwing error" time="0.002">
    </testcase>
    <testcase classname="SideNav should pass isSideNavExpanded to Carbon SideNav children" name="SideNav should pass isSideNavExpanded to Carbon SideNav children" time="0.003">
    </testcase>
    <testcase classname="SideNav should not pass isSideNavExpanded to non-CarbonSideNav children" name="SideNav should not pass isSideNavExpanded to non-CarbonSideNav children" time="0.001">
    </testcase>
    <testcase classname="SideNav should pass isSideNavExpanded correctly based on controlled state" name="SideNav should pass isSideNavExpanded correctly based on controlled state" time="0.003">
    </testcase>
    <testcase classname="SideNav should call handleToggle and onSideNavBlur when blurred" name="SideNav should call handleToggle and onSideNavBlur when blurred" time="0.019">
    </testcase>
    <testcase classname="SideNav should not call onSideNavBlur if not expanded and isFixedNav is true" name="SideNav should not call onSideNavBlur if not expanded and isFixedNav is true" time="0.006">
    </testcase>
    <testcase classname="SideNav should call onSideNavBlur when blurred, is not fixed, and is expanded" name="SideNav should call onSideNavBlur when blurred, is not fixed, and is expanded" time="0.002">
    </testcase>
    <testcase classname="SideNav should not call onSideNavBlur when isFixedNav is true" name="SideNav should not call onSideNavBlur when isFixedNav is true" time="0.002">
    </testcase>
    <testcase classname="SideNav should set expanded state to false on mouse leave" name="SideNav should set expanded state to false on mouse leave" time="0.004">
    </testcase>
    <testcase classname="SideNav should handleToggle if isRail is true" name="SideNav should handleToggle if isRail is true" time="0.006">
    </testcase>
    <testcase classname="SideNav should not call handleToggle if isRail is false" name="SideNav should not call handleToggle if isRail is false" time="0.002">
    </testcase>
    <testcase classname="SideNav should expand the SideNav immediately on click" name="SideNav should expand the SideNav immediately on click" time="0.01">
    </testcase>
    <testcase classname="SideNav should focus SideNav after tabbing from headerMenuButton" name="SideNav should focus SideNav after tabbing from headerMenuButton" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="HeaderMenuItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.19" tests="4">
    <testcase classname="HeaderMenuItem should set the current class based on isActive" name="HeaderMenuItem should set the current class based on isActive" time="0.007">
    </testcase>
    <testcase classname="HeaderMenuItem should support a custom `className` prop on the outermost element" name="HeaderMenuItem should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="HeaderMenuItem should spread extra props on the &lt;a&gt; element" name="HeaderMenuItem should spread extra props on the &lt;a&gt; element" time="0.001">
    </testcase>
    <testcase classname="HeaderMenuItem should support a `ref` on the &lt;a&gt; element" name="HeaderMenuItem should support a `ref` on the &lt;a&gt; element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="HeaderGlobalBar" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.518" tests="2">
    <testcase classname="HeaderGlobalBar should support a custom `className` prop on the outermost element" name="HeaderGlobalBar should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="HeaderGlobalBar should spread extra props on the outermost element" name="HeaderGlobalBar should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="HeaderMenuButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.615" tests="9">
    <testcase classname="HeaderMenuButton should label the &lt;button&gt; element through `aria-label`" name="HeaderMenuButton should label the &lt;button&gt; element through `aria-label`" time="0.009">
    </testcase>
    <testcase classname="HeaderMenuButton should set the title of the &lt;button&gt; through `aria-label`" name="HeaderMenuButton should set the title of the &lt;button&gt; through `aria-label`" time="0.001">
    </testcase>
    <testcase classname="HeaderMenuButton should the active class through `isActive`" name="HeaderMenuButton should the active class through `isActive`" time="0.068">
    </testcase>
    <testcase classname="HeaderMenuButton should the hidden class through `isCollapsible" name="HeaderMenuButton should the hidden class through `isCollapsible" time="0.014">
    </testcase>
    <testcase classname="HeaderMenuButton should call `onClick` when the &lt;button&gt; is clicked" name="HeaderMenuButton should call `onClick` when the &lt;button&gt; is clicked" time="0.025">
    </testcase>
    <testcase classname="HeaderMenuButton should support a custom close icon through `renderCloseIcon`" name="HeaderMenuButton should support a custom close icon through `renderCloseIcon`" time="0.004">
    </testcase>
    <testcase classname="HeaderMenuButton should support a custom menu icon through `renderMenuIcon`" name="HeaderMenuButton should support a custom menu icon through `renderMenuIcon`" time="0.003">
    </testcase>
    <testcase classname="HeaderMenuButton should support a custom `className` prop on the outermost element" name="HeaderMenuButton should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="HeaderMenuButton should spread extra props on the outermost element" name="HeaderMenuButton should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="HeaderMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.748" tests="7">
    <testcase classname="HeaderMenu should set the current class if `isActive` is true" name="HeaderMenu should set the current class if `isActive` is true" time="0.017">
    </testcase>
    <testcase classname="HeaderMenu should support a custom `className` prop on the outermost element" name="HeaderMenu should support a custom `className` prop on the outermost element" time="0.007">
    </testcase>
    <testcase classname="HeaderMenu should spread extra props on the outermost element" name="HeaderMenu should spread extra props on the outermost element" time="0.008">
    </testcase>
    <testcase classname="HeaderMenu should support a `ref` on the menu button" name="HeaderMenu should support a `ref` on the menu button" time="0.008">
    </testcase>
    <testcase classname="HeaderMenu should handle on click on the menu" name="HeaderMenu should handle on click on the menu" time="0.131">
    </testcase>
    <testcase classname="HeaderMenu should handle on key down on the menu" name="HeaderMenu should handle on key down on the menu" time="0.052">
    </testcase>
    <testcase classname="HeaderMenu should handle blur on the menu" name="HeaderMenu should handle blur on the menu" time="0.334">
    </testcase>
  </testsuite>
  <testsuite name="HeaderGlobalAction" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:26" time="0.589" tests="6">
    <testcase classname="HeaderGlobalAction should support labeling through aria-label" name="HeaderGlobalAction should support labeling through aria-label" time="0.022">
    </testcase>
    <testcase classname="HeaderGlobalAction should support a custom `className` prop on the button element" name="HeaderGlobalAction should support a custom `className` prop on the button element" time="0.006">
    </testcase>
    <testcase classname="HeaderGlobalAction should spread extra props on the button element" name="HeaderGlobalAction should spread extra props on the button element" time="0.003">
    </testcase>
    <testcase classname="HeaderGlobalAction should support a `ref` that is placed on the &lt;button&gt; element" name="HeaderGlobalAction should support a `ref` that is placed on the &lt;button&gt; element" time="0.007">
    </testcase>
    <testcase classname="HeaderGlobalAction should toggle the active class when `isActive` is set" name="HeaderGlobalAction should toggle the active class when `isActive` is set" time="0.012">
    </testcase>
    <testcase classname="HeaderGlobalAction should call `onClick` when the &lt;button&gt; is clicked" name="HeaderGlobalAction should call `onClick` when the &lt;button&gt; is clicked" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="Header" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.362" tests="3">
    <testcase classname="Header should support labeling through aria-label" name="Header should support labeling through aria-label" time="0.005">
    </testcase>
    <testcase classname="Header should support a custom `className` prop on the outermost element" name="Header should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="Header should spread extra props on the outermost element" name="Header should spread extra props on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Content" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.297" tests="3">
    <testcase classname="Content should support customizing the tag of the outermost element with `tagName`" name="Content should support customizing the tag of the outermost element with `tagName`" time="0.004">
    </testcase>
    <testcase classname="Content should support a custom `className` prop on the outermost element" name="Content should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="Content should spread extra props on the outermost element" name="Content should spread extra props on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="HeaderContainer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.433" tests="4">
    <testcase classname="HeaderContainer should support rendering through a render prop" name="HeaderContainer should support rendering through a render prop" time="0.005">
    </testcase>
    <testcase classname="HeaderContainer should call the `render` prop any time the state changes" name="HeaderContainer should call the `render` prop any time the state changes" time="0.002">
    </testcase>
    <testcase classname="HeaderContainer should pass through rest props" name="HeaderContainer should pass through rest props" time="0.005">
    </testcase>
    <testcase classname="HeaderContainer should close the side nav on Escape" name="HeaderContainer should close the side nav on Escape" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="TreeNode Component" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.574" tests="18">
    <testcase classname="TreeNode Component should handle forwarded refs correctly when forwardRef is a function" name="TreeNode Component should handle forwarded refs correctly when forwardRef is a function" time="0.015">
    </testcase>
    <testcase classname="TreeNode Component should correctly set the ref when forwardedRef is a mutable ref object" name="TreeNode Component should correctly set the ref when forwardedRef is a mutable ref object" time="0.002">
    </testcase>
    <testcase classname="TreeNode Component should pass the correct props to child TreeNodes" name="TreeNode Component should pass the correct props to child TreeNodes" time="0.009">
    </testcase>
    <testcase classname="TreeNode Component calculates the correct offset for parent node with icon" name="TreeNode Component calculates the correct offset for parent node with icon" time="0.009">
    </testcase>
    <testcase classname="TreeNode Component calculates the correct offset for leaf node with icon" name="TreeNode Component calculates the correct offset for leaf node with icon" time="0.014">
    </testcase>
    <testcase classname="TreeNode - handleToggleClick should stop event propagation and toggle expanded state" name="TreeNode - handleToggleClick should stop event propagation and toggle expanded state" time="0.044">
    </testcase>
    <testcase classname="TreeNode - handleToggleClick should do nothing if the node is disabled" name="TreeNode - handleToggleClick should do nothing if the node is disabled" time="0.006">
    </testcase>
    <testcase classname="TreeNode - handleClick should call onTreeSelect, onNodeSelect, and rest.onClick when the node is not disabled" name="TreeNode - handleClick should call onTreeSelect, onNodeSelect, and rest.onClick when the node is not disabled" time="0.007">
    </testcase>
    <testcase classname="TreeNode - handleClick should support specifying the href" name="TreeNode - handleClick should support specifying the href" time="0.011">
    </testcase>
    <testcase classname=" should support specifying the href for parent nodes" name=" should support specifying the href for parent nodes" time="0.007">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should do nothing if the node is disabled" name="TreeNode - handleKeyDown should do nothing if the node is disabled" time="0.016">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should find the Parent Element when ArrowLeft is clicked " name="TreeNode - handleKeyDown should find the Parent Element when ArrowLeft is clicked " time="0.005">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should collapse the node when ArrowLeft is pressed on an expanded node" name="TreeNode - handleKeyDown should collapse the node when ArrowLeft is pressed on an expanded node" time="0.02">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should expand the node when ArrowRight is pressed on a collapsed node" name="TreeNode - handleKeyDown should expand the node when ArrowRight is pressed on a collapsed node" time="0.009">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should move focus to first child when ArrowRight is pressed on an expanded node" name="TreeNode - handleKeyDown should move focus to first child when ArrowRight is pressed on an expanded node" time="0.009">
    </testcase>
    <testcase classname="TreeNode - handleKeyDown should trigger click handler when Enter or Space is pressed" name="TreeNode - handleKeyDown should trigger click handler when Enter or Space is pressed" time="0.002">
    </testcase>
    <testcase classname="TreeNode - handleFocusEvent should call onFocus when event type is &quot;focus&quot;" name="TreeNode - handleFocusEvent should call onFocus when event type is &quot;focus&quot;" time="0.016">
    </testcase>
    <testcase classname="TreeNode - handleFocusEvent should call onBlur when event type is &quot;blur&quot;" name="TreeNode - handleFocusEvent should call onBlur when event type is &quot;blur&quot;" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ToggletipLabel" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.264" tests="3">
    <testcase classname="ToggletipLabel Component API should support custom elements with the `as` prop" name="ToggletipLabel Component API should support custom elements with the `as` prop" time="0.006">
    </testcase>
    <testcase classname="ToggletipLabel Component API should support a custom class name with the `className` prop" name="ToggletipLabel Component API should support a custom class name with the `className` prop" time="0.001">
    </testcase>
    <testcase classname="ToggletipLabel Component API should forward extra props to the underlying element" name="ToggletipLabel Component API should forward extra props to the underlying element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.46" tests="8">
    <testcase classname="Tooltip should support a custom className with the `className` prop" name="Tooltip should support a custom className with the `className` prop" time="0.02">
    </testcase>
    <testcase classname="Tooltip should apply additional props to the outermost element" name="Tooltip should apply additional props to the outermost element" time="0.005">
    </testcase>
    <testcase classname="Tooltip should support initially showing the tooltip with `defaultOpen`" name="Tooltip should support initially showing the tooltip with `defaultOpen`" time="0.006">
    </testcase>
    <testcase classname="Tooltip should support labeling an element by its tooltip" name="Tooltip should support labeling an element by its tooltip" time="0.007">
    </testcase>
    <testcase classname="Tooltip should support describing an element by its tooltip" name="Tooltip should support describing an element by its tooltip" time="0.006">
    </testcase>
    <testcase classname="Tooltip should call onFocus" name="Tooltip should call onFocus" time="0.051">
    </testcase>
    <testcase classname="Tooltip should call onBlur" name="Tooltip should call onBlur" time="0.039">
    </testcase>
    <testcase classname="Tooltip should close when item is activated and `closeOnActivation`" name="Tooltip should close when item is activated and `closeOnActivation`" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="ToggletipContent" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.196" tests="1">
    <testcase classname="ToggletipContent Component API should support a custom class name with the `className` prop" name="ToggletipContent Component API should support a custom class name with the `className` prop" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ToggletipActions" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.186" tests="1">
    <testcase classname="ToggletipActions Component API should support a custom class name with the `className` prop" name="ToggletipActions Component API should support a custom class name with the `className` prop" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="DefinitionTooltip" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:27" time="0.68" tests="11">
    <testcase classname="DefinitionTooltip should display on click a definition provided via prop" name="DefinitionTooltip should display on click a definition provided via prop" time="0.079">
    </testcase>
    <testcase classname="DefinitionTooltip should have a visible tooltip if `defaultOpen` is set to true" name="DefinitionTooltip should have a visible tooltip if `defaultOpen` is set to true" time="0.044">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should open onKeyDown" name="DefinitionTooltip Component API should open onKeyDown" time="0.057">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should close when trigger is blurred" name="DefinitionTooltip Component API should close when trigger is blurred" time="0.028">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should close on unhover/mouseout when openOnHover is false" name="DefinitionTooltip Component API should close on unhover/mouseout when openOnHover is false" time="0.025">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should open on hover when openOnHover" name="DefinitionTooltip Component API should open on hover when openOnHover" time="0.052">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should not open on hover by default" name="DefinitionTooltip Component API should not open on hover by default" time="0.064">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should apply additional props to the underlying button element" name="DefinitionTooltip Component API should apply additional props to the underlying button element" time="0.006">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should support a custom className with the `className` prop" name="DefinitionTooltip Component API should support a custom className with the `className` prop" time="0.005">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should support a custom id for the tooltip" name="DefinitionTooltip Component API should support a custom id for the tooltip" time="0.008">
    </testcase>
    <testcase classname="DefinitionTooltip Component API should support a custom className for the tooltip trigger" name="DefinitionTooltip Component API should support a custom className for the tooltip trigger" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="ToggletipButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.251" tests="2">
    <testcase classname="ToggletipButton Component API should support a custom class name with the `className` prop" name="ToggletipButton Component API should support a custom class name with the `className` prop" time="0.011">
    </testcase>
    <testcase classname="ToggletipButton Component API should use the `label` prop as the label for the `ToggletipButton`" name="ToggletipButton Component API should use the `label` prop as the label for the `ToggletipButton`" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TileGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.926" tests="13">
    <testcase classname="TileGroup renders as expected - Component API should render `legend` in a &lt;legend&gt;" name="TileGroup renders as expected - Component API should render `legend` in a &lt;legend&gt;" time="0.021">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should render &lt;RadioTile&gt; as children" name="TileGroup renders as expected - Component API should render &lt;RadioTile&gt; as children" time="0.008">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should place required on every child &lt;RadioTile&gt;" name="TileGroup renders as expected - Component API should place required on every child &lt;RadioTile&gt;" time="0.002">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should override required on every child &lt;RadioTile&gt;" name="TileGroup renders as expected - Component API should override required on every child &lt;RadioTile&gt;" time="0.003">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should handle non-RadioTile (null) children" name="TileGroup renders as expected - Component API should handle non-RadioTile (null) children" time="0.106">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should support a custom `className` on the outermost element" name="TileGroup renders as expected - Component API should support a custom `className` on the outermost element" time="0.007">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should support passing in disabled to disable the &lt;fieldset&gt;" name="TileGroup renders as expected - Component API should support passing in disabled to disable the &lt;fieldset&gt;" time="0.003">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should support `defaultSelected` as a way to select a radio button" name="TileGroup renders as expected - Component API should support `defaultSelected` as a way to select a radio button" time="0.009">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should keep radio unselected if no `defaultSelected` is provided" name="TileGroup renders as expected - Component API should keep radio unselected if no `defaultSelected` is provided" time="0.165">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should support `valueSelected` as a way to select a radio button" name="TileGroup renders as expected - Component API should support `valueSelected` as a way to select a radio button" time="0.046">
    </testcase>
    <testcase classname="TileGroup renders as expected - Component API should set expected props on children" name="TileGroup renders as expected - Component API should set expected props on children" time="0.018">
    </testcase>
    <testcase classname="TileGroup behaves as expected should set `checked` on correct child when `onChange is called" name="TileGroup behaves as expected should set `checked` on correct child when `onChange is called" time="0.082">
    </testcase>
    <testcase classname="TileGroup Getting derived state from props should change the current selection upon change in props" name="TileGroup Getting derived state from props should change the current selection upon change in props" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="TextInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="0.788" tests="26">
    <testcase classname="TextInput renders as expected - Component API should spread extra props onto the input element" name="TextInput renders as expected - Component API should spread extra props onto the input element" time="0.03">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should support a custom `className` prop on the outermost element" name="TextInput renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect defaultValue prop" name="TextInput renders as expected - Component API should respect defaultValue prop" time="0.023">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect disabled prop" name="TextInput renders as expected - Component API should respect disabled prop" time="0.006">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect helperText prop" name="TextInput renders as expected - Component API should respect helperText prop" time="0.007">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect hideLabel prop" name="TextInput renders as expected - Component API should respect hideLabel prop" time="0.005">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect id prop" name="TextInput renders as expected - Component API should respect id prop" time="0.008">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect inline prop" name="TextInput renders as expected - Component API should respect inline prop" time="0.003">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect invalid prop" name="TextInput renders as expected - Component API should respect invalid prop" time="0.016">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect invalidText prop" name="TextInput renders as expected - Component API should respect invalidText prop" time="0.002">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect labelText prop" name="TextInput renders as expected - Component API should respect labelText prop" time="0.002">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect placeholder prop" name="TextInput renders as expected - Component API should respect placeholder prop" time="0.003">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect size prop" name="TextInput renders as expected - Component API should respect size prop" time="0.005">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect type prop" name="TextInput renders as expected - Component API should respect type prop" time="0.005">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect value prop" name="TextInput renders as expected - Component API should respect value prop" time="0.003">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect warn prop" name="TextInput renders as expected - Component API should respect warn prop" time="0.006">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect warnText prop" name="TextInput renders as expected - Component API should respect warnText prop" time="0.002">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect decorator prop" name="TextInput renders as expected - Component API should respect decorator prop" time="0.016">
    </testcase>
    <testcase classname="TextInput renders as expected - Component API should respect deprecated slug prop" name="TextInput renders as expected - Component API should respect deprecated slug prop" time="0.055">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should respect onChange prop" name="TextInput behaves as expected - Component API should respect onChange prop" time="0.042">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should respect onClick prop" name="TextInput behaves as expected - Component API should respect onClick prop" time="0.023">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="TextInput behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.058">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should respect readOnly prop" name="TextInput behaves as expected - Component API should respect readOnly prop" time="0.067">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should not render counter with only enableCounter prop passed in" name="TextInput behaves as expected - Component API should not render counter with only enableCounter prop passed in" time="0.008">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should not render counter with only maxCount prop passed in" name="TextInput behaves as expected - Component API should not render counter with only maxCount prop passed in" time="0.003">
    </testcase>
    <testcase classname="TextInput behaves as expected - Component API should have the expected classes for counter" name="TextInput behaves as expected - Component API should have the expected classes for counter" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="PasswordInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="1.049" tests="28">
    <testcase classname="PasswordInput renders as expected - Component API should spread extra props onto input element" name="PasswordInput renders as expected - Component API should spread extra props onto input element" time="0.055">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should support a custom `className` prop on the input element" name="PasswordInput renders as expected - Component API should support a custom `className` prop on the input element" time="0.008">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect defaultValue prop" name="PasswordInput renders as expected - Component API should respect defaultValue prop" time="0.003">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect disabled prop" name="PasswordInput renders as expected - Component API should respect disabled prop" time="0.007">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect helperText prop" name="PasswordInput renders as expected - Component API should respect helperText prop" time="0.006">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect hideLabel prop" name="PasswordInput renders as expected - Component API should respect hideLabel prop" time="0.06">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect hidePasswordLabel prop" name="PasswordInput renders as expected - Component API should respect hidePasswordLabel prop" time="0.082">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect id prop" name="PasswordInput renders as expected - Component API should respect id prop" time="0.004">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect inline prop" name="PasswordInput renders as expected - Component API should respect inline prop" time="0.009">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect invalid prop" name="PasswordInput renders as expected - Component API should respect invalid prop" time="0.033">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect invalidText prop" name="PasswordInput renders as expected - Component API should respect invalidText prop" time="0.007">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect labelText prop" name="PasswordInput renders as expected - Component API should respect labelText prop" time="0.005">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect placeholder prop" name="PasswordInput renders as expected - Component API should respect placeholder prop" time="0.015">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect showPasswordLabel prop" name="PasswordInput renders as expected - Component API should respect showPasswordLabel prop" time="0.005">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect size prop" name="PasswordInput renders as expected - Component API should respect size prop" time="0.008">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect type prop" name="PasswordInput renders as expected - Component API should respect type prop" time="0.005">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect value prop" name="PasswordInput renders as expected - Component API should respect value prop" time="0.038">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect warn prop" name="PasswordInput renders as expected - Component API should respect warn prop" time="0.019">
    </testcase>
    <testcase classname="PasswordInput renders as expected - Component API should respect warnText prop" name="PasswordInput renders as expected - Component API should respect warnText prop" time="0.012">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should call onChange when expected" name="PasswordInput behaves as expected should call onChange when expected" time="0.035">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should call onClick when expected" name="PasswordInput behaves as expected should call onClick when expected" time="0.053">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should call onTogglePasswordVisibility when visibility button is clicked" name="PasswordInput behaves as expected should call onTogglePasswordVisibility when visibility button is clicked" time="0.101">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="PasswordInput behaves as expected should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.047">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should not call `onChange` when the `&lt;input&gt;` is clicked but disabled" name="PasswordInput behaves as expected should not call `onChange` when the `&lt;input&gt;` is clicked but disabled" time="0.012">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should support a `ref` that is placed on the &lt;input&gt; element" name="PasswordInput behaves as expected should support a `ref` that is placed on the &lt;input&gt; element" time="0.009">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should render input as read-only when readOnly is true" name="PasswordInput behaves as expected should render input as read-only when readOnly is true" time="0.024">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should disable hide toggle button when readOnly is true" name="PasswordInput behaves as expected should disable hide toggle button when readOnly is true" time="0.027">
    </testcase>
    <testcase classname="PasswordInput behaves as expected should not allow input change when readOnly is true" name="PasswordInput behaves as expected should not allow input change when readOnly is true" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Toggletip" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:28" time="1.454" tests="46">
    <testcase classname="Toggletip accessibility should have no Axe violations" name="Toggletip accessibility should have no Axe violations" time="0.11">
    </testcase>
    <testcase classname="Toggletip should toggle visibility on click" name="Toggletip should toggle visibility on click" time="0.037">
    </testcase>
    <testcase classname="Toggletip should toggle visibility on Enter and Space" name="Toggletip should toggle visibility on Enter and Space" time="0.107">
    </testcase>
    <testcase classname="Toggletip should close on Escape" name="Toggletip should close on Escape" time="0.039">
    </testcase>
    <testcase classname="Toggletip should close if an element outside of the toggletip is clicked" name="Toggletip should close if an element outside of the toggletip is clicked" time="0.025">
    </testcase>
    <testcase classname="Toggletip should render with custom element using as prop" name="Toggletip should render with custom element using as prop" time="0.003">
    </testcase>
    <testcase classname="Toggletip Component API should support custom elements with the `as` prop" name="Toggletip Component API should support custom elements with the `as` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support a custom class name with the `className` prop" name="Toggletip Component API should support a custom class name with the `className` prop" time="0.012">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.003">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.019">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.012">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.003">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.002">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.002">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should support different alignments with the `align` prop" name="Toggletip Component API should support different alignments with the `align` prop" time="0.001">
    </testcase>
    <testcase classname="Toggletip Component API should initially be open if `defaultOpen` is set to true" name="Toggletip Component API should initially be open if `defaultOpen` is set to true" time="0.002">
    </testcase>
    <testcase classname="Toggletip Component API should close when the browser window loses focus" name="Toggletip Component API should close when the browser window loses focus" time="0.027">
    </testcase>
    <testcase classname="Toggletip Component API should return to the trigger button if the menu is closed while focus is still inside the menu" name="Toggletip Component API should return to the trigger button if the menu is closed while focus is still inside the menu" time="0.041">
    </testcase>
    <testcase classname="Toggletip Component API should not close when the menu itself is clicked" name="Toggletip Component API should not close when the menu itself is clicked" time="0.017">
    </testcase>
    <testcase classname="Toggletip Component API should be closed when the focus leaves the tooltip" name="Toggletip Component API should be closed when the focus leaves the tooltip" time="0.005">
    </testcase>
    <testcase classname="Toggletip Component API autoAlign should render without errors when composed with ToggletipButton, ToggletipContent, ToggletipActions" name="Toggletip Component API autoAlign should render without errors when composed with ToggletipButton, ToggletipContent, ToggletipActions" time="0.092">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipLabel should render with custom element using as prop" name="Toggletip Component API ToggletipLabel should render with custom element using as prop" time="0.033">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipButton should render custom component with onClick handler" name="Toggletip Component API ToggletipButton should render custom component with onClick handler" time="0.017">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipButton should use default label when not provided" name="Toggletip Component API ToggletipButton should use default label when not provided" time="0.007">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipContent should render with custom className" name="Toggletip Component API ToggletipContent should render with custom className" time="0.004">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipContent should have correct aria attributes" name="Toggletip Component API ToggletipContent should have correct aria attributes" time="0.014">
    </testcase>
    <testcase classname="Toggletip Component API ToggletipActions should render with custom className" name="Toggletip Component API ToggletipActions should render with custom className" time="0.003">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Keyboard Navigation should handle Tab navigation correctly" name="Toggletip Component API Toggletip Keyboard Navigation should handle Tab navigation correctly" time="0.023">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Keyboard Navigation should close on blur when focus moves outside" name="Toggletip Component API Toggletip Keyboard Navigation should close on blur when focus moves outside" time="0.016">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Focus Management should return focus to trigger button when closing with Escape" name="Toggletip Component API Toggletip Focus Management should return focus to trigger button when closing with Escape" time="0.013">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle left-start alignment correctly" name="Toggletip Component API Toggletip Alignment should handle left-start alignment correctly" time="0.007">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle left-end alignment correctly" name="Toggletip Component API Toggletip Alignment should handle left-end alignment correctly" time="0.004">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle right-start alignment correctly" name="Toggletip Component API Toggletip Alignment should handle right-start alignment correctly" time="0.071">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle right-end alignment correctly" name="Toggletip Component API Toggletip Alignment should handle right-end alignment correctly" time="0.002">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle top-start alignment correctly" name="Toggletip Component API Toggletip Alignment should handle top-start alignment correctly" time="0.004">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle top-end alignment correctly" name="Toggletip Component API Toggletip Alignment should handle top-end alignment correctly" time="0.009">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle bottom-start alignment correctly" name="Toggletip Component API Toggletip Alignment should handle bottom-start alignment correctly" time="0.003">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Alignment should handle bottom-end alignment correctly" name="Toggletip Component API Toggletip Alignment should handle bottom-end alignment correctly" time="0.005">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Closing Behavior should not close when clicking inside the toggletip during auto-alignment" name="Toggletip Component API Toggletip Closing Behavior should not close when clicking inside the toggletip during auto-alignment" time="0.194">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Closing Behavior should close when focus moves outside the toggletip" name="Toggletip Component API Toggletip Closing Behavior should close when focus moves outside the toggletip" time="0.032">
    </testcase>
    <testcase classname="Toggletip Component API Toggletip Closing Behavior should not close when open and relatedTarget is null" name="Toggletip Component API Toggletip Closing Behavior should not close when open and relatedTarget is null" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="ControlledPasswordInput Component" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:29" time="0.489" tests="13">
    <testcase classname="ControlledPasswordInput Component renders the component properly" name="ControlledPasswordInput Component renders the component properly" time="0.022">
    </testcase>
    <testcase classname="ControlledPasswordInput Component renders the component with initial type as password" name="ControlledPasswordInput Component renders the component with initial type as password" time="0.004">
    </testcase>
    <testcase classname="ControlledPasswordInput Component allows user to enter text into the input field" name="ControlledPasswordInput Component allows user to enter text into the input field" time="0.005">
    </testcase>
    <testcase classname="ControlledPasswordInput Component calls onChange handler when value changes" name="ControlledPasswordInput Component calls onChange handler when value changes" time="0.002">
    </testcase>
    <testcase classname="ControlledPasswordInput Component calls onBlur handler when input loses focus" name="ControlledPasswordInput Component calls onBlur handler when input loses focus" time="0.004">
    </testcase>
    <testcase classname="ControlledPasswordInput Component has a button with accessible role and label" name="ControlledPasswordInput Component has a button with accessible role and label" time="0.068">
    </testcase>
    <testcase classname="ControlledPasswordInput Component renders controlled input with value from props" name="ControlledPasswordInput Component renders controlled input with value from props" time="0.006">
    </testcase>
    <testcase classname="ControlledPasswordInput Component does not toggle visibility when disabled" name="ControlledPasswordInput Component does not toggle visibility when disabled" time="0.038">
    </testcase>
    <testcase classname="ControlledPasswordInput Component handles input without value prop (uncontrolled)" name="ControlledPasswordInput Component handles input without value prop (uncontrolled)" time="0.002">
    </testcase>
    <testcase classname="ControlledPasswordInput Component associates the label with the input field" name="ControlledPasswordInput Component associates the label with the input field" time="0.002">
    </testcase>
    <testcase classname="ControlledPasswordInput Component calls onFocus handler when input gains focus" name="ControlledPasswordInput Component calls onFocus handler when input gains focus" time="0.003">
    </testcase>
    <testcase classname="ControlledPasswordInput Component renders correctly without show/hide password labels" name="ControlledPasswordInput Component renders correctly without show/hide password labels" time="0.005">
    </testcase>
    <testcase classname="ControlledPasswordInput Component does not call onChange when input is disabled" name="ControlledPasswordInput Component does not call onChange when input is disabled" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="TextArea" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:29" time="1.03" tests="29">
    <testcase classname="TextArea renders as expected - Component API should spread extra props onto the text area element" name="TextArea renders as expected - Component API should spread extra props onto the text area element" time="0.016">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect defaultValue prop" name="TextArea renders as expected - Component API should respect defaultValue prop" time="0.006">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect disabled prop" name="TextArea renders as expected - Component API should respect disabled prop" time="0.013">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect helperText prop" name="TextArea renders as expected - Component API should respect helperText prop" time="0.005">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect hideLabel prop" name="TextArea renders as expected - Component API should respect hideLabel prop" time="0.003">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect id prop" name="TextArea renders as expected - Component API should respect id prop" time="0.017">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect invalid prop" name="TextArea renders as expected - Component API should respect invalid prop" time="0.041">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect invalidText prop" name="TextArea renders as expected - Component API should respect invalidText prop" time="0.005">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect labelText prop" name="TextArea renders as expected - Component API should respect labelText prop" time="0.004">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect placeholder prop" name="TextArea renders as expected - Component API should respect placeholder prop" time="0.004">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect value prop" name="TextArea renders as expected - Component API should respect value prop" time="0.001">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect warn prop" name="TextArea renders as expected - Component API should respect warn prop" time="0.093">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect warnText prop" name="TextArea renders as expected - Component API should respect warnText prop" time="0.002">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect rows prop" name="TextArea renders as expected - Component API should respect rows prop" time="0.006">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect enableCounter and maxCount prop" name="TextArea renders as expected - Component API should respect enableCounter and maxCount prop" time="0.013">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect decorator prop" name="TextArea renders as expected - Component API should respect decorator prop" time="0.053">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect deprecated slug prop" name="TextArea renders as expected - Component API should respect deprecated slug prop" time="0.008">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should respect onChange prop" name="TextArea renders as expected - Component API behaves as expected - Component API should respect onChange prop" time="0.04">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should respect onClick prop" name="TextArea renders as expected - Component API behaves as expected - Component API should respect onClick prop" time="0.033">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="TextArea renders as expected - Component API behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.017">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should respect readOnly prop" name="TextArea renders as expected - Component API behaves as expected - Component API should respect readOnly prop" time="0.066">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should not render counter with only enableCounter prop passed in" name="TextArea renders as expected - Component API behaves as expected - Component API should not render counter with only enableCounter prop passed in" time="0.003">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should not render counter with only maxCount prop passed in" name="TextArea renders as expected - Component API behaves as expected - Component API should not render counter with only maxCount prop passed in" time="0.003">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API behaves as expected - Component API should have the expected classes for counter" name="TextArea renders as expected - Component API behaves as expected - Component API should have the expected classes for counter" time="0.009">
    </testcase>
    <testcase classname="TextArea word counter behaves as expected should correctly increase word count" name="TextArea word counter behaves as expected should correctly increase word count" time="0.083">
    </testcase>
    <testcase classname="TextArea word counter behaves as expected should correctly decrease word count" name="TextArea word counter behaves as expected should correctly decrease word count" time="0.017">
    </testcase>
    <testcase classname="TextArea word counter behaves as expected should not trim words when enableCounter is disabled and then enabled" name="TextArea word counter behaves as expected should not trim words when enableCounter is disabled and then enabled" time="0.022">
    </testcase>
    <testcase classname="TextArea word counter behaves as expected should trim words when text larger than max limit is pasted" name="TextArea word counter behaves as expected should trim words when text larger than max limit is pasted" time="0.012">
    </testcase>
    <testcase classname="TextArea word counter behaves as expected should trim words when text larger than max limit is pasted and there is text already present" name="TextArea word counter behaves as expected should trim words when text larger than max limit is pasted and there is text already present" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="IconSwitch" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:29" time="0.743" tests="8">
    <testcase classname="IconSwitch renders as expected - Component API should spread extra props into `IconButton`" name="IconSwitch renders as expected - Component API should spread extra props into `IconButton`" time="0.035">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should support a custom `className` prop on the button element" name="IconSwitch renders as expected - Component API should support a custom `className` prop on the button element" time="0.009">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should respect disabled prop" name="IconSwitch renders as expected - Component API should respect disabled prop" time="0.028">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should call onClick when expected" name="IconSwitch renders as expected - Component API should call onClick when expected" time="0.041">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should call onKeyDown when expected" name="IconSwitch renders as expected - Component API should call onKeyDown when expected" time="0.052">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should respect selected prop" name="IconSwitch renders as expected - Component API should respect selected prop" time="0.022">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should respect text prop" name="IconSwitch renders as expected - Component API should respect text prop" time="0.006">
    </testcase>
    <testcase classname="IconSwitch renders as expected - Component API should respect align prop" name="IconSwitch renders as expected - Component API should respect align prop" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Stack" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:30" time="0.327" tests="6">
    <testcase classname="Stack should support alternate element types with the `as` prop" name="Stack should support alternate element types with the `as` prop" time="0.01">
    </testcase>
    <testcase classname="Stack should support a custom className with the `className` prop" name="Stack should support a custom className with the `className` prop" time="0.041">
    </testcase>
    <testcase classname="Stack should apply additional props to the outermost element" name="Stack should apply additional props to the outermost element" time="0.005">
    </testcase>
    <testcase classname="Stack should forward the given ref to the outermost element" name="Stack should forward the given ref to the outermost element" time="0.003">
    </testcase>
    <testcase classname="Stack HStack should forward the given ref to the outermost element" name="Stack HStack should forward the given ref to the outermost element" time="0.003">
    </testcase>
    <testcase classname="Stack VStack should forward the given ref to the outermost element" name="Stack VStack should forward the given ref to the outermost element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ProgressIndicatorSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:30" time="0.148" tests="3">
    <testcase classname="ProgressIndicatorSkeleton renders correctly with default properties" name="ProgressIndicatorSkeleton renders correctly with default properties" time="0.007">
    </testcase>
    <testcase classname="ProgressIndicatorSkeleton renders vertically when vertical prop is true" name="ProgressIndicatorSkeleton renders vertically when vertical prop is true" time="0.003">
    </testcase>
    <testcase classname="ProgressIndicatorSkeleton applies custom className when provided" name="ProgressIndicatorSkeleton applies custom className when provided" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ProgressIndicator" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:31" time="0.358" tests="18">
    <testcase classname="ProgressIndicator renders as expected - Component API should spread extra props onto outermost element" name="ProgressIndicator renders as expected - Component API should spread extra props onto outermost element" time="0.01">
    </testcase>
    <testcase classname="ProgressIndicator renders as expected - Component API should support a custom `className` prop on the outermost element" name="ProgressIndicator renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="ProgressIndicator renders as expected - Component API should respect currentIndex prop" name="ProgressIndicator renders as expected - Component API should respect currentIndex prop" time="0.013">
    </testcase>
    <testcase classname="ProgressIndicator renders as expected - Component API should call onChange when expected" name="ProgressIndicator renders as expected - Component API should call onChange when expected" time="0.023">
    </testcase>
    <testcase classname="ProgressIndicator renders as expected - Component API should respect spaceEqually prop" name="ProgressIndicator renders as expected - Component API should respect spaceEqually prop" time="0.009">
    </testcase>
    <testcase classname="ProgressIndicator renders as expected - Component API should respect vertical prop" name="ProgressIndicator renders as expected - Component API should respect vertical prop" time="0.006">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should spread extra props onto outermost element" name="ProgressStep renders as expected - Component API should spread extra props onto outermost element" time="0.002">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should support a custom `className` prop on the outermost element" name="ProgressStep renders as expected - Component API should support a custom `className` prop on the outermost element" time="0">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect complete prop" name="ProgressStep renders as expected - Component API should respect complete prop" time="0.01">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect current prop" name="ProgressStep renders as expected - Component API should respect current prop" time="0.017">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect description prop" name="ProgressStep renders as expected - Component API should respect description prop" time="0.002">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect disabled prop" name="ProgressStep renders as expected - Component API should respect disabled prop" time="0.018">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect index prop" name="ProgressStep renders as expected - Component API should respect index prop" time="0.003">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect invalid prop" name="ProgressStep renders as expected - Component API should respect invalid prop" time="0.002">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect label prop" name="ProgressStep renders as expected - Component API should respect label prop" time="0.003">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should call onClick when expected" name="ProgressStep renders as expected - Component API should call onClick when expected" time="0.028">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect secondaryLabel prop" name="ProgressStep renders as expected - Component API should respect secondaryLabel prop" time="0.002">
    </testcase>
    <testcase classname="ProgressStep renders as expected - Component API should respect translateWithId prop" name="ProgressStep renders as expected - Component API should respect translateWithId prop" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="StructuredList" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:30" time="1.656" tests="35">
    <testcase classname="StructuredList StructuredListWrapper should spread extra props onto outermost element" name="StructuredList StructuredListWrapper should spread extra props onto outermost element" time="0.019">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should have the expected classes" name="StructuredList StructuredListWrapper should have the expected classes" time="0.026">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should add extra classes that are passed via classname" name="StructuredList StructuredListWrapper should add extra classes that are passed via classname" time="0.007">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should default selection prop as false" name="StructuredList StructuredListWrapper should default selection prop as false" time="0.009">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should add the modifier class for selection when selection prop is true" name="StructuredList StructuredListWrapper should add the modifier class for selection when selection prop is true" time="0.008">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should add the modifier class for condensed when isCondensed prop is true" name="StructuredList StructuredListWrapper should add the modifier class for condensed when isCondensed prop is true" time="0.004">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should add the modifier class for flush when isFlush prop is true" name="StructuredList StructuredListWrapper should add the modifier class for flush when isFlush prop is true" time="0.006">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should allow a custom aria label to be passed in" name="StructuredList StructuredListWrapper should allow a custom aria label to be passed in" time="0.004">
    </testcase>
    <testcase classname="StructuredList StructuredListWrapper should check that children are rendered" name="StructuredList StructuredListWrapper should check that children are rendered" time="0.018">
    </testcase>
    <testcase classname="StructuredList StructuredListHeader should have the expected classes" name="StructuredList StructuredListHeader should have the expected classes" time="0.024">
    </testcase>
    <testcase classname="StructuredList StructuredListHeader should add extra classes that are passed via className" name="StructuredList StructuredListHeader should add extra classes that are passed via className" time="0.009">
    </testcase>
    <testcase classname="StructuredList StructuredListHeader should check that children are rendered" name="StructuredList StructuredListHeader should check that children are rendered" time="0.008">
    </testcase>
    <testcase classname="StructuredList StructuredListHeader should accept rest props" name="StructuredList StructuredListHeader should accept rest props" time="0.002">
    </testcase>
    <testcase classname="StructuredList StructuredListRow should check that children are rendered" name="StructuredList StructuredListRow should check that children are rendered" time="0.009">
    </testcase>
    <testcase classname="StructuredList StructuredListRow should add extra class that are passed via className" name="StructuredList StructuredListRow should add extra class that are passed via className" time="0.012">
    </testcase>
    <testcase classname="StructuredList StructuredListRow should check that a row is specified as a header row" name="StructuredList StructuredListRow should check that a row is specified as a header row" time="0.006">
    </testcase>
    <testcase classname="StructuredList StructuredListRow should add an onKeyDown handler" name="StructuredList StructuredListRow should add an onKeyDown handler" time="0.06">
    </testcase>
    <testcase classname="StructuredList StructuredListRow should be able to click on a selected row" name="StructuredList StructuredListRow should be able to click on a selected row" time="0.027">
    </testcase>
    <testcase classname="StructuredList StructuredListBody should check that children are rendered" name="StructuredList StructuredListBody should check that children are rendered" time="0.004">
    </testcase>
    <testcase classname="StructuredList StructuredListBody should add extra classes that are passed via className" name="StructuredList StructuredListBody should add extra classes that are passed via className" time="0.009">
    </testcase>
    <testcase classname="StructuredList StructuredListBody should have the expected classes" name="StructuredList StructuredListBody should have the expected classes" time="0.003">
    </testcase>
    <testcase classname="StructuredList StructuredListBody should add an onKeyDown handler" name="StructuredList StructuredListBody should add an onKeyDown handler" time="0.052">
    </testcase>
    <testcase classname="StructuredList StructuredListBody should accept rest props" name="StructuredList StructuredListBody should accept rest props" time="0.007">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should have the expected classes" name="StructuredList StructuredListInput should have the expected classes" time="0.012">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should render the input with custom title attribute and add additional classes via className" name="StructuredList StructuredListInput should render the input with custom title attribute and add additional classes via className" time="0.012">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should accept an id" name="StructuredList StructuredListInput should accept an id" time="0.05">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should add a custom name attribute to the input element" name="StructuredList StructuredListInput should add a custom name attribute to the input element" time="0.011">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should render unique id with multiple inputs when no id prop is given" name="StructuredList StructuredListInput should render unique id with multiple inputs when no id prop is given" time="0.01">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should accept rest props" name="StructuredList StructuredListInput should accept rest props" time="0.012">
    </testcase>
    <testcase classname="StructuredList StructuredListInput should call onChange on change" name="StructuredList StructuredListInput should call onChange on change" time="0.057">
    </testcase>
    <testcase classname="StructuredList StructuredListCell should add extra classes that are passed via className" name="StructuredList StructuredListCell should add extra classes that are passed via className" time="0.019">
    </testcase>
    <testcase classname="StructuredList StructuredListCell should have the expected classes" name="StructuredList StructuredListCell should have the expected classes" time="0.029">
    </testcase>
    <testcase classname="StructuredList StructuredListCell should use correct class when head prop is true" name="StructuredList StructuredListCell should use correct class when head prop is true" time="0.024">
    </testcase>
    <testcase classname="StructuredList StructuredListCell should use correct class when noWrap prop is true" name="StructuredList StructuredListCell should use correct class when noWrap prop is true" time="0.014">
    </testcase>
    <testcase classname="StructuredList StructuredListCell should accept rest props" name="StructuredList StructuredListCell should accept rest props" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ShapeIndicator" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:31" time="0.268" tests="5">
    <testcase classname="ShapeIndicator should use a custom label" name="ShapeIndicator should use a custom label" time="0.005">
    </testcase>
    <testcase classname="ShapeIndicator should update with textSize prop" name="ShapeIndicator should update with textSize prop" time="0.006">
    </testcase>
    <testcase classname="ShapeIndicator should update with kind prop" name="ShapeIndicator should update with kind prop" time="0.002">
    </testcase>
    <testcase classname="ShapeIndicator should support a custom class name on the outermost element" name="ShapeIndicator should support a custom class name on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ShapeIndicator should support a ref on the outermost element" name="ShapeIndicator should support a ref on the outermost element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Tabs" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:29" time="1.997" tests="39">
    <testcase classname="Tabs should update selected index based on the default provided" name="Tabs should update selected index based on the default provided" time="0.034">
    </testcase>
    <testcase classname="Tabs should set a className from props on outermost element in TabList" name="Tabs should set a className from props on outermost element in TabList" time="0.035">
    </testcase>
    <testcase classname="Tabs should not render conditionally excluded tabs and panels" name="Tabs should not render conditionally excluded tabs and panels" time="0.007">
    </testcase>
    <testcase classname="Tab should set a className from props on outermost element in Tab" name="Tab should set a className from props on outermost element in Tab" time="0.026">
    </testcase>
    <testcase classname="Tab should not select a disabled tab and select next tab" name="Tab should not select a disabled tab and select next tab" time="0.01">
    </testcase>
    <testcase classname="Tab should provide a custom element to render instead of default button if provided" name="Tab should provide a custom element to render instead of default button if provided" time="0.056">
    </testcase>
    <testcase classname="Tab should render secondaryLabel in contained tabs if provided" name="Tab should render secondaryLabel in contained tabs if provided" time="0.011">
    </testcase>
    <testcase classname="Tab should not render secondaryLabel in non-contained tabs" name="Tab should not render secondaryLabel in non-contained tabs" time="0.015">
    </testcase>
    <testcase classname="Tab should display an icon from renderIcon prop" name="Tab should display an icon from renderIcon prop" time="0.005">
    </testcase>
    <testcase classname="Tab should render badge indicator when badgeIndicator prop is true" name="Tab should render badge indicator when badgeIndicator prop is true" time="0.021">
    </testcase>
    <testcase classname="Tab should call onClick from props if provided" name="Tab should call onClick from props if provided" time="0.07">
    </testcase>
    <testcase classname="Tab should call onKeyDown from props if provided" name="Tab should call onKeyDown from props if provided" time="0.09">
    </testcase>
    <testcase classname="Tab should go to the next tab using arrow keys" name="Tab should go to the next tab using arrow keys" time="0.342">
    </testcase>
    <testcase classname="Tab should go to the next tab with manual activation" name="Tab should go to the next tab with manual activation" time="0.036">
    </testcase>
    <testcase classname="Tab should reset focus to the active tab on blur in manual activation" name="Tab should reset focus to the active tab on blur in manual activation" time="0.08">
    </testcase>
    <testcase classname="Tab should render close icon if dismissable" name="Tab should render close icon if dismissable" time="0.026">
    </testcase>
    <testcase classname="Tab should ignore hover on dismissable icon if it is a contained tab" name="Tab should ignore hover on dismissable icon if it is a contained tab" time="0.091">
    </testcase>
    <testcase classname="Tab should not render close icon if not dismissable" name="Tab should not render close icon if not dismissable" time="0.004">
    </testcase>
    <testcase classname="Tab should call onCloseTabRequest when dismissable and close icon clicked" name="Tab should call onCloseTabRequest when dismissable and close icon clicked" time="0.033">
    </testcase>
    <testcase classname="Tab should not call onTabCloseRequest when dismissable and close icon clicked but tab disabled" name="Tab should not call onTabCloseRequest when dismissable and close icon clicked but tab disabled" time="0.073">
    </testcase>
    <testcase classname="Tab should call onCloseTabRequest when dismissable and delete pressed on focused tab" name="Tab should call onCloseTabRequest when dismissable and delete pressed on focused tab" time="0.015">
    </testcase>
    <testcase classname="Tab should not call onCloseTabRequest when dismissable and delete pressed on focused disabled tab" name="Tab should not call onCloseTabRequest when dismissable and delete pressed on focused disabled tab" time="0.02">
    </testcase>
    <testcase classname="Tab should throw error when dismissable and onTabCloseRequest prop not supplied" name="Tab should throw error when dismissable and onTabCloseRequest prop not supplied" time="0.044">
    </testcase>
    <testcase classname="Tab should render close icon when dismissable" name="Tab should render close icon when dismissable" time="0.007">
    </testcase>
    <testcase classname="Tab should render close icon and renderIcon when dismissable and icon supplied" name="Tab should render close icon and renderIcon when dismissable and icon supplied" time="0.01">
    </testcase>
    <testcase classname="TabsVertical should render as horizontal tab in sm breakpoint" name="TabsVertical should render as horizontal tab in sm breakpoint" time="0.006">
    </testcase>
    <testcase classname="TabsVertical should go to the next tab using arrow keys" name="TabsVertical should go to the next tab using arrow keys" time="0.08">
    </testcase>
    <testcase classname="TabsVertical should go to the next tab with manual activation" name="TabsVertical should go to the next tab with manual activation" time="0.023">
    </testcase>
    <testcase classname="TabsVertical should not select a disabled tab and select next tab" name="TabsVertical should not select a disabled tab and select next tab" time="0.01">
    </testcase>
    <testcase classname="TabPanel should have a className if provided by props" name="TabPanel should have a className if provided by props" time="0.006">
    </testcase>
    <testcase classname="TabPanel should receive focus if there is no interactive content" name="TabPanel should receive focus if there is no interactive content" time="0.012">
    </testcase>
    <testcase classname="TabPanel should not receive focus if there is interactive content" name="TabPanel should not receive focus if there is interactive content" time="0.003">
    </testcase>
    <testcase classname="TabPanel should update focus appropriately if tab panel content changes" name="TabPanel should update focus appropriately if tab panel content changes" time="0.012">
    </testcase>
    <testcase classname="TabList should span fullWidth if lg and fullWidth prop is passed in" name="TabList should span fullWidth if lg and fullWidth prop is passed in" time="0.004">
    </testcase>
    <testcase classname="TabList should ignore fullWidth prop if screen smaller than lg" name="TabList should ignore fullWidth prop if screen smaller than lg" time="0.006">
    </testcase>
    <testcase classname="TabList should ignore fullWidth prop if tabs are not contained" name="TabList should ignore fullWidth prop if tabs are not contained" time="0.003">
    </testcase>
    <testcase classname="TabList should not be fullWidth in default state" name="TabList should not be fullWidth in default state" time="0.002">
    </testcase>
    <testcase classname="TabListVertical should render TabList if screen smaller than md" name="TabListVertical should render TabList if screen smaller than md" time="0.014">
    </testcase>
    <testcase classname="TabListVertical should have set height" name="TabListVertical should have set height" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="RadioButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:31" time="0.315" tests="14">
    <testcase classname="RadioButton should render an input with type=&quot;radio&quot;" name="RadioButton should render an input with type=&quot;radio&quot;" time="0.017">
    </testcase>
    <testcase classname="RadioButton should set an id on the &lt;input&gt; by default" name="RadioButton should set an id on the &lt;input&gt; by default" time="0.03">
    </testcase>
    <testcase classname="RadioButton should set checked on the &lt;input&gt; when checked is provided" name="RadioButton should set checked on the &lt;input&gt; when checked is provided" time="0.005">
    </testcase>
    <testcase classname="RadioButton should label the &lt;input&gt; with labelText" name="RadioButton should label the &lt;input&gt; with labelText" time="0.007">
    </testcase>
    <testcase classname="RadioButton should set defaultChecked as expected" name="RadioButton should set defaultChecked as expected" time="0.007">
    </testcase>
    <testcase classname="RadioButton should set id on the &lt;input&gt; if one is passed in" name="RadioButton should set id on the &lt;input&gt; if one is passed in" time="0.047">
    </testcase>
    <testcase classname="RadioButton should invoke onChange with expected arguments" name="RadioButton should invoke onChange with expected arguments" time="0.017">
    </testcase>
    <testcase classname="RadioButton should place className on the outermost element" name="RadioButton should place className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="RadioButton should spread additional props on the &lt;input&gt; element" name="RadioButton should spread additional props on the &lt;input&gt; element" time="0.002">
    </testcase>
    <testcase classname="RadioButton should support a `ref` on the &lt;input&gt; element" name="RadioButton should support a `ref` on the &lt;input&gt; element" time="0.002">
    </testcase>
    <testcase classname="RadioButton should respect decorator prop" name="RadioButton should respect decorator prop" time="0.003">
    </testcase>
    <testcase classname="RadioButton should update AILabel size" name="RadioButton should update AILabel size" time="0.003">
    </testcase>
    <testcase classname="RadioButton should respect the deprecated slug prop" name="RadioButton should respect the deprecated slug prop" time="0.002">
    </testcase>
    <testcase classname="RadioButton should set the &quot;required&quot; attribute on the &lt;input&gt; by default" name="RadioButton should set the &quot;required&quot; attribute on the &lt;input&gt; by default" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Popover" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:31" time="0.425" tests="20">
    <testcase classname="Popover should support a ref on the outermost element" name="Popover should support a ref on the outermost element" time="0.017">
    </testcase>
    <testcase classname="Popover should support custom rendering with the `as` prop" name="Popover should support custom rendering with the `as` prop" time="0.002">
    </testcase>
    <testcase classname="Popover should support a custom class name on the outermost element" name="Popover should support a custom class name on the outermost element" time="0.011">
    </testcase>
    <testcase classname="Popover should forward additional props on the outermost element" name="Popover should forward additional props on the outermost element" time="0.001">
    </testcase>
    <testcase classname="Popover PopoverContent should support a ref on the popover-content element" name="Popover PopoverContent should support a ref on the popover-content element" time="0.005">
    </testcase>
    <testcase classname="Popover PopoverContent should support a custom class name on the popover content" name="Popover PopoverContent should support a custom class name on the popover content" time="0.002">
    </testcase>
    <testcase classname="Popover PopoverContent should have default caret height" name="Popover PopoverContent should have default caret height" time="0.135">
    </testcase>
    <testcase classname="Popover PopoverContent should change caret height in case of ai-label" name="Popover PopoverContent should change caret height in case of ai-label" time="0.051">
    </testcase>
    <testcase classname="Popover PopoverContent should forward additional props on the outermost element" name="Popover PopoverContent should forward additional props on the outermost element" time="0">
    </testcase>
    <testcase classname="Popover PopoverContent should respect isTabTip prop" name="Popover PopoverContent should respect isTabTip prop" time="0.002">
    </testcase>
    <testcase classname="Popover PopoverContent should not allow other alignments than bottom-start or bottom-end when isTabTip is present" name="Popover PopoverContent should not allow other alignments than bottom-start or bottom-end when isTabTip is present" time="0.002">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop top-left to top-start" name="Popover PopoverContent should shim legacy align prop top-left to top-start" time="0.011">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop top-right to top-end" name="Popover PopoverContent should shim legacy align prop top-right to top-end" time="0.002">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop bottom-left to bottom-start" name="Popover PopoverContent should shim legacy align prop bottom-left to bottom-start" time="0.003">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop bottom-right to bottom-end" name="Popover PopoverContent should shim legacy align prop bottom-right to bottom-end" time="0.003">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop left-bottom to left-end" name="Popover PopoverContent should shim legacy align prop left-bottom to left-end" time="0.003">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop left-top to left-start" name="Popover PopoverContent should shim legacy align prop left-top to left-start" time="0.001">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop right-bottom to right-end" name="Popover PopoverContent should shim legacy align prop right-bottom to right-end" time="0.002">
    </testcase>
    <testcase classname="Popover PopoverContent should shim legacy align prop right-top to right-start" name="Popover PopoverContent should shim legacy align prop right-top to right-start" time="0.001">
    </testcase>
    <testcase classname="Popover PopoverContent should call onRequestClose when click happens outside the popover" name="Popover PopoverContent should call onRequestClose when click happens outside the popover" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="Slider" errors="0" failures="0" skipped="1" timestamp="2025-04-09T19:51:30" time="2.353" tests="66">
    <testcase classname="Slider behaves as expected - Component API should render children as expected" name="Slider behaves as expected - Component API should render children as expected" time="0.08">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should apply the expected classes" name="Slider behaves as expected - Component API should apply the expected classes" time="0.013">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should render extra classes passed in via className" name="Slider behaves as expected - Component API should render extra classes passed in via className" time="0.002">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should be able to apply a disabled state" name="Slider behaves as expected - Component API should be able to apply a disabled state" time="0.014">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should be able to apply a warning state" name="Slider behaves as expected - Component API should be able to apply a warning state" time="0.011">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should be able to apply an invalid state" name="Slider behaves as expected - Component API should be able to apply an invalid state" time="0.009">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should be able to set value via props" name="Slider behaves as expected - Component API should be able to set value via props" time="0.005">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should change the value upon interacting with the slider" name="Slider behaves as expected - Component API should change the value upon interacting with the slider" time="0.044">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should accurately position slider on mount" name="Slider behaves as expected - Component API should accurately position slider on mount" time="0.003">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API marks input field as hidden if hidden via props" name="Slider behaves as expected - Component API marks input field as hidden if hidden via props" time="0.008">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API allows user to set invalid value when typing in input field" name="Slider behaves as expected - Component API allows user to set invalid value when typing in input field" time="0.06">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API sets correct state when typing a valid value in input field" name="Slider behaves as expected - Component API sets correct state when typing a valid value in input field" time="0.037">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should check for auto-correct on the input" name="Slider behaves as expected - Component API should check for auto-correct on the input" time="0.066">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should apply the given id to the element with role of slider" name="Slider behaves as expected - Component API should apply the given id to the element with role of slider" time="0.003">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should apply a custom input type" name="Slider behaves as expected - Component API should apply a custom input type" time="0.003">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should apply a custom input name" name="Slider behaves as expected - Component API should apply a custom input name" time="0.004">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should mark an empty input as invalid when using the required prop" name="Slider behaves as expected - Component API should mark an empty input as invalid when using the required prop" time="0.049">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API should respect readOnly prop" name="Slider behaves as expected - Component API should respect readOnly prop" time="0.101">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers handles non-number typed into input field" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers handles non-number typed into input field" time="0.057">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to _onDrag" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to _onDrag" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to onChange" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to onChange" time="0.055">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onBlur as expected" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onBlur as expected" time="0.049">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onKeyDown as expected" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onKeyDown as expected" time="0.057">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onKeyDown and properly handle the stepMultiplier prop" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should call onKeyDown and properly handle the stepMultiplier prop" time="0.038">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should gracefully handle non-numeric keys" name="Slider behaves as expected - Component API Error handling, expected behavior from event handlers should gracefully handle non-numeric keys" time="0.042">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Disabled state should do nothing when trying to type in the input" name="Slider behaves as expected - Component API Disabled state should do nothing when trying to type in the input" time="0.016">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Disabled state should do nothing when trying to drag" name="Slider behaves as expected - Component API Disabled state should do nothing when trying to drag" time="0.01">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Disabled state should not change slider value when using arrow key" name="Slider behaves as expected - Component API Disabled state should not change slider value when using arrow key" time="0.045">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Supporting label concatenates the value and the label by default" name="Slider behaves as expected - Component API Supporting label concatenates the value and the label by default" time="0.004">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Supporting label supports custom formatting of the label" name="Slider behaves as expected - Component API Supporting label supports custom formatting of the label" time="0.006">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Supporting label supports custom formatting on the tooltip when input is hidden" name="Slider behaves as expected - Component API Supporting label supports custom formatting on the tooltip when input is hidden" time="0.004">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Key/mouse event processing sets correct state from event with arrow keys" name="Slider behaves as expected - Component API Key/mouse event processing sets correct state from event with arrow keys" time="0.123">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Key/mouse event processing sets correct state from event with a clientX in a mousemove" name="Slider behaves as expected - Component API Key/mouse event processing sets correct state from event with a clientX in a mousemove" time="0.02">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Key/mouse event processing should call release" name="Slider behaves as expected - Component API Key/mouse event processing should call release" time="0.009">
    </testcase>
    <testcase classname="Slider behaves as expected - Component API Key/mouse event processing should not call onRelease" name="Slider behaves as expected - Component API Key/mouse event processing should not call onRelease" time="0.015">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should render children as expected" name="Slider behaves as expected - Two Handle Slider Component API should render children as expected" time="0.006">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should apply the expected classes" name="Slider behaves as expected - Two Handle Slider Component API should apply the expected classes" time="0.006">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should be able to apply a disabled state" name="Slider behaves as expected - Two Handle Slider Component API should be able to apply a disabled state" time="0.013">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should be able to apply a warning state" name="Slider behaves as expected - Two Handle Slider Component API should be able to apply a warning state" time="0.011">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should be able to apply an invalid state" name="Slider behaves as expected - Two Handle Slider Component API should be able to apply an invalid state" time="0.006">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should be able to set value via props" name="Slider behaves as expected - Two Handle Slider Component API should be able to set value via props" time="0.033">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should change the value upon interacting with the slider" name="Slider behaves as expected - Two Handle Slider Component API should change the value upon interacting with the slider" time="0.126">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should accurately position handles on mount" name="Slider behaves as expected - Two Handle Slider Component API should accurately position handles on mount" time="0.011">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API marks input field as hidden if hidden via props" name="Slider behaves as expected - Two Handle Slider Component API marks input field as hidden if hidden via props" time="0.006">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API supports custom formatting on the tooltip when input is hidden" name="Slider behaves as expected - Two Handle Slider Component API supports custom formatting on the tooltip when input is hidden" time="0.004">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API allows user to set invalid value when typing in input field" name="Slider behaves as expected - Two Handle Slider Component API allows user to set invalid value when typing in input field" time="0.049">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API sets correct state when typing a valid value in input field" name="Slider behaves as expected - Two Handle Slider Component API sets correct state when typing a valid value in input field" time="0.07">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should check for auto-correct on the input" name="Slider behaves as expected - Two Handle Slider Component API should check for auto-correct on the input" time="0.097">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should not apply the given id to the elements with role of slider" name="Slider behaves as expected - Two Handle Slider Component API should not apply the given id to the elements with role of slider" time="0.012">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should apply a custom input type" name="Slider behaves as expected - Two Handle Slider Component API should apply a custom input type" time="0.004">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should apply a custom input name" name="Slider behaves as expected - Two Handle Slider Component API should apply a custom input name" time="0.002">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should mark an empty input as invalid when using the required prop" name="Slider behaves as expected - Two Handle Slider Component API should mark an empty input as invalid when using the required prop" time="0.048">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should respect readOnly prop" name="Slider behaves as expected - Two Handle Slider Component API should respect readOnly prop" time="0.059">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API should allow upper handle to reach `max` when `max` is not divisible by `step`" name="Slider behaves as expected - Two Handle Slider Component API should allow upper handle to reach `max` when `max` is not divisible by `step`" time="0.03">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers handles non-number typed into input field" name="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers handles non-number typed into input field" time="0.057">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to _onDrag" name="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers gracefully tolerates empty event passed to _onDrag" time="0.011">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should call onBlur as expected" name="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should call onBlur as expected" time="0.026">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should call onKeyDown as expected" name="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should call onKeyDown as expected" time="0.053">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should gracefully handle non-numeric keys" name="Slider behaves as expected - Two Handle Slider Component API Error handling, expected behavior from event handlers should gracefully handle non-numeric keys" time="0.037">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Disabled state should do nothing when trying to type in the input" name="Slider behaves as expected - Two Handle Slider Component API Disabled state should do nothing when trying to type in the input" time="0.009">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Disabled state should do nothing when trying to drag" name="Slider behaves as expected - Two Handle Slider Component API Disabled state should do nothing when trying to drag" time="0.016">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Disabled state should not change slider value when using arrow key" name="Slider behaves as expected - Two Handle Slider Component API Disabled state should not change slider value when using arrow key" time="0.073">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing sets correct state from event with a clientX in a mousemove" name="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing sets correct state from event with a clientX in a mousemove" time="0.007">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should call release" name="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should call release" time="0.038">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should not call onRelease" name="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should not call onRelease" time="0.008">
    </testcase>
    <testcase classname="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should round the slider&apos;s value when using small step values" name="Slider behaves as expected - Two Handle Slider Component API Key/mouse event processing should round the slider&apos;s value when using small step values" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="OverflowMenu (enable-v12-overflowmenu)" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:32" time="0.925" tests="10">
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should render closed by default" name="OverflowMenu (enable-v12-overflowmenu) should render closed by default" time="0.025">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should be in an open state after trigger is clicked" name="OverflowMenu (enable-v12-overflowmenu) should be in an open state after trigger is clicked" time="0.143">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should add custom classNames" name="OverflowMenu (enable-v12-overflowmenu) should add custom classNames" time="0.01">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should set an id if one is given" name="OverflowMenu (enable-v12-overflowmenu) should set an id if one is given" time="0.009">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should always use button kind=ghost" name="OverflowMenu (enable-v12-overflowmenu) should always use button kind=ghost" time="0.026">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) should close menu on outside click" name="OverflowMenu (enable-v12-overflowmenu) should close menu on outside click" time="0.171">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;top-start&quot;" name="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;top-start&quot;" time="0.053">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;top-end&quot;" name="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;top-end&quot;" time="0.107">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" name="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" time="0.047">
    </testcase>
    <testcase classname="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" name="OverflowMenu (enable-v12-overflowmenu) supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" time="0.154">
    </testcase>
  </testsuite>
  <testsuite name="Pagination" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:32" time="1.56" tests="36">
    <testcase classname="Pagination renders as expected - Component API should spread extra props onto outermost element" name="Pagination renders as expected - Component API should spread extra props onto outermost element" time="0.045">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should label icon with backwardText" name="Pagination renders as expected - Component API should label icon with backwardText" time="0.017">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should support a custom `className` prop on the outermost element" name="Pagination renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.027">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should disable controls with disabled" name="Pagination renders as expected - Component API should disable controls with disabled" time="0.02">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should label icon with forwardText" name="Pagination renders as expected - Component API should label icon with forwardText" time="0.015">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect itemRangeText prop" name="Pagination renders as expected - Component API should respect itemRangeText prop" time="0.01">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect itemText prop" name="Pagination renders as expected - Component API should respect itemText prop" time="0.006">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect itemsPerPageText prop" name="Pagination renders as expected - Component API should respect itemsPerPageText prop" time="0.017">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should call onChange when switching pages using the buttons" name="Pagination renders as expected - Component API should call onChange when switching pages using the buttons" time="0.087">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should call onChange when switching pages using the dropdown" name="Pagination renders as expected - Component API should call onChange when switching pages using the dropdown" time="0.073">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should call onChange when changing page size using the dropdown" name="Pagination renders as expected - Component API should call onChange when changing page size using the dropdown" time="0.046">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should keep focus on the previous button if there is a previous page after it is clicked" name="Pagination renders as expected - Component API should keep focus on the previous button if there is a previous page after it is clicked" time="0.033">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should change focus off the previous button and to the next button if there is no previous page after it is clicked" name="Pagination renders as expected - Component API should change focus off the previous button and to the next button if there is no previous page after it is clicked" time="0.079">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should keep focus on the next button if there is a next page after it is clicked" name="Pagination renders as expected - Component API should keep focus on the next button if there is a next page after it is clicked" time="0.068">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should change focus off the next button and to the previous button if there is no next page after it is clicked" name="Pagination renders as expected - Component API should change focus off the next button and to the previous button if there is no next page after it is clicked" time="0.059">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should change page based on page" name="Pagination renders as expected - Component API should change page based on page" time="0.008">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the text when switching pages using the buttons" name="Pagination renders as expected - Component API should update the text when switching pages using the buttons" time="0.073">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the text when switching pages using the dropdown" name="Pagination renders as expected - Component API should update the text when switching pages using the dropdown" time="0.035">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the text when switching page size using the dropdown" name="Pagination renders as expected - Component API should update the text when switching page size using the dropdown" time="0.038">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageInputDisabled prop" name="Pagination renders as expected - Component API should respect pageInputDisabled prop" time="0.015">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageRangeText prop" name="Pagination renders as expected - Component API should respect pageRangeText prop" time="0.021">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageSize prop" name="Pagination renders as expected - Component API should respect pageSize prop" time="0.012">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageSize prop with a custom label" name="Pagination renders as expected - Component API should respect pageSize prop with a custom label" time="0.11">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageSizeInputDisabled prop" name="Pagination renders as expected - Component API should respect pageSizeInputDisabled prop" time="0.005">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageSizes prop" name="Pagination renders as expected - Component API should respect pageSizes prop" time="0.179">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect pageText prop" name="Pagination renders as expected - Component API should respect pageText prop" time="0.011">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should include only current page when pagesUnknown" name="Pagination renders as expected - Component API should include only current page when pagesUnknown" time="0.007">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect size prop" name="Pagination renders as expected - Component API should respect size prop" time="0.011">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should respect totalItems prop" name="Pagination renders as expected - Component API should respect totalItems prop" time="0.014">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should allow totalItems undefined" name="Pagination renders as expected - Component API should allow totalItems undefined" time="0.01">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API Next button should be enabled if totalItems undefined and pagesUnknown is true" name="Pagination renders as expected - Component API Next button should be enabled if totalItems undefined and pagesUnknown is true" time="0.007">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should handle zero total items" name="Pagination renders as expected - Component API should handle zero total items" time="0.022">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the page when updated externally" name="Pagination renders as expected - Component API should update the page when updated externally" time="0.019">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the page size when updated externally" name="Pagination renders as expected - Component API should update the page size when updated externally" time="0.017">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the page sizes when updated externally" name="Pagination renders as expected - Component API should update the page sizes when updated externally" time="0.149">
    </testcase>
    <testcase classname="Pagination renders as expected - Component API should update the page to 1 when the updated page sizes do not include the new size" name="Pagination renders as expected - Component API should update the page to 1 when the updated page sizes do not include the new size" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="NotificationButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:33" time="0.687" tests="36">
    <testcase classname="NotificationButton should place the `className` prop on the outermost DOM node" name="NotificationButton should place the `className` prop on the outermost DOM node" time="0.004">
    </testcase>
    <testcase classname="NotificationButton supports custom icon" name="NotificationButton supports custom icon" time="0.021">
    </testcase>
    <testcase classname="NotificationButton interpolates matching className based on notificationType prop" name="NotificationButton interpolates matching className based on notificationType prop" time="0.016">
    </testcase>
    <testcase classname="ToastNotification should render" name="ToastNotification should render" time="0.014">
    </testcase>
    <testcase classname="ToastNotification should have role=status by default" name="ToastNotification should have role=status by default" time="0.003">
    </testcase>
    <testcase classname="ToastNotification should place the `className` prop on the outermost DOM node" name="ToastNotification should place the `className` prop on the outermost DOM node" time="0.002">
    </testcase>
    <testcase classname="ToastNotification interpolates matching className based on kind prop" name="ToastNotification interpolates matching className based on kind prop" time="0.032">
    </testcase>
    <testcase classname="ToastNotification allows non-interactive elements as children" name="ToastNotification allows non-interactive elements as children" time="0.005">
    </testcase>
    <testcase classname="ToastNotification does not allow interactive elements as children" name="ToastNotification does not allow interactive elements as children" time="0.054">
    </testcase>
    <testcase classname="ToastNotification does not render close button when `hideCloseButton` is provided" name="ToastNotification does not render close button when `hideCloseButton` is provided" time="0.004">
    </testcase>
    <testcase classname="ToastNotification calls `onClose` when notification is closed" name="ToastNotification calls `onClose` when notification is closed" time="0.034">
    </testcase>
    <testcase classname="ToastNotification keeps notification open if `onClose` returns false" name="ToastNotification keeps notification open if `onClose` returns false" time="0.026">
    </testcase>
    <testcase classname="ToastNotification calls `onCloseButtonClick` when notification is closed" name="ToastNotification calls `onCloseButtonClick` when notification is closed" time="0.028">
    </testcase>
    <testcase classname="InlineNotification should render" name="InlineNotification should render" time="0.006">
    </testcase>
    <testcase classname="InlineNotification should have role=status by default" name="InlineNotification should have role=status by default" time="0.001">
    </testcase>
    <testcase classname="InlineNotification should place the `className` prop on the outermost DOM node" name="InlineNotification should place the `className` prop on the outermost DOM node" time="0.002">
    </testcase>
    <testcase classname="InlineNotification interpolates matching className based on kind prop" name="InlineNotification interpolates matching className based on kind prop" time="0.014">
    </testcase>
    <testcase classname="InlineNotification allows non-interactive elements as children" name="InlineNotification allows non-interactive elements as children" time="0.002">
    </testcase>
    <testcase classname="InlineNotification does not allow interactive elements as children" name="InlineNotification does not allow interactive elements as children" time="0.006">
    </testcase>
    <testcase classname="InlineNotification does not render close button when `hideCloseButton` is provided" name="InlineNotification does not render close button when `hideCloseButton` is provided" time="0.004">
    </testcase>
    <testcase classname="InlineNotification calls `onClose` when notification is closed" name="InlineNotification calls `onClose` when notification is closed" time="0.034">
    </testcase>
    <testcase classname="InlineNotification keeps notification open if `onClose` returns false" name="InlineNotification keeps notification open if `onClose` returns false" time="0.029">
    </testcase>
    <testcase classname="InlineNotification calls `onCloseButtonClick` when notification is closed" name="InlineNotification calls `onCloseButtonClick` when notification is closed" time="0.024">
    </testcase>
    <testcase classname="ActionableNotification should render" name="ActionableNotification should render" time="0.011">
    </testcase>
    <testcase classname="ActionableNotification uses role=alertdialog" name="ActionableNotification uses role=alertdialog" time="0.001">
    </testcase>
    <testcase classname="ActionableNotification renders correct action label" name="ActionableNotification renders correct action label" time="0.011">
    </testcase>
    <testcase classname="ActionableNotification closes notification via escape button when focus is placed on the notification" name="ActionableNotification closes notification via escape button when focus is placed on the notification" time="0.022">
    </testcase>
    <testcase classname="StaticNotification logs a deprecation notice when used" name="StaticNotification logs a deprecation notice when used" time="0.037">
    </testcase>
    <testcase classname="Callout should place the `className` prop on the outermost DOM node" name="Callout should place the `className` prop on the outermost DOM node" time="0.006">
    </testcase>
    <testcase classname="Callout calls `onActionButtonClick` when action button is clicked" name="Callout calls `onActionButtonClick` when action button is clicked" time="0.026">
    </testcase>
    <testcase classname="Callout interpolates matching className based on kind prop" name="Callout interpolates matching className based on kind prop" time="0.007">
    </testcase>
    <testcase classname="Callout places low contrast class based on lowContrast prop" name="Callout places low contrast class based on lowContrast prop" time="0.002">
    </testcase>
    <testcase classname="Callout allows non-interactive elements as children" name="Callout allows non-interactive elements as children" time="0.003">
    </testcase>
    <testcase classname="Callout allows interactive elements as children" name="Callout allows interactive elements as children" time="0.001">
    </testcase>
    <testcase classname="Callout supports `title`, `subtitle`, `titleId` props" name="Callout supports `title`, `subtitle`, `titleId` props" time="0.004">
    </testcase>
    <testcase classname="Callout enforces aria-describedby on interactive children elements" name="Callout enforces aria-describedby on interactive children elements" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Select" errors="0" failures="0" skipped="1" timestamp="2025-04-09T19:51:31" time="2.386" tests="31">
    <testcase classname="Select renders as expected - Component API should render the correct elements by default" name="Select renders as expected - Component API should render the correct elements by default" time="0.006">
    </testcase>
    <testcase classname="Select renders as expected - Component API should render the correct classname" name="Select renders as expected - Component API should render the correct classname" time="0.005">
    </testcase>
    <testcase classname="Select renders as expected - Component API should spread extra props on the outermost element" name="Select renders as expected - Component API should spread extra props on the outermost element" time="0.01">
    </testcase>
    <testcase classname="Select renders as expected - Component API should render children as expected" name="Select renders as expected - Component API should render children as expected" time="0.006">
    </testcase>
    <testcase classname="Select renders as expected - Component API should support a custom `className` prop on the outermost element" name="Select renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect defaultValue prop" name="Select renders as expected - Component API should respect defaultValue prop" time="0.002">
    </testcase>
    <testcase classname="Select renders as expected - Component API should show SelectItem text as title" name="Select renders as expected - Component API should show SelectItem text as title" time="0.003">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect disabled prop" name="Select renders as expected - Component API should respect disabled prop" time="0.003">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect helperText prop" name="Select renders as expected - Component API should respect helperText prop" time="0.002">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect hideLabel prop" name="Select renders as expected - Component API should respect hideLabel prop" time="0.009">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect id prop" name="Select renders as expected - Component API should respect id prop" time="0.006">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect inline prop" name="Select renders as expected - Component API should respect inline prop" time="0.004">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect invalid prop" name="Select renders as expected - Component API should respect invalid prop" time="0.008">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect invalidText prop" name="Select renders as expected - Component API should respect invalidText prop" time="0.004">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect labelText prop" name="Select renders as expected - Component API should respect labelText prop" time="0.001">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect noLabel prop" name="Select renders as expected - Component API should respect noLabel prop" time="0.001">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect readOnly prop" name="Select renders as expected - Component API should respect readOnly prop" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect size prop" name="Select renders as expected - Component API should respect size prop" time="0.004">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect warn prop" name="Select renders as expected - Component API should respect warn prop" time="0.002">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect warnText prop" name="Select renders as expected - Component API should respect warnText prop" time="0.001">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect slug prop" name="Select renders as expected - Component API should respect slug prop" time="0.037">
    </testcase>
    <testcase classname="Select renders as expected - Component API should respect decorator prop" name="Select renders as expected - Component API should respect decorator prop" time="0.003">
    </testcase>
    <testcase classname="Select behaves as expected should call onChange when expected" name="Select behaves as expected should call onChange when expected" time="0.091">
    </testcase>
    <testcase classname="Select behaves as expected should call onClick when expected" name="Select behaves as expected should call onClick when expected" time="0.076">
    </testcase>
    <testcase classname="Select behaves as expected should not call onClick when disabled" name="Select behaves as expected should not call onClick when disabled" time="0.081">
    </testcase>
    <testcase classname="Select behaves as expected should receive focus when tab is pressed" name="Select behaves as expected should receive focus when tab is pressed" time="0.049">
    </testcase>
    <testcase classname="Select behaves as expected should not receive focus when disabled" name="Select behaves as expected should not receive focus when disabled" time="0.071">
    </testcase>
    <testcase classname="Select behaves as expected should render with a ref" name="Select behaves as expected should render with a ref" time="0.004">
    </testcase>
    <testcase classname="Select behaves as expected should render a skeleton state" name="Select behaves as expected should render a skeleton state" time="0.006">
    </testcase>
    <testcase classname="Select automated verification testing should have no aXe violations" name="Select automated verification testing should have no aXe violations" time="0.061">
    </testcase>
    <testcase classname="Select automated verification testing should have no Accessibility Checker violations" name="Select automated verification testing should have no Accessibility Checker violations" time="1.641">
    </testcase>
  </testsuite>
  <testsuite name="NumberInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:33" time="1.197" tests="29">
    <testcase classname="NumberInput should render an &lt;input&gt; with type=&quot;number&quot;" name="NumberInput should render an &lt;input&gt; with type=&quot;number&quot;" time="0.075">
    </testcase>
    <testcase classname="NumberInput should place className on the outermost element" name="NumberInput should place className on the outermost element" time="0.008">
    </testcase>
    <testcase classname="NumberInput should set `min` on the underlying &lt;input&gt;" name="NumberInput should set `min` on the underlying &lt;input&gt;" time="0.002">
    </testcase>
    <testcase classname="NumberInput should set `max` on the underlying &lt;input&gt;" name="NumberInput should set `max` on the underlying &lt;input&gt;" time="0.002">
    </testcase>
    <testcase classname="NumberInput should set `step` on the underlying &lt;input&gt;" name="NumberInput should set `step` on the underlying &lt;input&gt;" time="0.003">
    </testcase>
    <testcase classname="NumberInput should set `disabled` on the underlying &lt;input&gt;" name="NumberInput should set `disabled` on the underlying &lt;input&gt;" time="0.001">
    </testcase>
    <testcase classname="NumberInput should set the defaultValue of the &lt;input&gt; with `defaultValue`" name="NumberInput should set the defaultValue of the &lt;input&gt; with `defaultValue`" time="0.002">
    </testcase>
    <testcase classname="NumberInput should set the given `value` on &lt;input&gt; when value &gt; min" name="NumberInput should set the given `value` on &lt;input&gt; when value &gt; min" time="0.007">
    </testcase>
    <testcase classname="NumberInput should respect decorator prop" name="NumberInput should respect decorator prop" time="0.029">
    </testcase>
    <testcase classname="NumberInput should respect the deprecated slug prop" name="NumberInput should respect the deprecated slug prop" time="0.021">
    </testcase>
    <testcase classname="NumberInput should allow an empty string as input to the underlying &lt;input&gt;" name="NumberInput should allow an empty string as input to the underlying &lt;input&gt;" time="0.004">
    </testcase>
    <testcase classname="NumberInput should set the input as invalid when value &lt; min" name="NumberInput should set the input as invalid when value &lt; min" time="0.008">
    </testcase>
    <testcase classname="NumberInput should render invalidText when value is empty string" name="NumberInput should render invalidText when value is empty string" time="0.003">
    </testcase>
    <testcase classname="NumberInput should describe the &lt;input&gt; through `helperText`" name="NumberInput should describe the &lt;input&gt; through `helperText`" time="0.002">
    </testcase>
    <testcase classname="NumberInput should call `onClick` when the `&lt;input&gt;` is clicked" name="NumberInput should call `onClick` when the `&lt;input&gt;` is clicked" time="0.031">
    </testcase>
    <testcase classname="NumberInput should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="NumberInput should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.016">
    </testcase>
    <testcase classname="NumberInput should call `onChange` when the value changes" name="NumberInput should call `onChange` when the value changes" time="0.038">
    </testcase>
    <testcase classname="NumberInput steppers should call `onClick` when up or down arrows are clicked" name="NumberInput steppers should call `onClick` when up or down arrows are clicked" time="0.084">
    </testcase>
    <testcase classname="NumberInput steppers should set up and down arrows as disabled if `disabled` is true" name="NumberInput steppers should set up and down arrows as disabled if `disabled` is true" time="0.005">
    </testcase>
    <testcase classname="NumberInput steppers should not call `onClick` when up or down arrows are clicked but the &lt;input&gt; is disabled" name="NumberInput steppers should not call `onClick` when up or down arrows are clicked but the &lt;input&gt; is disabled" time="0.026">
    </testcase>
    <testcase classname="NumberInput steppers should only increase the value on up arrow click if value is less than max" name="NumberInput steppers should only increase the value on up arrow click if value is less than max" time="0.038">
    </testcase>
    <testcase classname="NumberInput steppers should only decrease the value on down arrow click if value is greater than min" name="NumberInput steppers should only decrease the value on down arrow click if value is greater than min" time="0.049">
    </testcase>
    <testcase classname="NumberInput steppers should increase by the value of step" name="NumberInput steppers should increase by the value of step" time="0.025">
    </testcase>
    <testcase classname="NumberInput steppers should decrease by the value of step" name="NumberInput steppers should decrease by the value of step" time="0.033">
    </testcase>
    <testcase classname="NumberInput should increase by the value of large step" name="NumberInput should increase by the value of large step" time="0.028">
    </testcase>
    <testcase classname="NumberInput should decrease by the value of large step" name="NumberInput should decrease by the value of large step" time="0.037">
    </testcase>
    <testcase classname="NumberInput should respect readOnly prop" name="NumberInput should respect readOnly prop" time="0.167">
    </testcase>
    <testcase classname="NumberInput should update value to empty when allowEmpty is true &amp; input value becomes empty" name="NumberInput should update value to empty when allowEmpty is true &amp; input value becomes empty" time="0.013">
    </testcase>
    <testcase classname="NumberInput should increment and decrement decimal numbers without floating-point precision errors" name="NumberInput should increment and decrement decimal numbers without floating-point precision errors" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="ListBoxSelection" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:34" time="0.699" tests="10">
    <testcase classname="ListBoxSelection should render a clear button if no `selectionCount` is provided" name="ListBoxSelection should render a clear button if no `selectionCount` is provided" time="0.042">
    </testcase>
    <testcase classname="ListBoxSelection should render a clear all button if `selectionCount` is provided" name="ListBoxSelection should render a clear all button if `selectionCount` is provided" time="0.004">
    </testcase>
    <testcase classname="ListBoxSelection should call `clearSelection` when the clear button is clicked" name="ListBoxSelection should call `clearSelection` when the clear button is clicked" time="0.029">
    </testcase>
    <testcase classname="ListBoxSelection should not call `clearSelection` when the clear button is disabled" name="ListBoxSelection should not call `clearSelection` when the clear button is disabled" time="0.018">
    </testcase>
    <testcase classname="ListBoxSelection should call `onClearSelection` when the clear button is clicked" name="ListBoxSelection should call `onClearSelection` when the clear button is clicked" time="0.021">
    </testcase>
    <testcase classname="ListBoxSelection should not call `onClearSelection` when the clear button is disabled" name="ListBoxSelection should not call `onClearSelection` when the clear button is disabled" time="0.011">
    </testcase>
    <testcase classname="ListBoxSelection should call `clearSelection` when the clear all button is clicked" name="ListBoxSelection should call `clearSelection` when the clear all button is clicked" time="0.02">
    </testcase>
    <testcase classname="ListBoxSelection should not call `clearSelection` when the clear all button is disabled" name="ListBoxSelection should not call `clearSelection` when the clear all button is disabled" time="0.115">
    </testcase>
    <testcase classname="ListBoxSelection should call `onClearSelection` when the clear all button is clicked" name="ListBoxSelection should call `onClearSelection` when the clear all button is clicked" time="0.014">
    </testcase>
    <testcase classname="ListBoxSelection should not call `onClearSelection` when the clear all button is disabled" name="ListBoxSelection should not call `onClearSelection` when the clear all button is disabled" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="ListBoxMenuItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:34" time="0.274" tests="4">
    <testcase classname="ListBoxMenuItem should set the active class when `isActive` is true" name="ListBoxMenuItem should set the active class when `isActive` is true" time="0.003">
    </testcase>
    <testcase classname="ListBoxMenuItem should set the highlighted class when `isHighlighted` is true" name="ListBoxMenuItem should set the highlighted class when `isHighlighted` is true" time="0">
    </testcase>
    <testcase classname="ListBoxMenuItem should spread extra props on the outermost element" name="ListBoxMenuItem should spread extra props on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ListBoxMenuItem should forward `menuItemOptionRef` to the inner `div` element" name="ListBoxMenuItem should forward `menuItemOptionRef` to the inner `div` element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ListBoxMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:34" time="0.224" tests="3">
    <testcase classname="ListBoxMenu should render an element with role=&quot;listbox&quot;" name="ListBoxMenu should render an element with role=&quot;listbox&quot;" time="0.022">
    </testcase>
    <testcase classname="ListBoxMenu should spread extra props on the outermost element" name="ListBoxMenu should spread extra props on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ListBoxMenu should support a `ref` on the element with role=&quot;listbox&quot;" name="ListBoxMenu should support a `ref` on the element with role=&quot;listbox&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ListBoxMenuIcon" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:34" time="0.269" tests="2">
    <testcase classname="ListBoxMenuIcon should support translating the close menu message" name="ListBoxMenuIcon should support translating the close menu message" time="0.01">
    </testcase>
    <testcase classname="ListBoxMenuIcon should support translating the open menu message" name="ListBoxMenuIcon should support translating the open menu message" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="ListBoxField" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:35" time="0.448" tests="3">
    <testcase classname="ListBoxField should set tabIndex to -1 when disabled" name="ListBoxField should set tabIndex to -1 when disabled" time="0.012">
    </testcase>
    <testcase classname="ListBoxField should set tabIndex to the `tabIndex` prop" name="ListBoxField should set tabIndex to the `tabIndex` prop" time="0.001">
    </testcase>
    <testcase classname="ListBoxField should spread extra props on the outermost element" name="ListBoxField should spread extra props on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ListBox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:35" time="0.403" tests="12">
    <testcase classname="ListBox should set the inline class when type=&quot;inline&quot;" name="ListBox should set the inline class when type=&quot;inline&quot;" time="0.003">
    </testcase>
    <testcase classname="ListBox should set the disabled class when `disabled` is true" name="ListBox should set the disabled class when `disabled` is true" time="0.002">
    </testcase>
    <testcase classname="ListBox should set the expanded class when `isOpen` is true" name="ListBox should set the expanded class when `isOpen` is true" time="0.001">
    </testcase>
    <testcase classname="ListBox should set the warning class when `warn` is true and invalid is false" name="ListBox should set the warning class when `warn` is true and invalid is false" time="0.002">
    </testcase>
    <testcase classname="ListBox should render `invalidText` when `invalid` is true" name="ListBox should render `invalidText` when `invalid` is true" time="0.008">
    </testcase>
    <testcase classname="ListBox should render `warnText` when `warn` is true" name="ListBox should render `warnText` when `warn` is true" time="0.002">
    </testcase>
    <testcase classname="ListBox sizes should set the sm class" name="ListBox sizes should set the sm class" time="0.003">
    </testcase>
    <testcase classname="ListBox sizes should set the md class" name="ListBox sizes should set the md class" time="0.003">
    </testcase>
    <testcase classname="ListBox sizes should set the lg class" name="ListBox sizes should set the lg class" time="0">
    </testcase>
    <testcase classname="ListBox should support a custom `className` prop on the outermost element" name="ListBox should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ListBox should spread extra props on the outermost element" name="ListBox should spread extra props on the outermost element" time="0">
    </testcase>
    <testcase classname="ListBox should support a `ref` on the outermost element" name="ListBox should support a `ref` on the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="IconIndicator" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:35" time="0.358" tests="5">
    <testcase classname="IconIndicator should use a custom label" name="IconIndicator should use a custom label" time="0.025">
    </testcase>
    <testcase classname="IconIndicator should update with size prop" name="IconIndicator should update with size prop" time="0.02">
    </testcase>
    <testcase classname="IconIndicator should update with kind prop" name="IconIndicator should update with kind prop" time="0.02">
    </testcase>
    <testcase classname="IconIndicator should support a custom class name on the outermost element" name="IconIndicator should support a custom class name on the outermost element" time="0.008">
    </testcase>
    <testcase classname="IconIndicator should support a ref on the outermost element" name="IconIndicator should support a ref on the outermost element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="IconButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:35" time="0.448" tests="10">
    <testcase classname="IconButton should support labelling with label" name="IconButton should support labelling with label" time="0.025">
    </testcase>
    <testcase classname="IconButton should support badge indicator" name="IconButton should support badge indicator" time="0.026">
    </testcase>
    <testcase classname="IconButton should throw warning if using badge indicator improperly" name="IconButton should throw warning if using badge indicator improperly" time="0.045">
    </testcase>
    <testcase classname="IconButton should support badge indicator and truncate" name="IconButton should support badge indicator and truncate" time="0.004">
    </testcase>
    <testcase classname="IconButton should support data-testid on the &lt;button&gt; element" name="IconButton should support data-testid on the &lt;button&gt; element" time="0.026">
    </testcase>
    <testcase classname="IconButton should forward extra props to the underlying &lt;button&gt; element" name="IconButton should forward extra props to the underlying &lt;button&gt; element" time="0.004">
    </testcase>
    <testcase classname="IconButton should support a `ref` on the underlying &lt;button&gt; element" name="IconButton should support a `ref` on the underlying &lt;button&gt; element" time="0.008">
    </testcase>
    <testcase classname="IconButton should set aria-pressed=&quot;true&quot; if props.isSelected=&quot;true&quot; and props.kind=&quot;ghost&quot; " name="IconButton should set aria-pressed=&quot;true&quot; if props.isSelected=&quot;true&quot; and props.kind=&quot;ghost&quot; " time="0.024">
    </testcase>
    <testcase classname="IconButton should set aria-pressed=&quot;false&quot; if props.isSelected=&quot;false&quot; and props.kind=&quot;ghost&quot; " name="IconButton should set aria-pressed=&quot;false&quot; if props.isSelected=&quot;false&quot; and props.kind=&quot;ghost&quot; " time="0.01">
    </testcase>
    <testcase classname="IconButton should not set aria-pressed if props.isSelected is provided but props.kind is not &quot;ghost&quot; " name="IconButton should not set aria-pressed if props.isSelected is provided but props.kind is not &quot;ghost&quot; " time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Row" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:35" time="0.227" tests="5">
    <testcase classname="Row should support a custom element as the root node" name="Row should support a custom element as the root node" time="0.003">
    </testcase>
    <testcase classname="Row should include a custom className" name="Row should include a custom className" time="0">
    </testcase>
    <testcase classname="Row should pass un-used props to the top-level node that is rendered" name="Row should pass un-used props to the top-level node that is rendered" time="0.001">
    </testcase>
    <testcase classname="Row should render `children` that are given" name="Row should render `children` that are given" time="0.01">
    </testcase>
    <testcase classname="Row should support setting the condensed class through the `condensed` prop" name="Row should support setting the condensed class through the `condensed` prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MultiSelect" errors="0" failures="0" skipped="2" timestamp="2025-04-09T19:51:33" time="2.814" tests="38">
    <testcase classname="MultiSelect automated accessibility tests should have no axe violations" name="MultiSelect automated accessibility tests should have no axe violations" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MultiSelect automated accessibility tests should have no AC violations" name="MultiSelect automated accessibility tests should have no AC violations" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MultiSelect does not render items with undefined values" name="MultiSelect does not render items with undefined values" time="0.129">
    </testcase>
    <testcase classname="MultiSelect should initially render with a given label" name="MultiSelect should initially render with a given label" time="0.022">
    </testcase>
    <testcase classname="MultiSelect should open the menu when a user clicks on the label" name="MultiSelect should open the menu when a user clicks on the label" time="0.085">
    </testcase>
    <testcase classname="MultiSelect should open the menu when a user hits space while the field is focused" name="MultiSelect should open the menu when a user hits space while the field is focused" time="0.069">
    </testcase>
    <testcase classname="MultiSelect should open the menu when a user hits enter while the field is focused" name="MultiSelect should open the menu when a user hits enter while the field is focused" time="0.044">
    </testcase>
    <testcase classname="MultiSelect should let the user toggle item selection with a mouse" name="MultiSelect should let the user toggle item selection with a mouse" time="0.195">
    </testcase>
    <testcase classname="MultiSelect should close the menu when the user hits the Escape key" name="MultiSelect should close the menu when the user hits the Escape key" time="0.03">
    </testcase>
    <testcase classname="MultiSelect close menu with click outside of field" name="MultiSelect close menu with click outside of field" time="0.051">
    </testcase>
    <testcase classname="MultiSelect should toggle selection with enter" name="MultiSelect should toggle selection with enter" time="0.071">
    </testcase>
    <testcase classname="MultiSelect should clear selected items when the user clicks the clear selection button" name="MultiSelect should clear selected items when the user clicks the clear selection button" time="0.177">
    </testcase>
    <testcase classname="MultiSelect should not be interactive if disabled" name="MultiSelect should not be interactive if disabled" time="0.029">
    </testcase>
    <testcase classname="MultiSelect should not be interactive if readonly" name="MultiSelect should not be interactive if readonly" time="0.036">
    </testcase>
    <testcase classname="MultiSelect Component API should set the default selected items with the `initialSelectedItems` prop" name="MultiSelect Component API should set the default selected items with the `initialSelectedItems` prop" time="0.118">
    </testcase>
    <testcase classname="MultiSelect Component API should trigger onChange with selected items" name="MultiSelect Component API should trigger onChange with selected items" time="0.174">
    </testcase>
    <testcase classname="MultiSelect Component API should place the given id on the ___ node when passed in as a prop" name="MultiSelect Component API should place the given id on the ___ node when passed in as a prop" time="0.012">
    </testcase>
    <testcase classname="MultiSelect Component API should support a custom itemToString with object items" name="MultiSelect Component API should support a custom itemToString with object items" time="0.026">
    </testcase>
    <testcase classname="MultiSelect Component API should support a custom itemToElement" name="MultiSelect Component API should support a custom itemToElement" time="0.025">
    </testcase>
    <testcase classname="MultiSelect Component API should support custom translation with translateWithId" name="MultiSelect Component API should support custom translation with translateWithId" time="0.003">
    </testcase>
    <testcase classname="MultiSelect Component API should call onChange when the selection changes from user selection" name="MultiSelect Component API should call onChange when the selection changes from user selection" time="0.135">
    </testcase>
    <testcase classname="MultiSelect Component API should support an invalid state with invalidText that describes the field" name="MultiSelect Component API should support an invalid state with invalidText that describes the field" time="0.005">
    </testcase>
    <testcase classname="MultiSelect Component API should support different feedback modes with selectionFeedback" name="MultiSelect Component API should support different feedback modes with selectionFeedback" time="0.104">
    </testcase>
    <testcase classname="MultiSelect Component API should accept a `ref` for the underlying button element" name="MultiSelect Component API should accept a `ref` for the underlying button element" time="0.006">
    </testcase>
    <testcase classname="MultiSelect Component API should respect slug prop" name="MultiSelect Component API should respect slug prop" time="0.013">
    </testcase>
    <testcase classname="MultiSelect Component API should respect decorator prop" name="MultiSelect Component API should respect decorator prop" time="0.01">
    </testcase>
    <testcase classname="MultiSelect Component API should select all options when isSelectAll property in an item is provided" name="MultiSelect Component API should select all options when isSelectAll property in an item is provided" time="0.174">
    </testcase>
    <testcase classname="MultiSelect Controlled should initially render controlled multiselect with a given label" name="MultiSelect Controlled should initially render controlled multiselect with a given label" time="0.013">
    </testcase>
    <testcase classname="MultiSelect Controlled should allow the items to be controlled from external state" name="MultiSelect Controlled should allow the items to be controlled from external state" time="0.155">
    </testcase>
    <testcase classname="MultiSelect Controlled should support controlled component functionality with selectedItems and onChange" name="MultiSelect Controlled should support controlled component functionality with selectedItems and onChange" time="0.223">
    </testcase>
    <testcase classname="MultiSelect should prevent default behavior for ArrowDown, ArrowUp, Space, and Enter keys" name="MultiSelect should prevent default behavior for ArrowDown, ArrowUp, Space, and Enter keys" time="0.048">
    </testcase>
    <testcase classname="MultiSelect should focus the element if mergedRef.current is defined" name="MultiSelect should focus the element if mergedRef.current is defined" time="0.008">
    </testcase>
    <testcase classname="MultiSelect should not throw an error when slug is not defined" name="MultiSelect should not throw an error when slug is not defined" time="0.03">
    </testcase>
    <testcase classname="MultiSelect should call preventDefault for select access keys when readonly is true" name="MultiSelect should call preventDefault for select access keys when readonly is true" time="0.011">
    </testcase>
    <testcase classname="MultiSelect should return a comma-separated string for an array of items" name="MultiSelect should return a comma-separated string for an array of items" time="0.001">
    </testcase>
    <testcase classname="MultiSelect should return an empty string for non-array input" name="MultiSelect should return an empty string for non-array input" time="0">
    </testcase>
    <testcase classname="MultiSelect should add label props when `titleText` is a string" name="MultiSelect should add label props when `titleText` is a string" time="0.015">
    </testcase>
    <testcase classname="MultiSelect should not add label props when `titleText` is an element" name="MultiSelect should not add label props when `titleText` is an element" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="FlexGrid" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:36" time="1.021" tests="14">
    <testcase classname="FlexGrid should support a custom element as the root node" name="FlexGrid should support a custom element as the root node" time="0.004">
    </testcase>
    <testcase classname="FlexGrid should include a custom className" name="FlexGrid should include a custom className" time="0.001">
    </testcase>
    <testcase classname="FlexGrid should pass un-used props to the top-level node that is rendered" name="FlexGrid should pass un-used props to the top-level node that is rendered" time="0.007">
    </testcase>
    <testcase classname="FlexGrid should render `children` that are given" name="FlexGrid should render `children` that are given" time="0.002">
    </testcase>
    <testcase classname="FlexGrid should support setting the condensed class through the `condensed` prop" name="FlexGrid should support setting the condensed class through the `condensed` prop" time="0.001">
    </testcase>
    <testcase classname="FlexGrid should support setting the full-width class through the `fullWidth` prop" name="FlexGrid should support setting the full-width class through the `fullWidth` prop" time="0.001">
    </testcase>
    <testcase classname="Grid should support a custom element as the root node" name="Grid should support a custom element as the root node" time="0.076">
    </testcase>
    <testcase classname="Grid should include a custom className" name="Grid should include a custom className" time="0.14">
    </testcase>
    <testcase classname="Grid should pass un-used props to the top-level node that is rendered" name="Grid should pass un-used props to the top-level node that is rendered" time="0.091">
    </testcase>
    <testcase classname="Grid should render `children` that are given" name="Grid should render `children` that are given" time="0.077">
    </testcase>
    <testcase classname="Grid should support setting the condensed class through the `condensed` prop" name="Grid should support setting the condensed class through the `condensed` prop" time="0.104">
    </testcase>
    <testcase classname="Grid should support setting the full-width class through the `fullWidth` prop" name="Grid should support setting the full-width class through the `fullWidth` prop" time="0.061">
    </testcase>
    <testcase classname="Grid should support setting the align class through the `align` prop as start" name="Grid should support setting the align class through the `align` prop as start" time="0.108">
    </testcase>
    <testcase classname="Grid should support setting the align class through the `align` prop as end" name="Grid should support setting the align class through the `align` prop as end" time="0.064">
    </testcase>
  </testsuite>
  <testsuite name="FluidTextInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:36" time="0.739" tests="19">
    <testcase classname="FluidTextInput renders as expected - Component API should render as expected" name="FluidTextInput renders as expected - Component API should render as expected" time="0.006">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should spread extra props onto the input element" name="FluidTextInput renders as expected - Component API should spread extra props onto the input element" time="0.008">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should support a custom `className` prop on the outermost element" name="FluidTextInput renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.043">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect defaultValue prop" name="FluidTextInput renders as expected - Component API should respect defaultValue prop" time="0.028">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect disabled prop" name="FluidTextInput renders as expected - Component API should respect disabled prop" time="0.008">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect id prop" name="FluidTextInput renders as expected - Component API should respect id prop" time="0.013">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect invalid prop" name="FluidTextInput renders as expected - Component API should respect invalid prop" time="0.007">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect invalidText prop" name="FluidTextInput renders as expected - Component API should respect invalidText prop" time="0.005">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect isPassword prop" name="FluidTextInput renders as expected - Component API should respect isPassword prop" time="0.018">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect labelText prop" name="FluidTextInput renders as expected - Component API should respect labelText prop" time="0.003">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect placeholder prop" name="FluidTextInput renders as expected - Component API should respect placeholder prop" time="0.012">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect type prop" name="FluidTextInput renders as expected - Component API should respect type prop" time="0.017">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect value prop" name="FluidTextInput renders as expected - Component API should respect value prop" time="0.024">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect warn prop" name="FluidTextInput renders as expected - Component API should respect warn prop" time="0.006">
    </testcase>
    <testcase classname="FluidTextInput renders as expected - Component API should respect warnText prop" name="FluidTextInput renders as expected - Component API should respect warnText prop" time="0.044">
    </testcase>
    <testcase classname="FluidTextInput behaves as expected - Component API should respect onChange prop" name="FluidTextInput behaves as expected - Component API should respect onChange prop" time="0.066">
    </testcase>
    <testcase classname="FluidTextInput behaves as expected - Component API should respect onClick prop" name="FluidTextInput behaves as expected - Component API should respect onClick prop" time="0.019">
    </testcase>
    <testcase classname="FluidTextInput behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="FluidTextInput behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.023">
    </testcase>
    <testcase classname="FluidTextInput behaves as expected - Component API should respect readOnly prop" name="FluidTextInput behaves as expected - Component API should respect readOnly prop" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="FluidPasswordInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:37" time="0.49" tests="1">
    <testcase classname="FluidPasswordInput should render with fluid classes" name="FluidPasswordInput should render with fluid classes" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="FluidTimePicker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:37" time="0.399" tests="4">
    <testcase classname="FluidTimePicker renders as expected - Component API should have no axe violations" name="FluidTimePicker renders as expected - Component API should have no axe violations" time="0.054">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API should have no axe violations with isOnlyTwo" name="FluidTimePicker renders as expected - Component API should have no axe violations with isOnlyTwo" time="0.022">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API should accept a custom className prop on the root node" name="FluidTimePicker renders as expected - Component API should accept a custom className prop on the root node" time="0.002">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API should accept a custom isOnlyTwo prop on the root node" name="FluidTimePicker renders as expected - Component API should accept a custom isOnlyTwo prop on the root node" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FluidTimePicker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:37" time="0.257" tests="5">
    <testcase classname="FluidTimePicker renders as expected - Component API should add extra classes that are passed via className" name="FluidTimePicker renders as expected - Component API should add extra classes that are passed via className" time="0.007">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API should add fluid classes by default" name="FluidTimePicker renders as expected - Component API should add fluid classes by default" time="0.005">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API returns invalidText when invalid is true" name="FluidTimePicker renders as expected - Component API returns invalidText when invalid is true" time="0.008">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API returns warnText when warn is true" name="FluidTimePicker renders as expected - Component API returns warnText when warn is true" time="0.026">
    </testcase>
    <testcase classname="FluidTimePicker renders as expected - Component API should set disabled as expected" name="FluidTimePicker renders as expected - Component API should set disabled as expected" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="FluidNumberInput" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:37" time="0.23" tests="1">
    <testcase classname="FluidNumberInput renders as expected - Component API should render as expected" name="FluidNumberInput renders as expected - Component API should render as expected" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="FluidSearch" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.181" tests="1">
    <testcase classname="FluidSearch renders as expected - Component API should render as expected" name="FluidSearch renders as expected - Component API should render as expected" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="FluidSelect" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.181" tests="1">
    <testcase classname="FluidSelect renders as expected - Component API should render as expected" name="FluidSelect renders as expected - Component API should render as expected" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Column" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:36" time="2.292" tests="37">
    <testcase classname="Column should support a custom element as the root node" name="Column should support a custom element as the root node" time="0.007">
    </testcase>
    <testcase classname="Column should include a custom className" name="Column should include a custom className" time="0.001">
    </testcase>
    <testcase classname="Column should pass un-used props to the top-level node that is rendered" name="Column should pass un-used props to the top-level node that is rendered" time="0.004">
    </testcase>
    <testcase classname="Column should render `children` that are given" name="Column should render `children` that are given" time="0.003">
    </testcase>
    <testcase classname="Column should default to rendering a column that auto-spans" name="Column should default to rendering a column that auto-spans" time="0">
    </testcase>
    <testcase classname="Column should set the column span per breakpoint with a number" name="Column should set the column span per breakpoint with a number" time="0.001">
    </testcase>
    <testcase classname="Column should set the column span to auto if a boolean is set to true for a breakpoint" name="Column should set the column span to auto if a boolean is set to true for a breakpoint" time="0.001">
    </testcase>
    <testcase classname="Column should support specifying column span and offset as an object for breakpoint sm" name="Column should support specifying column span and offset as an object for breakpoint sm" time="0">
    </testcase>
    <testcase classname="Column should support specifying column span and offset as an object for breakpoint md" name="Column should support specifying column span and offset as an object for breakpoint md" time="0">
    </testcase>
    <testcase classname="Column should support specifying column span and offset as an object for breakpoint lg" name="Column should support specifying column span and offset as an object for breakpoint lg" time="0.001">
    </testcase>
    <testcase classname="Column should support specifying column span and offset as an object for breakpoint xlg" name="Column should support specifying column span and offset as an object for breakpoint xlg" time="0">
    </testcase>
    <testcase classname="Column should support specifying column span and offset as an object for breakpoint max" name="Column should support specifying column span and offset as an object for breakpoint max" time="0.001">
    </testcase>
    <testcase classname="Column next sm should support span in the breakpoint prop" name="Column next sm should support span in the breakpoint prop" time="0.086">
    </testcase>
    <testcase classname="Column next sm should support span, offset in the breakpoint prop" name="Column next sm should support span, offset in the breakpoint prop" time="0.074">
    </testcase>
    <testcase classname="Column next sm should support span, start in the breakpoint prop" name="Column next sm should support span, start in the breakpoint prop" time="0.073">
    </testcase>
    <testcase classname="Column next sm should support span, end in the breakpoint prop" name="Column next sm should support span, end in the breakpoint prop" time="0.097">
    </testcase>
    <testcase classname="Column next sm should support start, end in the breakpoint prop" name="Column next sm should support start, end in the breakpoint prop" time="0.073">
    </testcase>
    <testcase classname="Column next md should support span in the breakpoint prop" name="Column next md should support span in the breakpoint prop" time="0.066">
    </testcase>
    <testcase classname="Column next md should support span, offset in the breakpoint prop" name="Column next md should support span, offset in the breakpoint prop" time="0.139">
    </testcase>
    <testcase classname="Column next md should support span, start in the breakpoint prop" name="Column next md should support span, start in the breakpoint prop" time="0.081">
    </testcase>
    <testcase classname="Column next md should support span, end in the breakpoint prop" name="Column next md should support span, end in the breakpoint prop" time="0.092">
    </testcase>
    <testcase classname="Column next md should support start, end in the breakpoint prop" name="Column next md should support start, end in the breakpoint prop" time="0.036">
    </testcase>
    <testcase classname="Column next lg should support span in the breakpoint prop" name="Column next lg should support span in the breakpoint prop" time="0.189">
    </testcase>
    <testcase classname="Column next lg should support span, offset in the breakpoint prop" name="Column next lg should support span, offset in the breakpoint prop" time="0.074">
    </testcase>
    <testcase classname="Column next lg should support span, start in the breakpoint prop" name="Column next lg should support span, start in the breakpoint prop" time="0.087">
    </testcase>
    <testcase classname="Column next lg should support span, end in the breakpoint prop" name="Column next lg should support span, end in the breakpoint prop" time="0.093">
    </testcase>
    <testcase classname="Column next lg should support start, end in the breakpoint prop" name="Column next lg should support start, end in the breakpoint prop" time="0.068">
    </testcase>
    <testcase classname="Column next xlg should support span in the breakpoint prop" name="Column next xlg should support span in the breakpoint prop" time="0.071">
    </testcase>
    <testcase classname="Column next xlg should support span, offset in the breakpoint prop" name="Column next xlg should support span, offset in the breakpoint prop" time="0.099">
    </testcase>
    <testcase classname="Column next xlg should support span, start in the breakpoint prop" name="Column next xlg should support span, start in the breakpoint prop" time="0.052">
    </testcase>
    <testcase classname="Column next xlg should support span, end in the breakpoint prop" name="Column next xlg should support span, end in the breakpoint prop" time="0.047">
    </testcase>
    <testcase classname="Column next xlg should support start, end in the breakpoint prop" name="Column next xlg should support start, end in the breakpoint prop" time="0.08">
    </testcase>
    <testcase classname="Column next max should support span in the breakpoint prop" name="Column next max should support span in the breakpoint prop" time="0.066">
    </testcase>
    <testcase classname="Column next max should support span, offset in the breakpoint prop" name="Column next max should support span, offset in the breakpoint prop" time="0.042">
    </testcase>
    <testcase classname="Column next max should support span, start in the breakpoint prop" name="Column next max should support span, start in the breakpoint prop" time="0.073">
    </testcase>
    <testcase classname="Column next max should support span, end in the breakpoint prop" name="Column next max should support span, end in the breakpoint prop" time="0.086">
    </testcase>
    <testcase classname="Column next max should support start, end in the breakpoint prop" name="Column next max should support start, end in the breakpoint prop" time="0.076">
    </testcase>
  </testsuite>
  <testsuite name="FluidTextArea" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.316" tests="12">
    <testcase classname="FluidTextArea renders as expected - Component API should spread extra props onto the input element" name="FluidTextArea renders as expected - Component API should spread extra props onto the input element" time="0.014">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should support a custom `className` prop on the outermost element" name="FluidTextArea renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect defaultValue prop" name="FluidTextArea renders as expected - Component API should respect defaultValue prop" time="0.006">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect disabled prop" name="FluidTextArea renders as expected - Component API should respect disabled prop" time="0.003">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect id prop" name="FluidTextArea renders as expected - Component API should respect id prop" time="0.002">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect invalid prop" name="FluidTextArea renders as expected - Component API should respect invalid prop" time="0.002">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect invalidText prop" name="FluidTextArea renders as expected - Component API should respect invalidText prop" time="0.002">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect labelText prop" name="FluidTextArea renders as expected - Component API should respect labelText prop" time="0.003">
    </testcase>
    <testcase classname="FluidTextArea renders as expected - Component API should respect placeholder prop" name="FluidTextArea renders as expected - Component API should respect placeholder prop" time="0.001">
    </testcase>
    <testcase classname="FluidTextArea behaves as expected - Component API should respect onChange prop" name="FluidTextArea behaves as expected - Component API should respect onChange prop" time="0.03">
    </testcase>
    <testcase classname="FluidTextArea behaves as expected - Component API should respect onClick prop" name="FluidTextArea behaves as expected - Component API should respect onClick prop" time="0.02">
    </testcase>
    <testcase classname="FluidTextArea behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" name="FluidTextArea behaves as expected - Component API should not call `onClick` when the `&lt;input&gt;` is clicked but disabled" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="FluidMultiSelect" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.278" tests="1">
    <testcase classname="FluidMultiSelect should render with fluid classes" name="FluidMultiSelect should render with fluid classes" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="FluidDatePickerSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.309" tests="3">
    <testcase classname="FluidDatePickerSkeleton renders the single variant by default" name="FluidDatePickerSkeleton renders the single variant by default" time="0.014">
    </testcase>
    <testcase classname="FluidDatePickerSkeleton renders the range variant when specified" name="FluidDatePickerSkeleton renders the range variant when specified" time="0.021">
    </testcase>
    <testcase classname="FluidDatePickerSkeleton does not render the calendar icon for simple variant" name="FluidDatePickerSkeleton does not render the calendar icon for simple variant" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="FluidDatePicker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.474" tests="2">
    <testcase classname="FluidDatePicker renders as expected - Component API should add extra classes that are passed via className" name="FluidDatePicker renders as expected - Component API should add extra classes that are passed via className" time="0.011">
    </testcase>
    <testcase classname="FluidDatePicker renders as expected - Component API should add fluid classes by default" name="FluidDatePicker renders as expected - Component API should add fluid classes by default" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="FilterableMultiSelect" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:34" time="5.312" tests="62">
    <testcase classname="FilterableMultiSelect should display all items when the menu is open" name="FilterableMultiSelect should display all items when the menu is open" time="0.109">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when the user clicks on the combobox" name="FilterableMultiSelect should call `onMenuChange` when the user clicks on the combobox" time="0.056">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when the user clicks on the screen" name="FilterableMultiSelect should call `onMenuChange` when the user clicks on the screen" time="0.021">
    </testcase>
    <testcase classname="FilterableMultiSelect should not be interactive if readonly" name="FilterableMultiSelect should not be interactive if readonly" time="0.011">
    </testcase>
    <testcase classname="FilterableMultiSelect should initially have the menu open when open prop is provided" name="FilterableMultiSelect should initially have the menu open when open prop is provided" time="0.019">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when open prop is provided" name="FilterableMultiSelect should call `onMenuChange` when open prop is provided" time="0.011">
    </testcase>
    <testcase classname="FilterableMultiSelect should open the menu with a down arrow" name="FilterableMultiSelect should open the menu with a down arrow" time="0.045">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when the user types a down arrow" name="FilterableMultiSelect should call `onMenuChange` when the user types a down arrow" time="0.034">
    </testcase>
    <testcase classname="FilterableMultiSelect should let the user toggle the menu by the menu icon" name="FilterableMultiSelect should let the user toggle the menu by the menu icon" time="0.047">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when the user toggles the menu by the menu icon" name="FilterableMultiSelect should call `onMenuChange` when the user toggles the menu by the menu icon" time="0.07">
    </testcase>
    <testcase classname="FilterableMultiSelect should not close the menu after a user makes a selection" name="FilterableMultiSelect should not close the menu after a user makes a selection" time="0.07">
    </testcase>
    <testcase classname="FilterableMultiSelect should filter a list of items by the input value" name="FilterableMultiSelect should filter a list of items by the input value" time="0.151">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onChange` with each update to selected items" name="FilterableMultiSelect should call `onChange` with each update to selected items" time="0.417">
    </testcase>
    <testcase classname="FilterableMultiSelect should let items stay at their position after selecting" name="FilterableMultiSelect should let items stay at their position after selecting" time="0.15">
    </testcase>
    <testcase classname="FilterableMultiSelect should not clear input value after a user makes a selection" name="FilterableMultiSelect should not clear input value after a user makes a selection" time="0.124">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear input value when clicking on cross button" name="FilterableMultiSelect should clear input value when clicking on cross button" time="0.238">
    </testcase>
    <testcase classname="FilterableMultiSelect should respect slug prop" name="FilterableMultiSelect should respect slug prop" time="0.03">
    </testcase>
    <testcase classname="FilterableMultiSelect should respect decorator prop" name="FilterableMultiSelect should respect decorator prop" time="0.01">
    </testcase>
    <testcase classname="FilterableMultiSelect should place the given id on the listbox wrapper" name="FilterableMultiSelect should place the given id on the listbox wrapper" time="0.016">
    </testcase>
    <testcase classname="FilterableMultiSelect should render with initial selected items" name="FilterableMultiSelect should render with initial selected items" time="0.037">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle disabled state" name="FilterableMultiSelect should handle disabled state" time="0.035">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle invalid state" name="FilterableMultiSelect should handle invalid state" time="0.01">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle warning state" name="FilterableMultiSelect should handle warning state" time="0.011">
    </testcase>
    <testcase classname="FilterableMultiSelect should call onInputValueChange when typing" name="FilterableMultiSelect should call onInputValueChange when typing" time="0.121">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear all selections when clicking clear all button" name="FilterableMultiSelect should clear all selections when clicking clear all button" time="0.056">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle different sizes" name="FilterableMultiSelect should handle different sizes" time="0.092">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle selectionFeedback prop" name="FilterableMultiSelect should handle selectionFeedback prop" time="0.168">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle custom itemToString prop" name="FilterableMultiSelect should handle custom itemToString prop" time="0.068">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle custom compareItems prop" name="FilterableMultiSelect should handle custom compareItems prop" time="0.066">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle autoAlign prop" name="FilterableMultiSelect should handle autoAlign prop" time="0.139">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle inline type" name="FilterableMultiSelect should handle inline type" time="0.01">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle hideLabel prop" name="FilterableMultiSelect should handle hideLabel prop" time="0.004">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle custom filterItems function" name="FilterableMultiSelect should handle custom filterItems function" time="0.046">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle custom sortItems function" name="FilterableMultiSelect should handle custom sortItems function" time="0.063">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle useTitleInItem prop" name="FilterableMultiSelect should handle useTitleInItem prop" time="0.052">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle helperText prop" name="FilterableMultiSelect should handle helperText prop" time="0.01">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle itemToElement prop" name="FilterableMultiSelect should handle itemToElement prop" time="0.048">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle custom translateWithId" name="FilterableMultiSelect should handle custom translateWithId" time="0.023">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle keyboard navigation" name="FilterableMultiSelect should handle keyboard navigation" time="0.167">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle clearInputValue function" name="FilterableMultiSelect should handle clearInputValue function" time="0.143">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle selectionFeedback prop with &quot;fixed&quot; value" name="FilterableMultiSelect should handle selectionFeedback prop with &quot;fixed&quot; value" time="0.14">
    </testcase>
    <testcase classname="FilterableMultiSelect should call onMenuChange when menu is opened and closed via keyboard" name="FilterableMultiSelect should call onMenuChange when menu is opened and closed via keyboard" time="0.078">
    </testcase>
    <testcase classname="FilterableMultiSelect should respect changes to the open prop over time" name="FilterableMultiSelect should respect changes to the open prop over time" time="0.013">
    </testcase>
    <testcase classname="FilterableMultiSelect should have proper aria attributes for accessibility" name="FilterableMultiSelect should have proper aria attributes for accessibility" time="0.039">
    </testcase>
    <testcase classname="FilterableMultiSelect should render properly with an empty items array" name="FilterableMultiSelect should render properly with an empty items array" time="0.027">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle rapid selection and deselection of items" name="FilterableMultiSelect should handle rapid selection and deselection of items" time="0.148">
    </testcase>
    <testcase classname="FilterableMultiSelect should update input value but not clear selection on Delete key press" name="FilterableMultiSelect should update input value but not clear selection on Delete key press" time="0.077">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when the clear selection button is clicked" name="FilterableMultiSelect should clear selection when the clear selection button is clicked" time="0.031">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle multiple item selection and removal" name="FilterableMultiSelect should handle multiple item selection and removal" time="0.17">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when Backspace is pressed on selected item (SelectedItemKeyDownBackspace)" name="FilterableMultiSelect should clear selection when Backspace is pressed on selected item (SelectedItemKeyDownBackspace)" time="0.024">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when Delete is pressed on selected item (SelectedItemKeyDownDelete)" name="FilterableMultiSelect should clear selection when Delete is pressed on selected item (SelectedItemKeyDownDelete)" time="0.028">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when Backspace is pressed in dropdown (DropdownKeyDownBackspace)" name="FilterableMultiSelect should clear selection when Backspace is pressed in dropdown (DropdownKeyDownBackspace)" time="0.181">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when removal function is triggered (FunctionRemoveSelectedItem)" name="FilterableMultiSelect should clear selection when removal function is triggered (FunctionRemoveSelectedItem)" time="0.025">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when Backspace is pressed in dropdown with multiple selections" name="FilterableMultiSelect should clear selection when Backspace is pressed in dropdown with multiple selections" time="0.06">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection using keyboard navigation and Delete key" name="FilterableMultiSelect should clear selection using keyboard navigation and Delete key" time="0.078">
    </testcase>
    <testcase classname="FilterableMultiSelect should clear selection when Delete is pressed in dropdown" name="FilterableMultiSelect should clear selection when Delete is pressed in dropdown" time="0.043">
    </testcase>
    <testcase classname="FilterableMultiSelect should handle focus on regular elements" name="FilterableMultiSelect should handle focus on regular elements" time="0.514">
    </testcase>
    <testcase classname="FilterableMultiSelect should maintain focus state appropriately when selecting items" name="FilterableMultiSelect should maintain focus state appropriately when selecting items" time="0.059">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` exactly once on mount when `open` prop is provided" name="FilterableMultiSelect should call `onMenuChange` exactly once on mount when `open` prop is provided" time="0.006">
    </testcase>
    <testcase classname="FilterableMultiSelect should not re-trigger `onMenuChange` on re-render if `open` prop remains unchanged" name="FilterableMultiSelect should not re-trigger `onMenuChange` on re-render if `open` prop remains unchanged" time="0.01">
    </testcase>
    <testcase classname="FilterableMultiSelect should not call `onMenuChange` on mount when uncontrolled" name="FilterableMultiSelect should not call `onMenuChange` on mount when uncontrolled" time="0.003">
    </testcase>
    <testcase classname="FilterableMultiSelect should call `onMenuChange` when user interactions trigger state changes" name="FilterableMultiSelect should call `onMenuChange` when user interactions trigger state changes" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="Filename" errors="0" failures="0" skipped="6" timestamp="2025-04-09T19:51:39" time="0.316" tests="7">
    <testcase classname="Filename automated accessibility tests should have no axe violations with status uploading" name="Filename automated accessibility tests should have no axe violations with status uploading" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename automated accessibility tests should have no axe violations with status edit" name="Filename automated accessibility tests should have no axe violations with status edit" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename automated accessibility tests should have no axe violations with status complete" name="Filename automated accessibility tests should have no axe violations with status complete" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename automated accessibility tests should have no AC violations with status uploading" name="Filename automated accessibility tests should have no AC violations with status uploading" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename automated accessibility tests should have no AC violations with status edit" name="Filename automated accessibility tests should have no AC violations with status edit" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename automated accessibility tests should have no AC violations with status complete" name="Filename automated accessibility tests should have no AC violations with status complete" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Filename should support events on interactive icons when `edit` or `complete` is the status" name="Filename should support events on interactive icons when `edit` or `complete` is the status" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="FluidDropdown" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="0.812" tests="13">
    <testcase classname="FluidDropdown should render with fluid classes" name="FluidDropdown should render with fluid classes" time="0.021">
    </testcase>
    <testcase classname="FluidDropdown should render with condensed styles if isCondensed is provided" name="FluidDropdown should render with condensed styles if isCondensed is provided" time="0.015">
    </testcase>
    <testcase classname="FluidDropdown should initially render with the menu not open" name="FluidDropdown should initially render with the menu not open" time="0.015">
    </testcase>
    <testcase classname="FluidDropdown should let the user open the menu by clicking on the control" name="FluidDropdown should let the user open the menu by clicking on the control" time="0.041">
    </testcase>
    <testcase classname="FluidDropdown should render with strings as items" name="FluidDropdown should render with strings as items" time="0.027">
    </testcase>
    <testcase classname="FluidDropdown should render custom item components" name="FluidDropdown should render custom item components" time="0.024">
    </testcase>
    <testcase classname="FluidDropdown should render selectedItem as an element" name="FluidDropdown should render selectedItem as an element" time="0.01">
    </testcase>
    <testcase classname="FluidDropdown title renders a title" name="FluidDropdown title renders a title" time="0.004">
    </testcase>
    <testcase classname="FluidDropdown title has the expected classes" name="FluidDropdown title has the expected classes" time="0.006">
    </testcase>
    <testcase classname="FluidDropdown should let the user select an option by clicking on the option node" name="FluidDropdown should let the user select an option by clicking on the option node" time="0.15">
    </testcase>
    <testcase classname="FluidDropdown should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" name="FluidDropdown should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" time="0.007">
    </testcase>
    <testcase classname="FluidDropdown should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" name="FluidDropdown should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" time="0.009">
    </testcase>
    <testcase classname="FluidDropdown Component API should accept a `ref` for the underlying button element" name="FluidDropdown Component API should accept a `ref` for the underlying button element" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="FluidComboBox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:38" time="1.592" tests="15">
    <testcase classname="FluidComboBox should render with fluid classes" name="FluidComboBox should render with fluid classes" time="0.009">
    </testcase>
    <testcase classname="FluidComboBox should render with condensed styles if isCondensed is provided" name="FluidComboBox should render with condensed styles if isCondensed is provided" time="0.022">
    </testcase>
    <testcase classname="FluidComboBox should display the menu of items when a user clicks on the input" name="FluidComboBox should display the menu of items when a user clicks on the input" time="0.146">
    </testcase>
    <testcase classname="FluidComboBox should call `onChange` each time an item is selected" name="FluidComboBox should call `onChange` each time an item is selected" time="0.326">
    </testcase>
    <testcase classname="FluidComboBox capture filter text events" name="FluidComboBox capture filter text events" time="0.084">
    </testcase>
    <testcase classname="FluidComboBox should render custom item components" name="FluidComboBox should render custom item components" time="0.019">
    </testcase>
    <testcase classname="FluidComboBox should let the user select an option by clicking on the option node" name="FluidComboBox should let the user select an option by clicking on the option node" time="0.166">
    </testcase>
    <testcase classname="FluidComboBox should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" name="FluidComboBox should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" time="0.008">
    </testcase>
    <testcase classname="FluidComboBox should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" name="FluidComboBox should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" time="0.006">
    </testcase>
    <testcase classname="FluidComboBox should display selected item found in `selectedItem` using an object type for the `selectedItem` prop" name="FluidComboBox should display selected item found in `selectedItem` using an object type for the `selectedItem` prop" time="0.004">
    </testcase>
    <testcase classname="FluidComboBox should display selected item found in `selectedItem` using a string type for the `selectedItem` prop" name="FluidComboBox should display selected item found in `selectedItem` using a string type for the `selectedItem` prop" time="0.005">
    </testcase>
    <testcase classname="FluidComboBox when disabled should not let the user edit the input node" name="FluidComboBox when disabled should not let the user edit the input node" time="0.028">
    </testcase>
    <testcase classname="FluidComboBox when disabled should not let the user expand the menu" name="FluidComboBox when disabled should not let the user expand the menu" time="0.023">
    </testcase>
    <testcase classname="FluidComboBox downshift quirks should set `inputValue` to an empty string if a false-y value is given" name="FluidComboBox downshift quirks should set `inputValue` to an empty string if a false-y value is given" time="0.005">
    </testcase>
    <testcase classname="FluidComboBox downshift quirks should only render one listbox at a time when multiple fluidcomboboxes are present" name="FluidComboBox downshift quirks should only render one listbox at a time when multiple fluidcomboboxes are present" time="0.213">
    </testcase>
  </testsuite>
  <testsuite name="FileUploaderItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:39" time="0.584" tests="4">
    <testcase classname="FileUploaderItem automated accessibility tests should have no axe violations with status uploading" name="FileUploaderItem automated accessibility tests should have no axe violations with status uploading" time="0.065">
    </testcase>
    <testcase classname="FileUploaderItem automated accessibility tests should have no axe violations with status edit" name="FileUploaderItem automated accessibility tests should have no axe violations with status edit" time="0.113">
    </testcase>
    <testcase classname="FileUploaderItem automated accessibility tests should have no axe violations with status complete" name="FileUploaderItem automated accessibility tests should have no axe violations with status complete" time="0.105">
    </testcase>
    <testcase classname="FileUploaderItem should support calling `onDelete` if the user interacts with the filename during editing" name="FileUploaderItem should support calling `onDelete` if the user interacts with the filename during editing" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="FileUploaderDropContainer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:39" time="0.552" tests="28">
    <testcase classname="FileUploaderDropContainer should not have axe violations" name="FileUploaderDropContainer should not have axe violations" time="0.064">
    </testcase>
    <testcase classname="FileUploaderDropContainer should support a custom class name on the drop area" name="FileUploaderDropContainer should support a custom class name on the drop area" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should have a unique id each time it is used" name="FileUploaderDropContainer should have a unique id each time it is used" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should render with the default labelText prop" name="FileUploaderDropContainer should render with the default labelText prop" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should render with multiple set to false by default" name="FileUploaderDropContainer should render with multiple set to false by default" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should reset the value of the input when the drop area is clicked" name="FileUploaderDropContainer should reset the value of the input when the drop area is clicked" time="0.005">
    </testcase>
    <testcase classname="FileUploaderDropContainer should call `onAddFiles` when a file is selected" name="FileUploaderDropContainer should call `onAddFiles` when a file is selected" time="0.013">
    </testcase>
    <testcase classname="FileUploaderDropContainer should mark invalid files using default pattern" name="FileUploaderDropContainer should mark invalid files using default pattern" time="0.005">
    </testcase>
    <testcase classname="FileUploaderDropContainer should be case insensitive when marking files invalid" name="FileUploaderDropContainer should be case insensitive when marking files invalid" time="0.002">
    </testcase>
    <testcase classname="FileUploaderDropContainer should not mark any invalid files using custom pattern" name="FileUploaderDropContainer should not mark any invalid files using custom pattern" time="0.005">
    </testcase>
    <testcase classname="FileUploaderDropContainer should not allow file selection when disabled" name="FileUploaderDropContainer should not allow file selection when disabled" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should filter files based on the accept prop" name="FileUploaderDropContainer should filter files based on the accept prop" time="0.006">
    </testcase>
    <testcase classname="FileUploaderDropContainer should call onClick when drop area is clicked" name="FileUploaderDropContainer should call onClick when drop area is clicked" time="0.003">
    </testcase>
    <testcase classname="FileUploaderDropContainer should reset input value when clicked after selecting files" name="FileUploaderDropContainer should reset input value when clicked after selecting files" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should call the onClick handler when the drop area is clicked" name="FileUploaderDropContainer should call the onClick handler when the drop area is clicked" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should handle the case when no files are added" name="FileUploaderDropContainer should handle the case when no files are added" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should have a properly associated label for accessibility" name="FileUploaderDropContainer should have a properly associated label for accessibility" time="0">
    </testcase>
    <testcase classname="FileUploaderDropContainer should not set active state on drag over when disabled" name="FileUploaderDropContainer should not set active state on drag over when disabled" time="0.007">
    </testcase>
    <testcase classname="FileUploaderDropContainer should not call onAddFiles when disabled" name="FileUploaderDropContainer should not call onAddFiles when disabled" time="0.004">
    </testcase>
    <testcase classname="FileUploaderDropContainer should initialize with default props" name="FileUploaderDropContainer should initialize with default props" time="0.002">
    </testcase>
    <testcase classname="FileUploaderDropContainer should reset input value after files are selected and clicked again" name="FileUploaderDropContainer should reset input value after files are selected and clicked again" time="0.003">
    </testcase>
    <testcase classname="FileUploaderDropContainer should not set active state when disabled on drag over" name="FileUploaderDropContainer should not set active state when disabled on drag over" time="0.003">
    </testcase>
    <testcase classname="FileUploaderDropContainer should return array of files marked as invalid if they dont match accepted types" name="FileUploaderDropContainer should return array of files marked as invalid if they dont match accepted types" time="0.004">
    </testcase>
    <testcase classname="FileUploaderDropContainer should render a label with custom labelText for screen readers" name="FileUploaderDropContainer should render a label with custom labelText for screen readers" time="0.006">
    </testcase>
    <testcase classname="FileUploaderDropContainer should prevent default action on Space key press" name="FileUploaderDropContainer should prevent default action on Space key press" time="0.003">
    </testcase>
    <testcase classname="FileUploaderDropContainer should trigger input click on Enter key press" name="FileUploaderDropContainer should trigger input click on Enter key press" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should return early when disabled" name="FileUploaderDropContainer should return early when disabled" time="0.001">
    </testcase>
    <testcase classname="FileUploaderDropContainer should only emit one file when multiple files are dropped and `multiple` is false" name="FileUploaderDropContainer should only emit one file when multiple files are dropped and `multiple` is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FeatureFlags" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.148" tests="13">
    <testcase classname="FeatureFlags should default to the global feature flag scope" name="FeatureFlags should default to the global feature flag scope" time="0.002">
    </testcase>
    <testcase classname="FeatureFlags should provide access to the feature flags for a scope through deprecated flags prop" name="FeatureFlags should provide access to the feature flags for a scope through deprecated flags prop" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should provide access to the feature flags for a scope" name="FeatureFlags should provide access to the feature flags for a scope" time="0">
    </testcase>
    <testcase classname="FeatureFlags should re-render when flags change" name="FeatureFlags should re-render when flags change" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should merge scopes and overwrite duplicate keys" name="FeatureFlags should merge scopes and overwrite duplicate keys" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should handle boolean props and flags object with no overlapping keys" name="FeatureFlags should handle boolean props and flags object with no overlapping keys" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should handle boolean props correctly when no flags object is provided" name="FeatureFlags should handle boolean props correctly when no flags object is provided" time="0">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-v12-tile-default-icons - enableV12TileDefaultIcons" name="FeatureFlags should support a prop for each feature flag enable-v12-tile-default-icons - enableV12TileDefaultIcons" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-v12-tile-radio-icons - enableV12TileRadioIcons" name="FeatureFlags should support a prop for each feature flag enable-v12-tile-radio-icons - enableV12TileRadioIcons" time="0.005">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-v12-overflowmenu - enableV12Overflowmenu" name="FeatureFlags should support a prop for each feature flag enable-v12-overflowmenu - enableV12Overflowmenu" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-treeview-controllable - enableTreeviewControllable" name="FeatureFlags should support a prop for each feature flag enable-treeview-controllable - enableTreeviewControllable" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-experimental-focus-wrap-without-sentinels - enableExperimentalFocusWrapWithoutSentinels" name="FeatureFlags should support a prop for each feature flag enable-experimental-focus-wrap-without-sentinels - enableExperimentalFocusWrapWithoutSentinels" time="0.001">
    </testcase>
    <testcase classname="FeatureFlags should support a prop for each feature flag enable-v12-dynamic-floating-styles - enableV12DynamicFloatingStyles" name="FeatureFlags should support a prop for each feature flag enable-v12-dynamic-floating-styles - enableV12DynamicFloatingStyles" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FileUploaderButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.331" tests="11">
    <testcase classname="FileUploaderButton automated accessibility tests should have no axe violations" name="FileUploaderButton automated accessibility tests should have no axe violations" time="0.036">
    </testcase>
    <testcase classname="FileUploaderButton should support a custom class name on the root element" name="FileUploaderButton should support a custom class name on the root element" time="0.003">
    </testcase>
    <testcase classname="FileUploaderButton should call `onClick` if the label is clicked" name="FileUploaderButton should call `onClick` if the label is clicked" time="0.002">
    </testcase>
    <testcase classname="FileUploaderButton should call `onChange` if the value of the input changes" name="FileUploaderButton should call `onChange` if the value of the input changes" time="0.002">
    </testcase>
    <testcase classname="FileUploaderButton should not support multiple files by default" name="FileUploaderButton should not support multiple files by default" time="0.002">
    </testcase>
    <testcase classname="FileUploaderButton should have a unique id" name="FileUploaderButton should have a unique id" time="0.001">
    </testcase>
    <testcase classname="FileUploaderButton should reset the input value when the label is clicked" name="FileUploaderButton should reset the input value when the label is clicked" time="0.002">
    </testcase>
    <testcase classname="FileUploaderButton should update the label text if it receives a new value from props" name="FileUploaderButton should update the label text if it receives a new value from props" time="0.006">
    </testcase>
    <testcase classname="FileUploaderButton FileUploaderButton label should update the label when a file is selected" name="FileUploaderButton FileUploaderButton label should update the label when a file is selected" time="0.001">
    </testcase>
    <testcase classname="FileUploaderButton FileUploaderButton label should update the label when multiple files are selected" name="FileUploaderButton FileUploaderButton label should update the label when multiple files are selected" time="0.001">
    </testcase>
    <testcase classname="FileUploaderButton FileUploaderButton label should not update the label when files are selected but `disableLabelChanges` is false" name="FileUploaderButton FileUploaderButton label should not update the label when files are selected but `disableLabelChanges` is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="FileUploader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.312" tests="8">
    <testcase classname="FileUploader should support a custom class name on the root element" name="FileUploader should support a custom class name on the root element" time="0.009">
    </testcase>
    <testcase classname="FileUploader should not update the label by default when selecting files" name="FileUploader should not update the label by default when selecting files" time="0.014">
    </testcase>
    <testcase classname="FileUploader should clear all uploaded files when `clearFiles` is called on a ref" name="FileUploader should clear all uploaded files when `clearFiles` is called on a ref" time="0.003">
    </testcase>
    <testcase classname="FileUploader should synchronize the filename status state when its prop changes" name="FileUploader should synchronize the filename status state when its prop changes" time="0.02">
    </testcase>
    <testcase classname="FileUploader should disable file input when `disabled` prop is true" name="FileUploader should disable file input when `disabled` prop is true" time="0.002">
    </testcase>
    <testcase classname="FileUploader should render with different button kinds" name="FileUploader should render with different button kinds" time="0.002">
    </testcase>
    <testcase classname="FileUploader should trigger `onDelete` when a file is removed" name="FileUploader should trigger `onDelete` when a file is removed" time="0.002">
    </testcase>
    <testcase classname="FileUploader should trigger `onChange` when files are selected" name="FileUploader should trigger `onChange` when files are selected" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="TableToolbarSearch" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.321" tests="13">
    <testcase classname="TableToolbarSearch renders as expected - Component API should render" name="TableToolbarSearch renders as expected - Component API should render" time="0.008">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableToolbarSearch renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect defaultExpanded prop" name="TableToolbarSearch renders as expected - Component API should respect defaultExpanded prop" time="0.001">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect disabled prop" name="TableToolbarSearch renders as expected - Component API should respect disabled prop" time="0.004">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect expanded prop" name="TableToolbarSearch renders as expected - Component API should respect expanded prop" time="0.001">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect labelText prop" name="TableToolbarSearch renders as expected - Component API should respect labelText prop" time="0.008">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect persistent prop" name="TableToolbarSearch renders as expected - Component API should respect persistent prop" time="0.007">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect placeholder prop" name="TableToolbarSearch renders as expected - Component API should respect placeholder prop" time="0.009">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect searchContainerClass prop" name="TableToolbarSearch renders as expected - Component API should respect searchContainerClass prop" time="0.001">
    </testcase>
    <testcase classname="TableToolbarSearch renders as expected - Component API should respect size prop" name="TableToolbarSearch renders as expected - Component API should respect size prop" time="0.001">
    </testcase>
    <testcase classname="TableToolbarSearch behaves as expected should call onBlur when expected" name="TableToolbarSearch behaves as expected should call onBlur when expected" time="0.048">
    </testcase>
    <testcase classname="TableToolbarSearch behaves as expected should call onChange when expected" name="TableToolbarSearch behaves as expected should call onChange when expected" time="0.033">
    </testcase>
    <testcase classname="TableToolbarSearch behaves as expected should expand/contract as normal when no onBlur/onFocus provided" name="TableToolbarSearch behaves as expected should expand/contract as normal when no onBlur/onFocus provided" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="DataTable exports" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.352" tests="23">
    <testcase classname="DataTable exports should export DataTable by default" name="DataTable exports should export DataTable by default" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: Table" name="DataTable exports should have a named export for Component: Table" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableActionList" name="DataTable exports should have a named export for Component: TableActionList" time="0.001">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableBatchAction" name="DataTable exports should have a named export for Component: TableBatchAction" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableBatchActions" name="DataTable exports should have a named export for Component: TableBatchActions" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableBody" name="DataTable exports should have a named export for Component: TableBody" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableCell" name="DataTable exports should have a named export for Component: TableCell" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableContainer" name="DataTable exports should have a named export for Component: TableContainer" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableDecoratorRow" name="DataTable exports should have a named export for Component: TableDecoratorRow" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableExpandHeader" name="DataTable exports should have a named export for Component: TableExpandHeader" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableExpandRow" name="DataTable exports should have a named export for Component: TableExpandRow" time="0.001">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableExpandedRow" name="DataTable exports should have a named export for Component: TableExpandedRow" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableHead" name="DataTable exports should have a named export for Component: TableHead" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableHeader" name="DataTable exports should have a named export for Component: TableHeader" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableRow" name="DataTable exports should have a named export for Component: TableRow" time="0.001">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableSelectAll" name="DataTable exports should have a named export for Component: TableSelectAll" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableSelectRow" name="DataTable exports should have a named export for Component: TableSelectRow" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableSlugRow" name="DataTable exports should have a named export for Component: TableSlugRow" time="0.001">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableToolbar" name="DataTable exports should have a named export for Component: TableToolbar" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableToolbarAction" name="DataTable exports should have a named export for Component: TableToolbarAction" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableToolbarContent" name="DataTable exports should have a named export for Component: TableToolbarContent" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableToolbarMenu" name="DataTable exports should have a named export for Component: TableToolbarMenu" time="0">
    </testcase>
    <testcase classname="DataTable exports should have a named export for Component: TableToolbarSearch" name="DataTable exports should have a named export for Component: TableToolbarSearch" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TableToolbarMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.284" tests="4">
    <testcase classname="TableToolbarMenu renders as expected - Component API should render" name="TableToolbarMenu renders as expected - Component API should render" time="0.016">
    </testcase>
    <testcase classname="TableToolbarMenu renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableToolbarMenu renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.015">
    </testcase>
    <testcase classname="TableToolbarMenu renders as expected - Component API should respect iconDescription prop" name="TableToolbarMenu renders as expected - Component API should respect iconDescription prop" time="0.016">
    </testcase>
    <testcase classname="TableToolbarMenu renders as expected - Component API should respect renderIcon prop" name="TableToolbarMenu renders as expected - Component API should respect renderIcon prop" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Dropdown" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:40" time="0.829" tests="26">
    <testcase classname="Dropdown should initially render with the menu not open" name="Dropdown should initially render with the menu not open" time="0.028">
    </testcase>
    <testcase classname="Dropdown should let the user open the menu by clicking on the control" name="Dropdown should let the user open the menu by clicking on the control" time="0.039">
    </testcase>
    <testcase classname="Dropdown should render with strings as items" name="Dropdown should render with strings as items" time="0.028">
    </testcase>
    <testcase classname="Dropdown should render custom item components" name="Dropdown should render custom item components" time="0.038">
    </testcase>
    <testcase classname="Dropdown should render selectedItem as an element" name="Dropdown should render selectedItem as an element" time="0.01">
    </testcase>
    <testcase classname="Dropdown should render selectedItem as an element of type number" name="Dropdown should render selectedItem as an element of type number" time="0.038">
    </testcase>
    <testcase classname="Dropdown should render when defaultItemToString passed with null value" name="Dropdown should render when defaultItemToString passed with null value" time="0.003">
    </testcase>
    <testcase classname="Dropdown title renders a title" name="Dropdown title renders a title" time="0.005">
    </testcase>
    <testcase classname="Dropdown title has the expected classes" name="Dropdown title has the expected classes" time="0.007">
    </testcase>
    <testcase classname="Dropdown helper renders a helper" name="Dropdown helper renders a helper" time="0.005">
    </testcase>
    <testcase classname="Dropdown helper renders children as expected" name="Dropdown helper renders children as expected" time="0.012">
    </testcase>
    <testcase classname="Dropdown should let the user select an option by clicking on the option node" name="Dropdown should let the user select an option by clicking on the option node" time="0.133">
    </testcase>
    <testcase classname="Dropdown should not open on arrowUp" name="Dropdown should not open on arrowUp" time="0.058">
    </testcase>
    <testcase classname="Dropdown should respect readOnly prop" name="Dropdown should respect readOnly prop" time="0.058">
    </testcase>
    <testcase classname="Dropdown should respect readOnly prop with false and respect call setTimeout function" name="Dropdown should respect readOnly prop with false and respect call setTimeout function" time="0.073">
    </testcase>
    <testcase classname="Dropdown should respect readOnly prop with false argument and respect clear activated Timeout" name="Dropdown should respect readOnly prop with false argument and respect clear activated Timeout" time="0.014">
    </testcase>
    <testcase classname="Dropdown should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" name="Dropdown should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" time="0.008">
    </testcase>
    <testcase classname="Dropdown should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" name="Dropdown should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" time="0.004">
    </testcase>
    <testcase classname="Dropdown Component API should accept a `ref` for the underlying button element" name="Dropdown Component API should accept a `ref` for the underlying button element" time="0.003">
    </testcase>
    <testcase classname="Dropdown Component API should respect decorator prop" name="Dropdown Component API should respect decorator prop" time="0.012">
    </testcase>
    <testcase classname="Dropdown Component API should respect deprecated slug prop" name="Dropdown Component API should respect deprecated slug prop" time="0.013">
    </testcase>
    <testcase classname="Dropdown should initially render with the menu not open " name="Dropdown should initially render with the menu not open " time="0.009">
    </testcase>
    <testcase classname="DropdownSkeleton Renders as expected Has the expected classes" name="DropdownSkeleton Renders as expected Has the expected classes" time="0.002">
    </testcase>
    <testcase classname="Test useEffect  for auto-align features" name="Test useEffect  for auto-align features" time="0.037">
    </testcase>
    <testcase classname="Test useEffect  should add label props when `titleText` is a string" name="Test useEffect  should add label props when `titleText` is a string" time="0.002">
    </testcase>
    <testcase classname="Test useEffect  should not add label props when `titleText` is an element" name="Test useEffect  should not add label props when `titleText` is an element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="FileUploaderSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:39" time="2.134" tests="3">
    <testcase classname="FileUploaderSkeleton automated accessibility testing should have no axe violations" name="FileUploaderSkeleton automated accessibility testing should have no axe violations" time="0.042">
    </testcase>
    <testcase classname="FileUploaderSkeleton automated accessibility testing should have no AC violations" name="FileUploaderSkeleton automated accessibility testing should have no AC violations" time="1.764">
    </testcase>
    <testcase classname="FileUploaderSkeleton should accept a custom className prop on the root node" name="FileUploaderSkeleton should accept a custom className prop on the root node" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="DataTable.TableSelectRow" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.58" tests="11">
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should render" name="DataTable.TableSelectRow renders as expected - Component API should render" time="0.005">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect checked prop" name="DataTable.TableSelectRow renders as expected - Component API should respect checked prop" time="0.007">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect deprecated ariaLabel prop if aria-label is not defined" name="DataTable.TableSelectRow renders as expected - Component API should respect deprecated ariaLabel prop if aria-label is not defined" time="0.001">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should give priority to new aria-label compared to old ariaLabel" name="DataTable.TableSelectRow renders as expected - Component API should give priority to new aria-label compared to old ariaLabel" time="0.001">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should support a custom `className` prop on the outermost element" name="DataTable.TableSelectRow renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect disabled prop" name="DataTable.TableSelectRow renders as expected - Component API should respect disabled prop" time="0.011">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect id prop" name="DataTable.TableSelectRow renders as expected - Component API should respect id prop" time="0.011">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect name prop" name="DataTable.TableSelectRow renders as expected - Component API should respect name prop" time="0.128">
    </testcase>
    <testcase classname="DataTable.TableSelectRow renders as expected - Component API should respect radio prop" name="DataTable.TableSelectRow renders as expected - Component API should respect radio prop" time="0.012">
    </testcase>
    <testcase classname="DataTable.TableSelectRow behaves as expected should invoke `onSelect` when clicked" name="DataTable.TableSelectRow behaves as expected should invoke `onSelect` when clicked" time="0.047">
    </testcase>
    <testcase classname="DataTable.TableSelectRow behaves as expected should invoke `onChange` when expected" name="DataTable.TableSelectRow behaves as expected should invoke `onChange` when expected" time="0.085">
    </testcase>
  </testsuite>
  <testsuite name="TableRow" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.709" tests="3">
    <testcase classname="TableRow should support a custom className on the outermost element" name="TableRow should support a custom className on the outermost element" time="0.102">
    </testcase>
    <testcase classname="TableRow should spread props onto the outermost element" name="TableRow should spread props onto the outermost element" time="0.006">
    </testcase>
    <testcase classname="TableRow should forward refs to the rendered Tablerow element" name="TableRow should forward refs to the rendered Tablerow element" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="TableHead" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.346" tests="2">
    <testcase classname="TableHead should support a custom className on the outermost element" name="TableHead should support a custom className on the outermost element" time="0.004">
    </testcase>
    <testcase classname="TableHead should spread props onto the outermost element" name="TableHead should spread props onto the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TableSelectAll" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.904" tests="11">
    <testcase classname="TableSelectAll renders as expected - Component API should render with the correct classes" name="TableSelectAll renders as expected - Component API should render with the correct classes" time="0.058">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect the deprecated ariaLabel prop" name="TableSelectAll renders as expected - Component API should respect the deprecated ariaLabel prop" time="0.012">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect aria-label prop" name="TableSelectAll renders as expected - Component API should respect aria-label prop" time="0.014">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should give priority to new aria-label compared to old ariaLabel" name="TableSelectAll renders as expected - Component API should give priority to new aria-label compared to old ariaLabel" time="0.008">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect checked prop" name="TableSelectAll renders as expected - Component API should respect checked prop" time="0.022">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableSelectAll renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.039">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect disabled prop" name="TableSelectAll renders as expected - Component API should respect disabled prop" time="0.029">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect id prop" name="TableSelectAll renders as expected - Component API should respect id prop" time="0.041">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect indeterminate prop" name="TableSelectAll renders as expected - Component API should respect indeterminate prop" time="0.016">
    </testcase>
    <testcase classname="TableSelectAll renders as expected - Component API should respect name prop" name="TableSelectAll renders as expected - Component API should respect name prop" time="0.022">
    </testcase>
    <testcase classname="TableSelectAll behaves as expected should respect onSelect prop" name="TableSelectAll behaves as expected should respect onSelect prop" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="TableHeader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:41" time="0.631" tests="11">
    <testcase classname="TableHeader renders as expected - Component API should render" name="TableHeader renders as expected - Component API should render" time="0.01">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should spread extra props onto outermost element" name="TableHeader renders as expected - Component API should spread extra props onto outermost element" time="0.003">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should render children as expected" name="TableHeader renders as expected - Component API should render children as expected" time="0.001">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableHeader renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect colSpan prop" name="TableHeader renders as expected - Component API should respect colSpan prop" time="0">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect id prop" name="TableHeader renders as expected - Component API should respect id prop" time="0.001">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect isSortHeader prop" name="TableHeader renders as expected - Component API should respect isSortHeader prop" time="0.002">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect isSortable prop" name="TableHeader renders as expected - Component API should respect isSortable prop" time="0.001">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect scope prop" name="TableHeader renders as expected - Component API should respect scope prop" time="0.001">
    </testcase>
    <testcase classname="TableHeader renders as expected - Component API should respect translateWithId prop" name="TableHeader renders as expected - Component API should respect translateWithId prop" time="0.001">
    </testcase>
    <testcase classname="TableHeader behaves as expected should call onClick when expected" name="TableHeader behaves as expected should call onClick when expected" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="TableContainer" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.252" tests="8">
    <testcase classname="TableContainer should set the max-width class if stickyHeader is true" name="TableContainer should set the max-width class if stickyHeader is true" time="0.005">
    </testcase>
    <testcase classname="TableContainer should set the static class if useStaticWidth is true" name="TableContainer should set the static class if useStaticWidth is true" time="0.001">
    </testcase>
    <testcase classname="TableContainer should support a custom className on the outermost element" name="TableContainer should support a custom className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="TableContainer should spread props onto the &lt;table&gt; element" name="TableContainer should spread props onto the &lt;table&gt; element" time="0">
    </testcase>
    <testcase classname="TableContainer Header should render a header with only a `title`" name="TableContainer Header should render a header with only a `title`" time="0.001">
    </testcase>
    <testcase classname="TableContainer Header should render a header with only a `description`" name="TableContainer Header should render a header with only a `description`" time="0.001">
    </testcase>
    <testcase classname="TableContainer Header should render a header with both a `title` and a `description`" name="TableContainer Header should render a header with both a `title` and a `description`" time="0.001">
    </testcase>
    <testcase classname="TableContainer Header should not render a header when neither a `title` nor a `description` is provided" name="TableContainer Header should not render a header when neither a `title` nor a `description` is provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DataTable.TableExpandRow" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.45" tests="6">
    <testcase classname="DataTable.TableExpandRow renders as expected - Component API should render" name="DataTable.TableExpandRow renders as expected - Component API should render" time="0.012">
    </testcase>
    <testcase classname="DataTable.TableExpandRow renders as expected - Component API should respect ariaLabel prop" name="DataTable.TableExpandRow renders as expected - Component API should respect ariaLabel prop" time="0.032">
    </testcase>
    <testcase classname="DataTable.TableExpandRow renders as expected - Component API should support a custom `className` prop on the outermost element" name="DataTable.TableExpandRow renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.008">
    </testcase>
    <testcase classname="DataTable.TableExpandRow renders as expected - Component API should respect expandHeader prop" name="DataTable.TableExpandRow renders as expected - Component API should respect expandHeader prop" time="0.011">
    </testcase>
    <testcase classname="DataTable.TableExpandRow renders as expected - Component API should respect isExpanded prop" name="DataTable.TableExpandRow renders as expected - Component API should respect isExpanded prop" time="0.005">
    </testcase>
    <testcase classname="DataTable.TableExpandRow behaves as expected should expand when button is clicked and onExpand to be called" name="DataTable.TableExpandRow behaves as expected should expand when button is clicked and onExpand to be called" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="TableCell" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.284" tests="3">
    <testcase classname="TableCell should support a custom className on the outermost element" name="TableCell should support a custom className on the outermost element" time="0.004">
    </testcase>
    <testcase classname="TableCell should spread props onto the outermost element" name="TableCell should spread props onto the outermost element" time="0.002">
    </testcase>
    <testcase classname="TableCell should forward refs to the rendered cell element" name="TableCell should forward refs to the rendered cell element" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="TableBody" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.217" tests="2">
    <testcase classname="TableBody should support a custom className on the outermost element" name="TableBody should support a custom className on the outermost element" time="0.002">
    </testcase>
    <testcase classname="TableBody should spread props onto the outermost element" name="TableBody should spread props onto the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TableBatchActions" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.279" tests="5">
    <testcase classname="TableBatchActions should set the active class when `shouldShowBatchActions` is true" name="TableBatchActions should set the active class when `shouldShowBatchActions` is true" time="0.003">
    </testcase>
    <testcase classname="TableBatchActions should support a custom className on the outermost element" name="TableBatchActions should support a custom className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="TableBatchActions should spread props onto the outermost element" name="TableBatchActions should spread props onto the outermost element" time="0">
    </testcase>
    <testcase classname="TableBatchActions should show a different message depending on count of items selected" name="TableBatchActions should show a different message depending on count of items selected" time="0.005">
    </testcase>
    <testcase classname="TableBatchActions should invoke the `onCancel` hook if the action is canceled" name="TableBatchActions should invoke the `onCancel` hook if the action is canceled" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="TableBatchAction" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="0.259" tests="3">
    <testcase classname="TableBatchAction should render a &lt;button&gt;" name="TableBatchAction should render a &lt;button&gt;" time="0.008">
    </testcase>
    <testcase classname="TableBatchAction should support custom icons through `renderIcon`" name="TableBatchAction should support custom icons through `renderIcon`" time="0.001">
    </testcase>
    <testcase classname="TableBatchAction should support labeling the button with `iconDescription`" name="TableBatchAction should support labeling the button with `iconDescription`" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="TableActionList" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="0.162" tests="2">
    <testcase classname="TableActionList should support a custom className on the outermost element" name="TableActionList should support a custom className on the outermost element" time="0.002">
    </testcase>
    <testcase classname="TableActionList should spread props onto the outermost element" name="TableActionList should spread props onto the outermost element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Table" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="0.37" tests="16">
    <testcase classname="Table should support size=`xs`" name="Table should support size=`xs`" time="0.006">
    </testcase>
    <testcase classname="Table should support size=`sm`" name="Table should support size=`sm`" time="0.007">
    </testcase>
    <testcase classname="Table should support size=`md`" name="Table should support size=`md`" time="0.03">
    </testcase>
    <testcase classname="Table should support size=`lg`" name="Table should support size=`lg`" time="0.006">
    </testcase>
    <testcase classname="Table should support size=`xl`" name="Table should support size=`xl`" time="0.006">
    </testcase>
    <testcase classname="Table should support a custom className on the &lt;table&gt; element" name="Table should support a custom className on the &lt;table&gt; element" time="0.004">
    </testcase>
    <testcase classname="Table should spread props onto the &lt;table&gt; element" name="Table should spread props onto the &lt;table&gt; element" time="0.004">
    </testcase>
    <testcase classname="Table with zebra stripes should set the zebra class with `useZebraStyles`" name="Table with zebra stripes should set the zebra class with `useZebraStyles`" time="0.007">
    </testcase>
    <testcase classname="Table with static width should set the static class with `useStaticWidth`" name="Table with static width should set the static class with `useStaticWidth`" time="0.004">
    </testcase>
    <testcase classname="Table with sticky header should set the sticky header class with `stickyHeader`" name="Table with sticky header should set the sticky header class with `stickyHeader`" time="0.015">
    </testcase>
    <testcase classname="Table with overflow menu should set the visible overflow menu class with `overflowMenuOnHover`" name="Table with overflow menu should set the visible overflow menu class with `overflowMenuOnHover`" time="0.018">
    </testcase>
    <testcase classname="Table experimentalAutoAlign should align content top when property passed in and content is wrapping" name="Table experimentalAutoAlign should align content top when property passed in and content is wrapping" time="0.009">
    </testcase>
    <testcase classname="Table experimentalAutoAlign should not align content top when property not passed in and content is wrapping" name="Table experimentalAutoAlign should not align content top when property not passed in and content is wrapping" time="0.009">
    </testcase>
    <testcase classname="Table experimentalAutoAlign should not align content top when property  passed in and content is not wrapping" name="Table experimentalAutoAlign should not align content top when property  passed in and content is not wrapping" time="0.024">
    </testcase>
    <testcase classname="Table experimentalAutoAlign should only align header top when property passed in and header content is wrapping but body content is not wrapping" name="Table experimentalAutoAlign should only align header top when property passed in and header content is wrapping but body content is not wrapping" time="0.017">
    </testcase>
    <testcase classname="Table experimentalAutoAlign should only align body top when property passed in and body content is wrapping but header content is not wrapping" name="Table experimentalAutoAlign should only align body top when property passed in and body content is wrapping but header content is not wrapping" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="ContainedList" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="0.368" tests="17">
    <testcase classname="ContainedList should apply correct class for kind=&quot;on-page&quot;" name="ContainedList should apply correct class for kind=&quot;on-page&quot;" time="0.003">
    </testcase>
    <testcase classname="ContainedList should apply correct class for kind=&quot;disclosed&quot;" name="ContainedList should apply correct class for kind=&quot;disclosed&quot;" time="0">
    </testcase>
    <testcase classname="ContainedList should apply  inset class when isInset is true" name="ContainedList should apply  inset class when isInset is true" time="0.001">
    </testcase>
    <testcase classname="ContainedList should apply not apply inset class when isInset is false" name="ContainedList should apply not apply inset class when isInset is false" time="0.001">
    </testcase>
    <testcase classname="ContainedList list and label ids match" name="ContainedList list and label ids match" time="0.042">
    </testcase>
    <testcase classname="ContainedList renders props.label" name="ContainedList renders props.label" time="0.004">
    </testcase>
    <testcase classname="ContainedList supports additional css class names" name="ContainedList supports additional css class names" time="0.01">
    </testcase>
    <testcase classname="ContainedList should render ExpandableSearch as an action" name="ContainedList should render ExpandableSearch as an action" time="0.014">
    </testcase>
    <testcase classname="ContainedList should render search as a child" name="ContainedList should render search as a child" time="0.005">
    </testcase>
    <testcase classname="ContainedList should not render a child &quot;Search&quot; component when an &quot;ExpandableSearch&quot; component is passed in as an action" name="ContainedList should not render a child &quot;Search&quot; component when an &quot;ExpandableSearch&quot; component is passed in as an action" time="0.013">
    </testcase>
    <testcase classname="ContainedList should render Search as the first child" name="ContainedList should render Search as the first child" time="0.018">
    </testcase>
    <testcase classname="ContainedList should handle action" name="ContainedList should handle action" time="0.007">
    </testcase>
    <testcase classname="ContainedListItem renders props.children" name="ContainedListItem renders props.children" time="0.014">
    </testcase>
    <testcase classname="ContainedListItem supports additional css class names" name="ContainedListItem supports additional css class names" time="0.027">
    </testcase>
    <testcase classname="ContainedListItem renders props.action adjacent to content" name="ContainedListItem renders props.action adjacent to content" time="0.015">
    </testcase>
    <testcase classname="ContainedListItem supports props.renderIcon" name="ContainedListItem supports props.renderIcon" time="0.003">
    </testcase>
    <testcase classname="ContainedListItem interactive renders content as button" name="ContainedListItem interactive renders content as button" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="BreadcrumbItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="0.268" tests="1">
    <testcase classname="BreadcrumbItem Component API should accept a `ref` for the outermost node" name="BreadcrumbItem Component API should accept a `ref` for the outermost node" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="BreadcrumbSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="0.219" tests="2">
    <testcase classname="BreadcrumbSkeleton should support a custom `className` prop on the outermost element" name="BreadcrumbSkeleton should support a custom `className` prop on the outermost element" time="0.002">
    </testcase>
    <testcase classname="BreadcrumbSkeleton should spread additional props on the outermost element" name="BreadcrumbSkeleton should spread additional props on the outermost element" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="TableExpandHeader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:42" time="1.796" tests="8">
    <testcase classname="TableExpandHeader renders as expected - Component API should render" name="TableExpandHeader renders as expected - Component API should render" time="0.007">
    </testcase>
    <testcase classname="TableExpandHeader renders as expected - Component API should respect aria-label prop" name="TableExpandHeader renders as expected - Component API should respect aria-label prop" time="0.008">
    </testcase>
    <testcase classname="TableExpandHeader renders as expected - Component API should support a custom `className` prop on the outermost element" name="TableExpandHeader renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.014">
    </testcase>
    <testcase classname="TableExpandHeader renders as expected - Component API should respect enableToggle prop" name="TableExpandHeader renders as expected - Component API should respect enableToggle prop" time="0.012">
    </testcase>
    <testcase classname="TableExpandHeader renders as expected - Component API should respect expandIconDescription prop" name="TableExpandHeader renders as expected - Component API should respect expandIconDescription prop" time="0.004">
    </testcase>
    <testcase classname="TableExpandHeader renders as expected - Component API should respect id prop" name="TableExpandHeader renders as expected - Component API should respect id prop" time="0.01">
    </testcase>
    <testcase classname="TableExpandHeader behaves as expected should call onExpand" name="TableExpandHeader behaves as expected should call onExpand" time="0.055">
    </testcase>
    <testcase classname="TableExpandHeader behaves as expected should update toggle button" name="TableExpandHeader behaves as expected should update toggle button" time="0.268">
    </testcase>
  </testsuite>
  <testsuite name="CodeSnippet" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:44" time="0.419" tests="11">
    <testcase classname="CodeSnippet should use the appropriate snippet class when it is type single" name="CodeSnippet should use the appropriate snippet class when it is type single" time="0.013">
    </testcase>
    <testcase classname="CodeSnippet should use the appropriate snippet class when it is type multi" name="CodeSnippet should use the appropriate snippet class when it is type multi" time="0.003">
    </testcase>
    <testcase classname="CodeSnippet should use the appropriate snippet class when it is type inline" name="CodeSnippet should use the appropriate snippet class when it is type inline" time="0.002">
    </testcase>
    <testcase classname="CodeSnippet should render children as expected" name="CodeSnippet should render children as expected" time="0.005">
    </testcase>
    <testcase classname="CodeSnippet should allow custom classes to be applied when passed in via className" name="CodeSnippet should allow custom classes to be applied when passed in via className" time="0.017">
    </testcase>
    <testcase classname="CodeSnippet should allow hiding the copy button" name="CodeSnippet should allow hiding the copy button" time="0.002">
    </testcase>
    <testcase classname="CodeSnippet should set disabled on copy button if it is passed via props" name="CodeSnippet should set disabled on copy button if it is passed via props" time="0.008">
    </testcase>
    <testcase classname="CodeSnippet events should call the click handler when the copy button is clicked" name="CodeSnippet events should call the click handler when the copy button is clicked" time="0.029">
    </testcase>
    <testcase classname="CodeSnippet events should call the click handler with type inline" name="CodeSnippet events should call the click handler with type inline" time="0.025">
    </testcase>
    <testcase classname="Show more button should not have show more button when less then 15 rows" name="Show more button should not have show more button when less then 15 rows" time="0.009">
    </testcase>
    <testcase classname="Show more button should not have show more button when exactly 15 rows" name="Show more button should not have show more button when exactly 15 rows" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ChatButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:44" time="0.173" tests="13">
    <testcase classname="ChatButton should support rendering elements within the ChatButton through the `children` prop" name="ChatButton should support rendering elements within the ChatButton through the `children` prop" time="0.008">
    </testcase>
    <testcase classname="ChatButton should support a custom className on the outermost element" name="ChatButton should support a custom className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="ChatButton should use the disabled prop to set disabled on the &lt;ChatButton&gt;" name="ChatButton should use the disabled prop to set disabled on the &lt;ChatButton&gt;" time="0.005">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of kind: `primary`" name="ChatButton should set the expected classes for the ChatButton of kind: `primary`" time="0.006">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of kind: `secondary`" name="ChatButton should set the expected classes for the ChatButton of kind: `secondary`" time="0.002">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of kind: `ghost`" name="ChatButton should set the expected classes for the ChatButton of kind: `ghost`" time="0">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of kind: `danger`" name="ChatButton should set the expected classes for the ChatButton of kind: `danger`" time="0.001">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of kind: `tertiary`" name="ChatButton should set the expected classes for the ChatButton of kind: `tertiary`" time="0">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of size: `sm`" name="ChatButton should set the expected classes for the ChatButton of size: `sm`" time="0.002">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of size: `md`" name="ChatButton should set the expected classes for the ChatButton of size: `md`" time="0.004">
    </testcase>
    <testcase classname="ChatButton should set the expected classes for the ChatButton of size: `lg`" name="ChatButton should set the expected classes for the ChatButton of size: `lg`" time="0.001">
    </testcase>
    <testcase classname="ChatButton should set kind=ghost and size=sm if isQuickAction is set on the &lt;ChatButton&gt;" name="ChatButton should set kind=ghost and size=sm if isQuickAction is set on the &lt;ChatButton&gt;" time="0.003">
    </testcase>
    <testcase classname="ChatButton should not allow sizes larger than lg on the &lt;ChatButton&gt;" name="ChatButton should not allow sizes larger than lg on the &lt;ChatButton&gt;" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Breadcrumb" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="1.481" tests="10">
    <testcase classname="Breadcrumb should accept a `aria-label` for nav element" name="Breadcrumb should accept a `aria-label` for nav element" time="0.002">
    </testcase>
    <testcase classname="Breadcrumb should provide a default `aria-label` for nav element" name="Breadcrumb should provide a default `aria-label` for nav element" time="0.001">
    </testcase>
    <testcase classname="Breadcrumb should accept `children` of BreadcrumbItem" name="Breadcrumb should accept `children` of BreadcrumbItem" time="0.001">
    </testcase>
    <testcase classname="Breadcrumb should accept a `noTrailingSlash` and omit the trailing slash" name="Breadcrumb should accept a `noTrailingSlash` and omit the trailing slash" time="0.008">
    </testcase>
    <testcase classname="Breadcrumb should respect size prop" name="Breadcrumb should respect size prop" time="0.002">
    </testcase>
    <testcase classname="Breadcrumb should accept a `className` for outermost DOM node" name="Breadcrumb should accept a `className` for outermost DOM node" time="0.001">
    </testcase>
    <testcase classname="Breadcrumb should apply additional props to the outermost element" name="Breadcrumb should apply additional props to the outermost element" time="0">
    </testcase>
    <testcase classname="Breadcrumb should accept a `ref` for the outermost element" name="Breadcrumb should accept a `ref` for the outermost element" time="0.001">
    </testcase>
    <testcase classname="Breadcrumb automated verification testing should have no aXe violations" name="Breadcrumb automated verification testing should have no aXe violations" time="0.062">
    </testcase>
    <testcase classname="Breadcrumb automated verification testing should have no AC violations" name="Breadcrumb automated verification testing should have no AC violations" time="1.201">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="0.425" tests="19">
    <testcase classname="Checkbox should set the `id` on the &lt;input&gt; element" name="Checkbox should set the `id` on the &lt;input&gt; element" time="0.013">
    </testcase>
    <testcase classname="Checkbox should label the input by the given labelText" name="Checkbox should label the input by the given labelText" time="0.001">
    </testcase>
    <testcase classname="Checkbox should use defaultChecked to set the default value of the &lt;input&gt; checkbox" name="Checkbox should use defaultChecked to set the default value of the &lt;input&gt; checkbox" time="0.004">
    </testcase>
    <testcase classname="Checkbox should support a custom `className` prop on the outermost element" name="Checkbox should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="Checkbox should support a `ref` that is placed on the &lt;input&gt; element" name="Checkbox should support a `ref` that is placed on the &lt;input&gt; element" time="0.003">
    </testcase>
    <testcase classname="Checkbox should disable the &lt;input&gt; if disabled is provided as a prop" name="Checkbox should disable the &lt;input&gt; if disabled is provided as a prop" time="0.011">
    </testcase>
    <testcase classname="Checkbox should set checked on the &lt;input&gt; if checked is provided as a prop" name="Checkbox should set checked on the &lt;input&gt; if checked is provided as a prop" time="0.004">
    </testcase>
    <testcase classname="Checkbox should hide the label if hideLabel is provided as a prop" name="Checkbox should hide the label if hideLabel is provided as a prop" time="0.001">
    </testcase>
    <testcase classname="Checkbox should render helperText" name="Checkbox should render helperText" time="0.002">
    </testcase>
    <testcase classname="Checkbox should set data-invalid when invalid prop is true" name="Checkbox should set data-invalid when invalid prop is true" time="0.018">
    </testcase>
    <testcase classname="Checkbox should display invalidText if invalid prop is true" name="Checkbox should display invalidText if invalid prop is true" time="0.012">
    </testcase>
    <testcase classname="Checkbox should respect readOnly prop" name="Checkbox should respect readOnly prop" time="0.004">
    </testcase>
    <testcase classname="Checkbox should respect warn prop" name="Checkbox should respect warn prop" time="0.022">
    </testcase>
    <testcase classname="Checkbox should display warnText if warn prop is true" name="Checkbox should display warnText if warn prop is true" time="0.004">
    </testcase>
    <testcase classname="Checkbox should call the `onChange` prop when the &lt;input&gt; value changes" name="Checkbox should call the `onChange` prop when the &lt;input&gt; value changes" time="0.039">
    </testcase>
    <testcase classname="Checkbox should NOT call the `onChange` prop when readonly" name="Checkbox should NOT call the `onChange` prop when readonly" time="0.03">
    </testcase>
    <testcase classname="Checkbox should respect deprecated slug prop" name="Checkbox should respect deprecated slug prop" time="0.008">
    </testcase>
    <testcase classname="Checkbox should respect decorator prop" name="Checkbox should respect decorator prop" time="0.006">
    </testcase>
    <testcase classname="Checkbox should set size to &quot;md&quot; when decorator kind is &quot;inline&quot;" name="Checkbox should set size to &quot;md&quot; when decorator kind is &quot;inline&quot;" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Button" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="0.362" tests="31">
    <testcase classname="Button should support rendering elements within the button through the `children` prop" name="Button should support rendering elements within the button through the `children` prop" time="0.005">
    </testcase>
    <testcase classname="Button should support a custom tabIndex through props" name="Button should support a custom tabIndex through props" time="0.015">
    </testcase>
    <testcase classname="Button should support a custom className on the outermost element" name="Button should support a custom className on the outermost element" time="0.002">
    </testcase>
    <testcase classname="Button should render an element with the button role" name="Button should render an element with the button role" time="0.01">
    </testcase>
    <testcase classname="Button should use the disabled prop to set disabled on the &lt;button&gt;" name="Button should use the disabled prop to set disabled on the &lt;button&gt;" time="0.019">
    </testcase>
    <testcase classname="Button should render with a default button type of button" name="Button should render with a default button type of button" time="0.004">
    </testcase>
    <testcase classname="Button it should support changing the button type to button with the `type` prop" name="Button it should support changing the button type to button with the `type` prop" time="0.009">
    </testcase>
    <testcase classname="Button it should support changing the button type to submit with the `type` prop" name="Button it should support changing the button type to submit with the `type` prop" time="0.004">
    </testcase>
    <testcase classname="Button it should support changing the button type to reset with the `type` prop" name="Button it should support changing the button type to reset with the `type` prop" time="0.006">
    </testcase>
    <testcase classname="Button should render as an element with the role of `link` when the `href` prop is used" name="Button should render as an element with the role of `link` when the `href` prop is used" time="0.013">
    </testcase>
    <testcase classname="Button should support rendering as a custom element with the `as` prop" name="Button should support rendering as a custom element with the `as` prop" time="0.001">
    </testcase>
    <testcase classname="Button should not error on tooltipAlignment even when hasIconOnly=false" name="Button should not error on tooltipAlignment even when hasIconOnly=false" time="0.006">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `primary`" name="Button should set the expected classes for the button of kind: `primary`" time="0.003">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `secondary`" name="Button should set the expected classes for the button of kind: `secondary`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `ghost`" name="Button should set the expected classes for the button of kind: `ghost`" time="0.001">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `danger`" name="Button should set the expected classes for the button of kind: `danger`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `danger--primary`" name="Button should set the expected classes for the button of kind: `danger--primary`" time="0.001">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `danger--ghost`" name="Button should set the expected classes for the button of kind: `danger--ghost`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `danger--tertiary`" name="Button should set the expected classes for the button of kind: `danger--tertiary`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of kind: `tertiary`" name="Button should set the expected classes for the button of kind: `tertiary`" time="0.001">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of size: `sm`" name="Button should set the expected classes for the button of size: `sm`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of size: `md`" name="Button should set the expected classes for the button of size: `md`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of size: `lg`" name="Button should set the expected classes for the button of size: `lg`" time="0.001">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of size: `xl`" name="Button should set the expected classes for the button of size: `xl`" time="0">
    </testcase>
    <testcase classname="Button should set the expected classes for the button of size: `2xl`" name="Button should set the expected classes for the button of size: `2xl`" time="0.002">
    </testcase>
    <testcase classname="Button Button with Icon variant should render the given icon within the &lt;button&gt; element" name="Button Button with Icon variant should render the given icon within the &lt;button&gt; element" time="0.01">
    </testcase>
    <testcase classname="Button Button with Icon variant should report a prop violation error if `renderIcon` is passed without `iconDescription` and `children`" name="Button Button with Icon variant should report a prop violation error if `renderIcon` is passed without `iconDescription` and `children`" time="0.012">
    </testcase>
    <testcase classname="Button Icon Button variant should set the icon-only class" name="Button Icon Button variant should set the icon-only class" time="0.006">
    </testcase>
    <testcase classname="Button Icon Button variant should support badge indicator" name="Button Icon Button variant should support badge indicator" time="0.012">
    </testcase>
    <testcase classname="Button Icon Button variant should support badge indicator and truncate" name="Button Icon Button variant should support badge indicator and truncate" time="0.002">
    </testcase>
    <testcase classname="Button Icon Button variant should support rendering as a custom element with the `as` prop" name="Button Icon Button variant should support rendering as a custom element with the `as` prop" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AccordionSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="0.201" tests="8">
    <testcase classname="AccordionSkeleton renders as expected - Component API should spread extra props onto outermost element" name="AccordionSkeleton renders as expected - Component API should spread extra props onto outermost element" time="0.005">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should render and match snapshot" name="AccordionSkeleton renders as expected - Component API should render and match snapshot" time="0.019">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should respect align prop" name="AccordionSkeleton renders as expected - Component API should respect align prop" time="0.003">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should support a custom `className` prop on the outermost element" name="AccordionSkeleton renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should respect count prop" name="AccordionSkeleton renders as expected - Component API should respect count prop" time="0.013">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should respect isFlush prop" name="AccordionSkeleton renders as expected - Component API should respect isFlush prop" time="0.001">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should respect open prop" name="AccordionSkeleton renders as expected - Component API should respect open prop" time="0.021">
    </testcase>
    <testcase classname="AccordionSkeleton renders as expected - Component API should respect ordered prop" name="AccordionSkeleton renders as expected - Component API should respect ordered prop" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="CodeSnippetSkeleton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="1.925" tests="6">
    <testcase classname="CodeSnippetSkeleton automated accessibility testing should have no Axe violations with type=&quot;single&quot;" name="CodeSnippetSkeleton automated accessibility testing should have no Axe violations with type=&quot;single&quot;" time="0.014">
    </testcase>
    <testcase classname="CodeSnippetSkeleton automated accessibility testing should have no Axe violations with type=&quot;multi&quot;" name="CodeSnippetSkeleton automated accessibility testing should have no Axe violations with type=&quot;multi&quot;" time="0.021">
    </testcase>
    <testcase classname="CodeSnippetSkeleton automated accessibility testing should have no AC violations with type=&quot;single&quot;" name="CodeSnippetSkeleton automated accessibility testing should have no AC violations with type=&quot;single&quot;" time="1.605">
    </testcase>
    <testcase classname="CodeSnippetSkeleton automated accessibility testing should have no AC violations with type=&quot;multi&quot;" name="CodeSnippetSkeleton automated accessibility testing should have no AC violations with type=&quot;multi&quot;" time="0.035">
    </testcase>
    <testcase classname="CodeSnippetSkeleton should default to type=&quot;single&quot;" name="CodeSnippetSkeleton should default to type=&quot;single&quot;" time="0.001">
    </testcase>
    <testcase classname="CodeSnippetSkeleton should support a custom `className` on the outer-most element" name="CodeSnippetSkeleton should support a custom `className` on the outer-most element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AccordionItem" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="0.383" tests="11">
    <testcase classname="AccordionItem renders as expected - Component API should spread extra props onto outermost element" name="AccordionItem renders as expected - Component API should spread extra props onto outermost element" time="0.006">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should render and match snapshot" name="AccordionItem renders as expected - Component API should render and match snapshot" time="0.007">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should support a custom `className` prop on the outermost element" name="AccordionItem renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should respect disabled prop" name="AccordionItem renders as expected - Component API should respect disabled prop" time="0.005">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should call onClick when expected" name="AccordionItem renders as expected - Component API should call onClick when expected" time="0.064">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should call onHeadingClick prop when expected" name="AccordionItem renders as expected - Component API should call onHeadingClick prop when expected" time="0.013">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should respect open prop" name="AccordionItem renders as expected - Component API should respect open prop" time="0.005">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should respect renderToggle prop" name="AccordionItem renders as expected - Component API should respect renderToggle prop" time="0.001">
    </testcase>
    <testcase classname="AccordionItem renders as expected - Component API should respect title prop" name="AccordionItem renders as expected - Component API should respect title prop" time="0.001">
    </testcase>
    <testcase classname="AccordionItem behaves as expected should close an open AccordionItem panel when the Esc key is pressed" name="AccordionItem behaves as expected should close an open AccordionItem panel when the Esc key is pressed" time="0.023">
    </testcase>
    <testcase classname="AccordionItem behaves as expected should not close an open AccordionItem panel if the Esc key is pressed in the panel" name="AccordionItem behaves as expected should not close an open AccordionItem panel if the Esc key is pressed in the panel" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="tokens" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:46" time="0.392" tests="147">
    <testcase classname="tokens colors interactive01 should be grouped in meta" name="tokens colors interactive01 should be grouped in meta" time="0.002">
    </testcase>
    <testcase classname="tokens colors interactive02 should be grouped in meta" name="tokens colors interactive02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors interactive03 should be grouped in meta" name="tokens colors interactive03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors interactive04 should be grouped in meta" name="tokens colors interactive04 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors uiBackground should be grouped in meta" name="tokens colors uiBackground should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors ui01 should be grouped in meta" name="tokens colors ui01 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors ui02 should be grouped in meta" name="tokens colors ui02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors ui03 should be grouped in meta" name="tokens colors ui03 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors ui04 should be grouped in meta" name="tokens colors ui04 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors ui05 should be grouped in meta" name="tokens colors ui05 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors text01 should be grouped in meta" name="tokens colors text01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors text02 should be grouped in meta" name="tokens colors text02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors text03 should be grouped in meta" name="tokens colors text03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors text04 should be grouped in meta" name="tokens colors text04 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors text05 should be grouped in meta" name="tokens colors text05 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textError should be grouped in meta" name="tokens colors textError should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors icon01 should be grouped in meta" name="tokens colors icon01 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors icon02 should be grouped in meta" name="tokens colors icon02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors icon03 should be grouped in meta" name="tokens colors icon03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors link01 should be grouped in meta" name="tokens colors link01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors link02 should be grouped in meta" name="tokens colors link02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseLink should be grouped in meta" name="tokens colors inverseLink should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors field01 should be grouped in meta" name="tokens colors field01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors field02 should be grouped in meta" name="tokens colors field02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverse01 should be grouped in meta" name="tokens colors inverse01 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors inverse02 should be grouped in meta" name="tokens colors inverse02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors support01 should be grouped in meta" name="tokens colors support01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors support02 should be grouped in meta" name="tokens colors support02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors support03 should be grouped in meta" name="tokens colors support03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors support04 should be grouped in meta" name="tokens colors support04 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseSupport01 should be grouped in meta" name="tokens colors inverseSupport01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseSupport02 should be grouped in meta" name="tokens colors inverseSupport02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseSupport03 should be grouped in meta" name="tokens colors inverseSupport03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseSupport04 should be grouped in meta" name="tokens colors inverseSupport04 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors overlay01 should be grouped in meta" name="tokens colors overlay01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors danger01 should be grouped in meta" name="tokens colors danger01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors danger02 should be grouped in meta" name="tokens colors danger02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors focus should be grouped in meta" name="tokens colors focus should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors inverseFocusUi should be grouped in meta" name="tokens colors inverseFocusUi should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverPrimary should be grouped in meta" name="tokens colors hoverPrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activePrimary should be grouped in meta" name="tokens colors activePrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverPrimaryText should be grouped in meta" name="tokens colors hoverPrimaryText should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors hoverSecondary should be grouped in meta" name="tokens colors hoverSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activeSecondary should be grouped in meta" name="tokens colors activeSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverTertiary should be grouped in meta" name="tokens colors hoverTertiary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activeTertiary should be grouped in meta" name="tokens colors activeTertiary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverUI should be grouped in meta" name="tokens colors hoverUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverLightUI should be grouped in meta" name="tokens colors hoverLightUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverSelectedUI should be grouped in meta" name="tokens colors hoverSelectedUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activeUI should be grouped in meta" name="tokens colors activeUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activeLightUI should be grouped in meta" name="tokens colors activeLightUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors selectedUI should be grouped in meta" name="tokens colors selectedUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors selectedLightUI should be grouped in meta" name="tokens colors selectedLightUI should be grouped in meta" time="0.012">
    </testcase>
    <testcase classname="tokens colors inverseHoverUI should be grouped in meta" name="tokens colors inverseHoverUI should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverDanger should be grouped in meta" name="tokens colors hoverDanger should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors activeDanger should be grouped in meta" name="tokens colors activeDanger should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverRow should be grouped in meta" name="tokens colors hoverRow should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors visitedLink should be grouped in meta" name="tokens colors visitedLink should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors disabled01 should be grouped in meta" name="tokens colors disabled01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors disabled02 should be grouped in meta" name="tokens colors disabled02 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors disabled03 should be grouped in meta" name="tokens colors disabled03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors highlight should be grouped in meta" name="tokens colors highlight should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors decorative01 should be grouped in meta" name="tokens colors decorative01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonSeparator should be grouped in meta" name="tokens colors buttonSeparator should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors skeleton01 should be grouped in meta" name="tokens colors skeleton01 should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors skeleton02 should be grouped in meta" name="tokens colors skeleton02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors background should be grouped in meta" name="tokens colors background should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layer should be grouped in meta" name="tokens colors layer should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerAccent should be grouped in meta" name="tokens colors layerAccent should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerAccentHover should be grouped in meta" name="tokens colors layerAccentHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerAccentActive should be grouped in meta" name="tokens colors layerAccentActive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors field should be grouped in meta" name="tokens colors field should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors backgroundInverse should be grouped in meta" name="tokens colors backgroundInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundBrand should be grouped in meta" name="tokens colors backgroundBrand should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors interactive should be grouped in meta" name="tokens colors interactive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderSubtle should be grouped in meta" name="tokens colors borderSubtle should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderStrong should be grouped in meta" name="tokens colors borderStrong should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderInverse should be grouped in meta" name="tokens colors borderInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderInteractive should be grouped in meta" name="tokens colors borderInteractive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textPrimary should be grouped in meta" name="tokens colors textPrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textSecondary should be grouped in meta" name="tokens colors textSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textPlaceholder should be grouped in meta" name="tokens colors textPlaceholder should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textHelper should be grouped in meta" name="tokens colors textHelper should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors textOnColor should be grouped in meta" name="tokens colors textOnColor should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textInverse should be grouped in meta" name="tokens colors textInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors linkPrimary should be grouped in meta" name="tokens colors linkPrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors linkSecondary should be grouped in meta" name="tokens colors linkSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors linkVisited should be grouped in meta" name="tokens colors linkVisited should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors linkInverse should be grouped in meta" name="tokens colors linkInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconPrimary should be grouped in meta" name="tokens colors iconPrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconSecondary should be grouped in meta" name="tokens colors iconSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconOnColor should be grouped in meta" name="tokens colors iconOnColor should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconInverse should be grouped in meta" name="tokens colors iconInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportError should be grouped in meta" name="tokens colors supportError should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportSuccess should be grouped in meta" name="tokens colors supportSuccess should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportWarning should be grouped in meta" name="tokens colors supportWarning should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportInfo should be grouped in meta" name="tokens colors supportInfo should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportErrorInverse should be grouped in meta" name="tokens colors supportErrorInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportSuccessInverse should be grouped in meta" name="tokens colors supportSuccessInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors supportWarningInverse should be grouped in meta" name="tokens colors supportWarningInverse should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors supportInfoInverse should be grouped in meta" name="tokens colors supportInfoInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors overlay should be grouped in meta" name="tokens colors overlay should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors toggleOff should be grouped in meta" name="tokens colors toggleOff should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors shadow should be grouped in meta" name="tokens colors shadow should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonPrimary should be grouped in meta" name="tokens colors buttonPrimary should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors buttonSecondary should be grouped in meta" name="tokens colors buttonSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonTertiary should be grouped in meta" name="tokens colors buttonTertiary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonDangerPrimary should be grouped in meta" name="tokens colors buttonDangerPrimary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonDangerSecondary should be grouped in meta" name="tokens colors buttonDangerSecondary should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundActive should be grouped in meta" name="tokens colors backgroundActive should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors layerActive should be grouped in meta" name="tokens colors layerActive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonDangerActive should be grouped in meta" name="tokens colors buttonDangerActive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonPrimaryActive should be grouped in meta" name="tokens colors buttonPrimaryActive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonSecondaryActive should be grouped in meta" name="tokens colors buttonSecondaryActive should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonTertiaryActive should be grouped in meta" name="tokens colors buttonTertiaryActive should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors focusInset should be grouped in meta" name="tokens colors focusInset should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors focusInverse should be grouped in meta" name="tokens colors focusInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundHover should be grouped in meta" name="tokens colors backgroundHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerHover should be grouped in meta" name="tokens colors layerHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors fieldHover should be grouped in meta" name="tokens colors fieldHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundInverseHover should be grouped in meta" name="tokens colors backgroundInverseHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors linkPrimaryHover should be grouped in meta" name="tokens colors linkPrimaryHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonDangerHover should be grouped in meta" name="tokens colors buttonDangerHover should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors buttonPrimaryHover should be grouped in meta" name="tokens colors buttonPrimaryHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonSecondaryHover should be grouped in meta" name="tokens colors buttonSecondaryHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonTertiaryHover should be grouped in meta" name="tokens colors buttonTertiaryHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundSelected should be grouped in meta" name="tokens colors backgroundSelected should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors backgroundSelectedHover should be grouped in meta" name="tokens colors backgroundSelectedHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerSelected should be grouped in meta" name="tokens colors layerSelected should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerSelectedHover should be grouped in meta" name="tokens colors layerSelectedHover should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerSelectedInverse should be grouped in meta" name="tokens colors layerSelectedInverse should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderSubtleSelected should be grouped in meta" name="tokens colors borderSubtleSelected should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors borderDisabled should be grouped in meta" name="tokens colors borderDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textDisabled should be grouped in meta" name="tokens colors textDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors buttonDisabled should be grouped in meta" name="tokens colors buttonDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconDisabled should be grouped in meta" name="tokens colors iconDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors textOnColorDisabled should be grouped in meta" name="tokens colors textOnColorDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors iconOnColorDisabled should be grouped in meta" name="tokens colors iconOnColorDisabled should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors layerSelectedDisabled should be grouped in meta" name="tokens colors layerSelectedDisabled should be grouped in meta" time="0.001">
    </testcase>
    <testcase classname="tokens colors skeletonBackground should be grouped in meta" name="tokens colors skeletonBackground should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors skeletonElement should be grouped in meta" name="tokens colors skeletonElement should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors brand01 should be grouped in meta" name="tokens colors brand01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors brand02 should be grouped in meta" name="tokens colors brand02 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors brand03 should be grouped in meta" name="tokens colors brand03 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors active01 should be grouped in meta" name="tokens colors active01 should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors hoverField should be grouped in meta" name="tokens colors hoverField should be grouped in meta" time="0">
    </testcase>
    <testcase classname="tokens colors danger should be grouped in meta" name="tokens colors danger should be grouped in meta" time="0">
    </testcase>
  </testsuite>
  <testsuite name="DataTable" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:43" time="3.296" tests="25">
    <testcase classname="DataTable renders as expected - Component API should spread extra props onto outermost element" name="DataTable renders as expected - Component API should spread extra props onto outermost element" time="0.039">
    </testcase>
    <testcase classname="DataTable renders as expected - Component API should render and match snapshot" name="DataTable renders as expected - Component API should render and match snapshot" time="0.057">
    </testcase>
    <testcase classname="DataTable behaves as expected sorting should sort a row by a header when a header is clicked" name="DataTable behaves as expected sorting should sort a row by a header when a header is clicked" time="0.747">
    </testcase>
    <testcase classname="DataTable behaves as expected sorting should re-sort new row props by the current sort state" name="DataTable behaves as expected sorting should re-sort new row props by the current sort state" time="0.131">
    </testcase>
    <testcase classname="DataTable behaves as expected sorting should reset to ASC ordering when another header is clicked" name="DataTable behaves as expected sorting should reset to ASC ordering when another header is clicked" time="0.304">
    </testcase>
    <testcase classname="DataTable behaves as expected filtering should filter rows by the given input" name="DataTable behaves as expected filtering should filter rows by the given input" time="0.131">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should render and match snapshot" name="DataTable behaves as expected selection should render and match snapshot" time="0.025">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should have select-all default to un-checked if no rows are present" name="DataTable behaves as expected selection should have select-all default to un-checked if no rows are present" time="0.02">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should select all rows if a user interacts with select all" name="DataTable behaves as expected selection should select all rows if a user interacts with select all" time="0.11">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should select a specific row when a user interacts with select row" name="DataTable behaves as expected selection should select a specific row when a user interacts with select row" time="0.103">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should deselect all rows when batch action cancel is invoked" name="DataTable behaves as expected selection should deselect all rows when batch action cancel is invoked" time="0.161">
    </testcase>
    <testcase classname="DataTable behaves as expected selection should call the onSelectAll prop if supplied to TableBatchAction component" name="DataTable behaves as expected selection should call the onSelectAll prop if supplied to TableBatchAction component" time="0.087">
    </testcase>
    <testcase classname="DataTable behaves as expected selection with filtering should only select all from filtered items" name="DataTable behaves as expected selection with filtering should only select all from filtered items" time="0.239">
    </testcase>
    <testcase classname="DataTable behaves as expected selection with filtering should only select rows that are not disabled even when filtered" name="DataTable behaves as expected selection with filtering should only select rows that are not disabled even when filtered" time="0.148">
    </testcase>
    <testcase classname="DataTable behaves as expected selection with filtering does not select a row if they are all disabled" name="DataTable behaves as expected selection with filtering does not select a row if they are all disabled" time="0.19">
    </testcase>
    <testcase classname="DataTable behaves as expected selection -- radio buttons should render" name="DataTable behaves as expected selection -- radio buttons should render" time="0.007">
    </testcase>
    <testcase classname="DataTable behaves as expected selection -- radio buttons should not have select-all checkbox" name="DataTable behaves as expected selection -- radio buttons should not have select-all checkbox" time="0.007">
    </testcase>
    <testcase classname="DataTable behaves as expected selection -- radio buttons should select a specific row when a user interacts with select row" name="DataTable behaves as expected selection -- radio buttons should select a specific row when a user interacts with select row" time="0.105">
    </testcase>
    <testcase classname="DataTable behaves as expected selection -- radio buttons should deselect all other rows when a row is selected" name="DataTable behaves as expected selection -- radio buttons should deselect all other rows when a row is selected" time="0.156">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should add additional rows when receiving new props" name="DataTable behaves as expected updates properly when passed new props should add additional rows when receiving new props" time="0.021">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should add additional headers when receiving new props" name="DataTable behaves as expected updates properly when passed new props should add additional headers when receiving new props" time="0.008">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should keep batch action after adding rows, as long as some existing rows are selected" name="DataTable behaves as expected updates properly when passed new props should keep batch action after adding rows, as long as some existing rows are selected" time="0.096">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should keep selected all state after adding rows, as long as all existing rows and new row are selected" name="DataTable behaves as expected updates properly when passed new props should keep selected all state after adding rows, as long as all existing rows and new row are selected" time="0.101">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should update rows when receiving new props" name="DataTable behaves as expected updates properly when passed new props should update rows when receiving new props" time="0.017">
    </testcase>
    <testcase classname="DataTable behaves as expected updates properly when passed new props should update cells when receiving new props" name="DataTable behaves as expected updates properly when passed new props should update cells when receiving new props" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="AILabel" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="0.71" tests="18">
    <testcase classname="AILabel renders as expected - Component API should spread extra props onto the popover element" name="AILabel renders as expected - Component API should spread extra props onto the popover element" time="0.024">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should render children as expected" name="AILabel renders as expected - Component API should render children as expected" time="0.003">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should support a custom `className` prop on the outermost element" name="AILabel renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect aiText prop" name="AILabel renders as expected - Component API should respect aiText prop" time="0.001">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect textLabel prop when kind is inline" name="AILabel renders as expected - Component API should respect textLabel prop when kind is inline" time="0.008">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should not populate textLabel prop when kind is not inline" name="AILabel renders as expected - Component API should not populate textLabel prop when kind is not inline" time="0.004">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect align prop when autoAlign is false" name="AILabel renders as expected - Component API should respect align prop when autoAlign is false" time="0.001">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should apply align prop classes even when autoAlign is true" name="AILabel renders as expected - Component API should apply align prop classes even when autoAlign is true" time="0.002">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect kind prop" name="AILabel renders as expected - Component API should respect kind prop" time="0.015">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect revertActive prop" name="AILabel renders as expected - Component API should respect revertActive prop" time="0.01">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect revertLabel prop" name="AILabel renders as expected - Component API should respect revertLabel prop" time="0.011">
    </testcase>
    <testcase classname="AILabel renders as expected - Component API should respect size prop" name="AILabel renders as expected - Component API should respect size prop" time="0.016">
    </testcase>
    <testcase classname="AILabel should handle revert click" name="AILabel should handle revert click" time="0.087">
    </testcase>
    <testcase classname="AILabelContent should render with content" name="AILabelContent should render with content" time="0.081">
    </testcase>
    <testcase classname="AILabelActions should render with actions" name="AILabelActions should render with actions" time="0.108">
    </testcase>
    <testcase classname="AILabelActions Labels and kind prop should use empty label for inline kind" name="AILabelActions Labels and kind prop should use empty label for inline kind" time="0.063">
    </testcase>
    <testcase classname="AILabelActions Labels and kind prop should set aria-label when kind is default" name="AILabelActions Labels and kind prop should set aria-label when kind is default" time="0.018">
    </testcase>
    <testcase classname="AILabelActions Labels and kind prop should let visible text serve as accessible name in inline mode" name="AILabelActions Labels and kind prop should let visible text serve as accessible name in inline mode" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="TimePicker" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:46" time="0.448" tests="13">
    <testcase classname="TimePicker input renders as expected" name="TimePicker input renders as expected" time="0.012">
    </testcase>
    <testcase classname="TimePicker input passes classNames as expected" name="TimePicker input passes classNames as expected" time="0.003">
    </testcase>
    <testcase classname="TimePicker input should set type as expected" name="TimePicker input should set type as expected" time="0.004">
    </testcase>
    <testcase classname="TimePicker input should set value as expected" name="TimePicker input should set value as expected" time="0.011">
    </testcase>
    <testcase classname="TimePicker input should set disabled as expected" name="TimePicker input should set disabled as expected" time="0.016">
    </testcase>
    <testcase classname="TimePicker input should behave readonly as expected" name="TimePicker input should behave readonly as expected" time="0.073">
    </testcase>
    <testcase classname="TimePicker input should set placeholder as expected" name="TimePicker input should set placeholder as expected" time="0.011">
    </testcase>
    <testcase classname="TimePicker input should call onBlur when not disabled or readOnly" name="TimePicker input should call onBlur when not disabled or readOnly" time="0.01">
    </testcase>
    <testcase classname="TimePicker input should not call onBlur when disabled" name="TimePicker input should not call onBlur when disabled" time="0.016">
    </testcase>
    <testcase classname="TimePicker input should update value and prevValue when value changes" name="TimePicker input should update value and prevValue when value changes" time="0.021">
    </testcase>
    <testcase classname="TimePicker label does not render a label by default" name="TimePicker label does not render a label by default" time="0.003">
    </testcase>
    <testcase classname="TimePicker label renders a label as expected" name="TimePicker label renders a label as expected" time="0.009">
    </testcase>
    <testcase classname="TimePicker events should write text inside the textbox" name="TimePicker events should write text inside the textbox" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="TreeView" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:46" time="0.908" tests="30">
    <testcase classname="TreeView renders as expected - Component API should spread extra props onto outermost element" name="TreeView renders as expected - Component API should spread extra props onto outermost element" time="0.037">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect active prop" name="TreeView renders as expected - Component API should respect active prop" time="0.011">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should render children as expected" name="TreeView renders as expected - Component API should render children as expected" time="0.047">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should render children as expected when using dot syntax" name="TreeView renders as expected - Component API should render children as expected when using dot syntax" time="0.001">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should support a custom `className` prop on the outermost element" name="TreeView renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect hideLabel prop" name="TreeView renders as expected - Component API should respect hideLabel prop" time="0.004">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect label prop" name="TreeView renders as expected - Component API should respect label prop" time="0.001">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect multiselect prop" name="TreeView renders as expected - Component API should respect multiselect prop" time="0.054">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect onSelect prop" name="TreeView renders as expected - Component API should respect onSelect prop" time="0.009">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect selected prop" name="TreeView renders as expected - Component API should respect selected prop" time="0.007">
    </testcase>
    <testcase classname="TreeView renders as expected - Component API should respect size prop" name="TreeView renders as expected - Component API should respect size prop" time="0.004">
    </testcase>
    <testcase classname="TreeView behaves as expected should render tree with expanded node" name="TreeView behaves as expected should render tree with expanded node" time="0.011">
    </testcase>
    <testcase classname="TreeView behaves as expected should render tree with disabled nodes" name="TreeView behaves as expected should render tree with disabled nodes" time="0.006">
    </testcase>
    <testcase classname="TreeView behaves as expected should render tree with icons" name="TreeView behaves as expected should render tree with icons" time="0.002">
    </testcase>
    <testcase classname="TreeView keyboard navigation should focus on the first child node when right arrow is pressed on an expanded parent node" name="TreeView keyboard navigation should focus on the first child node when right arrow is pressed on an expanded parent node" time="0.01">
    </testcase>
    <testcase classname="TreeView keyboard navigation should expand a collapsed parent node when right arrow is pressed" name="TreeView keyboard navigation should expand a collapsed parent node when right arrow is pressed" time="0.01">
    </testcase>
    <testcase classname="TreeView should respect multiselect prop (deselecting nodes)" name="TreeView should respect multiselect prop (deselecting nodes)" time="0.061">
    </testcase>
    <testcase classname="TreeView should render tree with custom icons" name="TreeView should render tree with custom icons" time="0.004">
    </testcase>
    <testcase classname="TreeView should expand a collapsed parent node when right arrow is pressed" name="TreeView should expand a collapsed parent node when right arrow is pressed" time="0.014">
    </testcase>
    <testcase classname="TreeView should navigate between nodes using ArrowUp and ArrowDown" name="TreeView should navigate between nodes using ArrowUp and ArrowDown" time="0.029">
    </testcase>
    <testcase classname="TreeView should not render label when hideLabel is true" name="TreeView should not render label when hideLabel is true" time="0.002">
    </testcase>
    <testcase classname="TreeView should render custom icons in TreeNode" name="TreeView should render custom icons in TreeNode" time="0.004">
    </testcase>
    <testcase classname="TreeView should render the label correctly" name="TreeView should render the label correctly" time="0.002">
    </testcase>
    <testcase classname="TreeView should collapse an expanded parent node when left arrow is pressed" name="TreeView should collapse an expanded parent node when left arrow is pressed" time="0.008">
    </testcase>
    <testcase classname="TreeView should deselect a node when clicked again in multiselect mode" name="TreeView should deselect a node when clicked again in multiselect mode" time="0.092">
    </testcase>
    <testcase classname="TreeView should not allow interaction with disabled nodes" name="TreeView should not allow interaction with disabled nodes" time="0.013">
    </testcase>
    <testcase classname="TreeView should select nodes correctly when Home/End keys are used with multiselect and shiftKey+ctrlKey" name="TreeView should select nodes correctly when Home/End keys are used with multiselect and shiftKey+ctrlKey" time="0.03">
    </testcase>
    <testcase classname="TreeView should select nodes correctly when Home key is used with multiselect and shiftKey+ctrlKey" name="TreeView should select nodes correctly when Home key is used with multiselect and shiftKey+ctrlKey" time="0.027">
    </testcase>
    <testcase classname="TreeView should select multiple nodes when Home key is pressed with Shift and Ctrl keys" name="TreeView should select multiple nodes when Home key is pressed with Shift and Ctrl keys" time="0.036">
    </testcase>
    <testcase classname="TreeView should select nodes correctly when ctrl+A is pressed" name="TreeView should select nodes correctly when ctrl+A is pressed" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="themes" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:46" time="1.153" tests="1936">
    <testcase classname="themes white interactive01 should be defined" name="themes white interactive01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white interactive02 should be defined" name="themes white interactive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white interactive03 should be defined" name="themes white interactive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white interactive04 should be defined" name="themes white interactive04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white uiBackground should be defined" name="themes white uiBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white ui01 should be defined" name="themes white ui01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white ui02 should be defined" name="themes white ui02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white ui03 should be defined" name="themes white ui03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white ui04 should be defined" name="themes white ui04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white ui05 should be defined" name="themes white ui05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white text01 should be defined" name="themes white text01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white text02 should be defined" name="themes white text02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white text03 should be defined" name="themes white text03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white text04 should be defined" name="themes white text04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white text05 should be defined" name="themes white text05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white textError should be defined" name="themes white textError should be defined" time="0">
    </testcase>
    <testcase classname="themes white icon01 should be defined" name="themes white icon01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white icon02 should be defined" name="themes white icon02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white icon03 should be defined" name="themes white icon03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white link01 should be defined" name="themes white link01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white link02 should be defined" name="themes white link02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseLink should be defined" name="themes white inverseLink should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white field01 should be defined" name="themes white field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white field02 should be defined" name="themes white field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverse01 should be defined" name="themes white inverse01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverse02 should be defined" name="themes white inverse02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white support01 should be defined" name="themes white support01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white support02 should be defined" name="themes white support02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white support03 should be defined" name="themes white support03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white support04 should be defined" name="themes white support04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport01 should be defined" name="themes white inverseSupport01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport02 should be defined" name="themes white inverseSupport02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white inverseSupport03 should be defined" name="themes white inverseSupport03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport04 should be defined" name="themes white inverseSupport04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white overlay01 should be defined" name="themes white overlay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white danger01 should be defined" name="themes white danger01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white danger02 should be defined" name="themes white danger02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white focus should be defined" name="themes white focus should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseFocusUi should be defined" name="themes white inverseFocusUi should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverPrimary should be defined" name="themes white hoverPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white activePrimary should be defined" name="themes white activePrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverPrimaryText should be defined" name="themes white hoverPrimaryText should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverSecondary should be defined" name="themes white hoverSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white activeSecondary should be defined" name="themes white activeSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverTertiary should be defined" name="themes white hoverTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes white activeTertiary should be defined" name="themes white activeTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverUI should be defined" name="themes white hoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverLightUI should be defined" name="themes white hoverLightUI should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white hoverSelectedUI should be defined" name="themes white hoverSelectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white activeUI should be defined" name="themes white activeUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white activeLightUI should be defined" name="themes white activeLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white selectedUI should be defined" name="themes white selectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white selectedLightUI should be defined" name="themes white selectedLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white inverseHoverUI should be defined" name="themes white inverseHoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverDanger should be defined" name="themes white hoverDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes white activeDanger should be defined" name="themes white activeDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverRow should be defined" name="themes white hoverRow should be defined" time="0">
    </testcase>
    <testcase classname="themes white visitedLink should be defined" name="themes white visitedLink should be defined" time="0">
    </testcase>
    <testcase classname="themes white disabled01 should be defined" name="themes white disabled01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white disabled02 should be defined" name="themes white disabled02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white disabled03 should be defined" name="themes white disabled03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white highlight should be defined" name="themes white highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes white decorative01 should be defined" name="themes white decorative01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonSeparator should be defined" name="themes white buttonSeparator should be defined" time="0">
    </testcase>
    <testcase classname="themes white skeleton01 should be defined" name="themes white skeleton01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white skeleton02 should be defined" name="themes white skeleton02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white background should be defined" name="themes white background should be defined" time="0.003">
    </testcase>
    <testcase classname="themes white layer should be defined" name="themes white layer should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white layerAccent should be defined" name="themes white layerAccent should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentHover should be defined" name="themes white layerAccentHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentActive should be defined" name="themes white layerAccentActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white field should be defined" name="themes white field should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverse should be defined" name="themes white backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundBrand should be defined" name="themes white backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes white interactive should be defined" name="themes white interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtle should be defined" name="themes white borderSubtle should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderStrong should be defined" name="themes white borderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderInverse should be defined" name="themes white borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderInteractive should be defined" name="themes white borderInteractive should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white textPrimary should be defined" name="themes white textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white textSecondary should be defined" name="themes white textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white textPlaceholder should be defined" name="themes white textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes white textHelper should be defined" name="themes white textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes white textOnColor should be defined" name="themes white textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes white textInverse should be defined" name="themes white textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkPrimary should be defined" name="themes white linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkSecondary should be defined" name="themes white linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkVisited should be defined" name="themes white linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkInverse should be defined" name="themes white linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconPrimary should be defined" name="themes white iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconSecondary should be defined" name="themes white iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconOnColor should be defined" name="themes white iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconInverse should be defined" name="themes white iconInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportError should be defined" name="themes white supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportSuccess should be defined" name="themes white supportSuccess should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white supportWarning should be defined" name="themes white supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportInfo should be defined" name="themes white supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportErrorInverse should be defined" name="themes white supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportSuccessInverse should be defined" name="themes white supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportWarningInverse should be defined" name="themes white supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportInfoInverse should be defined" name="themes white supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white overlay should be defined" name="themes white overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes white toggleOff should be defined" name="themes white toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes white shadow should be defined" name="themes white shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonPrimary should be defined" name="themes white buttonPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondary should be defined" name="themes white buttonSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonTertiary should be defined" name="themes white buttonTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerPrimary should be defined" name="themes white buttonDangerPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerSecondary should be defined" name="themes white buttonDangerSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundActive should be defined" name="themes white backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerActive should be defined" name="themes white layerActive should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white buttonDangerActive should be defined" name="themes white buttonDangerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonPrimaryActive should be defined" name="themes white buttonPrimaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondaryActive should be defined" name="themes white buttonSecondaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonTertiaryActive should be defined" name="themes white buttonTertiaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white focusInset should be defined" name="themes white focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes white focusInverse should be defined" name="themes white focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundHover should be defined" name="themes white backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerHover should be defined" name="themes white layerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white fieldHover should be defined" name="themes white fieldHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverseHover should be defined" name="themes white backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkPrimaryHover should be defined" name="themes white linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerHover should be defined" name="themes white buttonDangerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonPrimaryHover should be defined" name="themes white buttonPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondaryHover should be defined" name="themes white buttonSecondaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonTertiaryHover should be defined" name="themes white buttonTertiaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelected should be defined" name="themes white backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelectedHover should be defined" name="themes white backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelected should be defined" name="themes white layerSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedHover should be defined" name="themes white layerSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedInverse should be defined" name="themes white layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtleSelected should be defined" name="themes white borderSubtleSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderDisabled should be defined" name="themes white borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white textDisabled should be defined" name="themes white textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white buttonDisabled should be defined" name="themes white buttonDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconDisabled should be defined" name="themes white iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white textOnColorDisabled should be defined" name="themes white textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconOnColorDisabled should be defined" name="themes white iconOnColorDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white layerSelectedDisabled should be defined" name="themes white layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white skeletonBackground should be defined" name="themes white skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white skeletonElement should be defined" name="themes white skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes white brand01 should be defined" name="themes white brand01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white brand02 should be defined" name="themes white brand02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white brand03 should be defined" name="themes white brand03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white active01 should be defined" name="themes white active01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white hoverField should be defined" name="themes white hoverField should be defined" time="0">
    </testcase>
    <testcase classname="themes white danger should be defined" name="themes white danger should be defined" time="0">
    </testcase>
    <testcase classname="themes white caption01 should be defined" name="themes white caption01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white caption02 should be defined" name="themes white caption02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white label01 should be defined" name="themes white label01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white label02 should be defined" name="themes white label02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white helperText01 should be defined" name="themes white helperText01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white helperText02 should be defined" name="themes white helperText02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white bodyShort01 should be defined" name="themes white bodyShort01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white bodyLong01 should be defined" name="themes white bodyLong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white bodyShort02 should be defined" name="themes white bodyShort02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white bodyLong02 should be defined" name="themes white bodyLong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white code01 should be defined" name="themes white code01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white code02 should be defined" name="themes white code02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white heading01 should be defined" name="themes white heading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading01 should be defined" name="themes white productiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading02 should be defined" name="themes white heading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading02 should be defined" name="themes white productiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading03 should be defined" name="themes white productiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading04 should be defined" name="themes white productiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading05 should be defined" name="themes white productiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading06 should be defined" name="themes white productiveHeading06 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white productiveHeading07 should be defined" name="themes white productiveHeading07 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes white expressiveHeading01 should be defined" name="themes white expressiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading02 should be defined" name="themes white expressiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading03 should be defined" name="themes white expressiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading04 should be defined" name="themes white expressiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading05 should be defined" name="themes white expressiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading06 should be defined" name="themes white expressiveHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes white expressiveParagraph01 should be defined" name="themes white expressiveParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white quotation01 should be defined" name="themes white quotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white quotation02 should be defined" name="themes white quotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white display01 should be defined" name="themes white display01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white display02 should be defined" name="themes white display02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white display03 should be defined" name="themes white display03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white display04 should be defined" name="themes white display04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white legal01 should be defined" name="themes white legal01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white legal02 should be defined" name="themes white legal02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white bodyCompact01 should be defined" name="themes white bodyCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white bodyCompact02 should be defined" name="themes white bodyCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white body01 should be defined" name="themes white body01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white body02 should be defined" name="themes white body02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white headingCompact01 should be defined" name="themes white headingCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white headingCompact02 should be defined" name="themes white headingCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading03 should be defined" name="themes white heading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading04 should be defined" name="themes white heading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading05 should be defined" name="themes white heading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading06 should be defined" name="themes white heading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes white heading07 should be defined" name="themes white heading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading03 should be defined" name="themes white fluidHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading04 should be defined" name="themes white fluidHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading05 should be defined" name="themes white fluidHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading06 should be defined" name="themes white fluidHeading06 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white fluidParagraph01 should be defined" name="themes white fluidParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidQuotation01 should be defined" name="themes white fluidQuotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidQuotation02 should be defined" name="themes white fluidQuotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay01 should be defined" name="themes white fluidDisplay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay02 should be defined" name="themes white fluidDisplay02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay03 should be defined" name="themes white fluidDisplay03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay04 should be defined" name="themes white fluidDisplay04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing01 should be defined" name="themes white spacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing02 should be defined" name="themes white spacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing03 should be defined" name="themes white spacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing04 should be defined" name="themes white spacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing05 should be defined" name="themes white spacing05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing06 should be defined" name="themes white spacing06 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing07 should be defined" name="themes white spacing07 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing08 should be defined" name="themes white spacing08 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing09 should be defined" name="themes white spacing09 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white spacing10 should be defined" name="themes white spacing10 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing11 should be defined" name="themes white spacing11 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing12 should be defined" name="themes white spacing12 should be defined" time="0">
    </testcase>
    <testcase classname="themes white spacing13 should be defined" name="themes white spacing13 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing01 should be defined" name="themes white fluidSpacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing02 should be defined" name="themes white fluidSpacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing03 should be defined" name="themes white fluidSpacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing04 should be defined" name="themes white fluidSpacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white container01 should be defined" name="themes white container01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white container02 should be defined" name="themes white container02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white container03 should be defined" name="themes white container03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white container04 should be defined" name="themes white container04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white container05 should be defined" name="themes white container05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white sizeXSmall should be defined" name="themes white sizeXSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes white sizeSmall should be defined" name="themes white sizeSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes white sizeMedium should be defined" name="themes white sizeMedium should be defined" time="0">
    </testcase>
    <testcase classname="themes white sizeLarge should be defined" name="themes white sizeLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes white sizeXLarge should be defined" name="themes white sizeXLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes white size2XLarge should be defined" name="themes white size2XLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconSize01 should be defined" name="themes white iconSize01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconSize02 should be defined" name="themes white iconSize02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout01 should be defined" name="themes white layout01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout02 should be defined" name="themes white layout02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout03 should be defined" name="themes white layout03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout04 should be defined" name="themes white layout04 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout05 should be defined" name="themes white layout05 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout06 should be defined" name="themes white layout06 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layout07 should be defined" name="themes white layout07 should be defined" time="0">
    </testcase>
    <testcase classname="themes white active01 should be a token" name="themes white active01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white activeDanger should be a token" name="themes white activeDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes white activeLightUI should be a token" name="themes white activeLightUI should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white activePrimary should be a token" name="themes white activePrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes white activeSecondary should be a token" name="themes white activeSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes white activeTertiary should be a token" name="themes white activeTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes white activeUI should be a token" name="themes white activeUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white background should be a token" name="themes white background should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundActive should be a token" name="themes white backgroundActive should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundBrand should be a token" name="themes white backgroundBrand should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundHover should be a token" name="themes white backgroundHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverse should be a token" name="themes white backgroundInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverseHover should be a token" name="themes white backgroundInverseHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelected should be a token" name="themes white backgroundSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelectedHover should be a token" name="themes white backgroundSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white body01 should be a token" name="themes white body01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white body02 should be a token" name="themes white body02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white bodyCompact01 should be a token" name="themes white bodyCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white bodyCompact02 should be a token" name="themes white bodyCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white bodyLong01 should be a token" name="themes white bodyLong01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white bodyLong02 should be a token" name="themes white bodyLong02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white bodyShort01 should be a token" name="themes white bodyShort01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white bodyShort02 should be a token" name="themes white bodyShort02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderDisabled should be a token" name="themes white borderDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderInteractive should be a token" name="themes white borderInteractive should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderInverse should be a token" name="themes white borderInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderStrong should be a token" name="themes white borderStrong should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderSubtle should be a token" name="themes white borderSubtle should be a token" time="0">
    </testcase>
    <testcase classname="themes white borderSubtleSelected should be a token" name="themes white borderSubtleSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes white brand01 should be a token" name="themes white brand01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white brand02 should be a token" name="themes white brand02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white brand03 should be a token" name="themes white brand03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerActive should be a token" name="themes white buttonDangerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerHover should be a token" name="themes white buttonDangerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonDangerPrimary should be a token" name="themes white buttonDangerPrimary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white buttonDangerSecondary should be a token" name="themes white buttonDangerSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white buttonDisabled should be a token" name="themes white buttonDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonPrimary should be a token" name="themes white buttonPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonPrimaryActive should be a token" name="themes white buttonPrimaryActive should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white buttonPrimaryHover should be a token" name="themes white buttonPrimaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondary should be a token" name="themes white buttonSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondaryActive should be a token" name="themes white buttonSecondaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonSecondaryHover should be a token" name="themes white buttonSecondaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonSeparator should be a token" name="themes white buttonSeparator should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white buttonTertiary should be a token" name="themes white buttonTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonTertiaryActive should be a token" name="themes white buttonTertiaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes white buttonTertiaryHover should be a token" name="themes white buttonTertiaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white caption01 should be a token" name="themes white caption01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white caption02 should be a token" name="themes white caption02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white code01 should be a token" name="themes white code01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white code02 should be a token" name="themes white code02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white container01 should be a token" name="themes white container01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white container02 should be a token" name="themes white container02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white container03 should be a token" name="themes white container03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white container04 should be a token" name="themes white container04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white container05 should be a token" name="themes white container05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white danger should be a token" name="themes white danger should be a token" time="0">
    </testcase>
    <testcase classname="themes white danger01 should be a token" name="themes white danger01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white danger02 should be a token" name="themes white danger02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white decorative01 should be a token" name="themes white decorative01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white disabled01 should be a token" name="themes white disabled01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white disabled02 should be a token" name="themes white disabled02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white disabled03 should be a token" name="themes white disabled03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white display01 should be a token" name="themes white display01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white display02 should be a token" name="themes white display02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white display03 should be a token" name="themes white display03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white display04 should be a token" name="themes white display04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading01 should be a token" name="themes white expressiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading02 should be a token" name="themes white expressiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading03 should be a token" name="themes white expressiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading04 should be a token" name="themes white expressiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading05 should be a token" name="themes white expressiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveHeading06 should be a token" name="themes white expressiveHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes white expressiveParagraph01 should be a token" name="themes white expressiveParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white field should be a token" name="themes white field should be a token" time="0">
    </testcase>
    <testcase classname="themes white field01 should be a token" name="themes white field01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white field02 should be a token" name="themes white field02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fieldHover should be a token" name="themes white fieldHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay01 should be a token" name="themes white fluidDisplay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay02 should be a token" name="themes white fluidDisplay02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay03 should be a token" name="themes white fluidDisplay03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidDisplay04 should be a token" name="themes white fluidDisplay04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading03 should be a token" name="themes white fluidHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading04 should be a token" name="themes white fluidHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading05 should be a token" name="themes white fluidHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidHeading06 should be a token" name="themes white fluidHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidParagraph01 should be a token" name="themes white fluidParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidQuotation01 should be a token" name="themes white fluidQuotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidQuotation02 should be a token" name="themes white fluidQuotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing01 should be a token" name="themes white fluidSpacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing02 should be a token" name="themes white fluidSpacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing03 should be a token" name="themes white fluidSpacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white fluidSpacing04 should be a token" name="themes white fluidSpacing04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white focus should be a token" name="themes white focus should be a token" time="0">
    </testcase>
    <testcase classname="themes white focusInset should be a token" name="themes white focusInset should be a token" time="0">
    </testcase>
    <testcase classname="themes white focusInverse should be a token" name="themes white focusInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading01 should be a token" name="themes white heading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading02 should be a token" name="themes white heading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading03 should be a token" name="themes white heading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading04 should be a token" name="themes white heading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading05 should be a token" name="themes white heading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading06 should be a token" name="themes white heading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes white heading07 should be a token" name="themes white heading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes white headingCompact01 should be a token" name="themes white headingCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white headingCompact02 should be a token" name="themes white headingCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white helperText01 should be a token" name="themes white helperText01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white helperText02 should be a token" name="themes white helperText02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white highlight should be a token" name="themes white highlight should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverDanger should be a token" name="themes white hoverDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverField should be a token" name="themes white hoverField should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverLightUI should be a token" name="themes white hoverLightUI should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white hoverPrimary should be a token" name="themes white hoverPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverPrimaryText should be a token" name="themes white hoverPrimaryText should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverRow should be a token" name="themes white hoverRow should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverSecondary should be a token" name="themes white hoverSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverSelectedUI should be a token" name="themes white hoverSelectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverTertiary should be a token" name="themes white hoverTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes white hoverUI should be a token" name="themes white hoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white icon01 should be a token" name="themes white icon01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white icon02 should be a token" name="themes white icon02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white icon03 should be a token" name="themes white icon03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconDisabled should be a token" name="themes white iconDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconInverse should be a token" name="themes white iconInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconOnColor should be a token" name="themes white iconOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconOnColorDisabled should be a token" name="themes white iconOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconPrimary should be a token" name="themes white iconPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconSecondary should be a token" name="themes white iconSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white iconSize01 should be a token" name="themes white iconSize01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white iconSize02 should be a token" name="themes white iconSize02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white interactive should be a token" name="themes white interactive should be a token" time="0">
    </testcase>
    <testcase classname="themes white interactive01 should be a token" name="themes white interactive01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white interactive02 should be a token" name="themes white interactive02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white interactive03 should be a token" name="themes white interactive03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white interactive04 should be a token" name="themes white interactive04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverse01 should be a token" name="themes white inverse01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverse02 should be a token" name="themes white inverse02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseFocusUi should be a token" name="themes white inverseFocusUi should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseHoverUI should be a token" name="themes white inverseHoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseLink should be a token" name="themes white inverseLink should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport01 should be a token" name="themes white inverseSupport01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white inverseSupport02 should be a token" name="themes white inverseSupport02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport03 should be a token" name="themes white inverseSupport03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white inverseSupport04 should be a token" name="themes white inverseSupport04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white label01 should be a token" name="themes white label01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white label02 should be a token" name="themes white label02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layer should be a token" name="themes white layer should be a token" time="0">
    </testcase>
    <testcase classname="themes white layerAccent should be a token" name="themes white layerAccent should be a token" time="0.006">
    </testcase>
    <testcase classname="themes white layerAccentActive should be a token" name="themes white layerAccentActive should be a token" time="0.009">
    </testcase>
    <testcase classname="themes white layerAccentHover should be a token" name="themes white layerAccentHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white layerActive should be a token" name="themes white layerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes white layerHover should be a token" name="themes white layerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white layerSelected should be a token" name="themes white layerSelected should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white layerSelectedDisabled should be a token" name="themes white layerSelectedDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedHover should be a token" name="themes white layerSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedInverse should be a token" name="themes white layerSelectedInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout01 should be a token" name="themes white layout01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout02 should be a token" name="themes white layout02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout03 should be a token" name="themes white layout03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout04 should be a token" name="themes white layout04 should be a token" time="0.002">
    </testcase>
    <testcase classname="themes white layout05 should be a token" name="themes white layout05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout06 should be a token" name="themes white layout06 should be a token" time="0">
    </testcase>
    <testcase classname="themes white layout07 should be a token" name="themes white layout07 should be a token" time="0">
    </testcase>
    <testcase classname="themes white legal01 should be a token" name="themes white legal01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white legal02 should be a token" name="themes white legal02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white link01 should be a token" name="themes white link01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white link02 should be a token" name="themes white link02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white linkInverse should be a token" name="themes white linkInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white linkPrimary should be a token" name="themes white linkPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes white linkPrimaryHover should be a token" name="themes white linkPrimaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes white linkSecondary should be a token" name="themes white linkSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes white linkVisited should be a token" name="themes white linkVisited should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white overlay should be a token" name="themes white overlay should be a token" time="0">
    </testcase>
    <testcase classname="themes white overlay01 should be a token" name="themes white overlay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading01 should be a token" name="themes white productiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading02 should be a token" name="themes white productiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading03 should be a token" name="themes white productiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading04 should be a token" name="themes white productiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading05 should be a token" name="themes white productiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading06 should be a token" name="themes white productiveHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes white productiveHeading07 should be a token" name="themes white productiveHeading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes white quotation01 should be a token" name="themes white quotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white quotation02 should be a token" name="themes white quotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white selectedLightUI should be a token" name="themes white selectedLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white selectedUI should be a token" name="themes white selectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes white shadow should be a token" name="themes white shadow should be a token" time="0">
    </testcase>
    <testcase classname="themes white size2XLarge should be a token" name="themes white size2XLarge should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white sizeLarge should be a token" name="themes white sizeLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes white sizeMedium should be a token" name="themes white sizeMedium should be a token" time="0">
    </testcase>
    <testcase classname="themes white sizeSmall should be a token" name="themes white sizeSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes white sizeXLarge should be a token" name="themes white sizeXLarge should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white sizeXSmall should be a token" name="themes white sizeXSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes white skeleton01 should be a token" name="themes white skeleton01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white skeleton02 should be a token" name="themes white skeleton02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white skeletonBackground should be a token" name="themes white skeletonBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes white skeletonElement should be a token" name="themes white skeletonElement should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing01 should be a token" name="themes white spacing01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white spacing02 should be a token" name="themes white spacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing03 should be a token" name="themes white spacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing04 should be a token" name="themes white spacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing05 should be a token" name="themes white spacing05 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing06 should be a token" name="themes white spacing06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white spacing07 should be a token" name="themes white spacing07 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing08 should be a token" name="themes white spacing08 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing09 should be a token" name="themes white spacing09 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing10 should be a token" name="themes white spacing10 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing11 should be a token" name="themes white spacing11 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing12 should be a token" name="themes white spacing12 should be a token" time="0">
    </testcase>
    <testcase classname="themes white spacing13 should be a token" name="themes white spacing13 should be a token" time="0">
    </testcase>
    <testcase classname="themes white support01 should be a token" name="themes white support01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white support02 should be a token" name="themes white support02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white support03 should be a token" name="themes white support03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white support04 should be a token" name="themes white support04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white supportError should be a token" name="themes white supportError should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportErrorInverse should be a token" name="themes white supportErrorInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportInfo should be a token" name="themes white supportInfo should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportInfoInverse should be a token" name="themes white supportInfoInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportSuccess should be a token" name="themes white supportSuccess should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportSuccessInverse should be a token" name="themes white supportSuccessInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportWarning should be a token" name="themes white supportWarning should be a token" time="0">
    </testcase>
    <testcase classname="themes white supportWarningInverse should be a token" name="themes white supportWarningInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white text01 should be a token" name="themes white text01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white text02 should be a token" name="themes white text02 should be a token" time="0">
    </testcase>
    <testcase classname="themes white text03 should be a token" name="themes white text03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white text04 should be a token" name="themes white text04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white text05 should be a token" name="themes white text05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white textDisabled should be a token" name="themes white textDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white textError should be a token" name="themes white textError should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white textHelper should be a token" name="themes white textHelper should be a token" time="0">
    </testcase>
    <testcase classname="themes white textInverse should be a token" name="themes white textInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes white textOnColor should be a token" name="themes white textOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes white textOnColorDisabled should be a token" name="themes white textOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes white textPlaceholder should be a token" name="themes white textPlaceholder should be a token" time="0">
    </testcase>
    <testcase classname="themes white textPrimary should be a token" name="themes white textPrimary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white textSecondary should be a token" name="themes white textSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes white toggleOff should be a token" name="themes white toggleOff should be a token" time="0">
    </testcase>
    <testcase classname="themes white ui01 should be a token" name="themes white ui01 should be a token" time="0">
    </testcase>
    <testcase classname="themes white ui02 should be a token" name="themes white ui02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white ui03 should be a token" name="themes white ui03 should be a token" time="0">
    </testcase>
    <testcase classname="themes white ui04 should be a token" name="themes white ui04 should be a token" time="0">
    </testcase>
    <testcase classname="themes white ui05 should be a token" name="themes white ui05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes white uiBackground should be a token" name="themes white uiBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes white visitedLink should be a token" name="themes white visitedLink should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive01 should be defined" name="themes g10 interactive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 interactive02 should be defined" name="themes g10 interactive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 interactive03 should be defined" name="themes g10 interactive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 interactive04 should be defined" name="themes g10 interactive04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 uiBackground should be defined" name="themes g10 uiBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 ui01 should be defined" name="themes g10 ui01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 ui02 should be defined" name="themes g10 ui02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 ui03 should be defined" name="themes g10 ui03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 ui04 should be defined" name="themes g10 ui04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 ui05 should be defined" name="themes g10 ui05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 text01 should be defined" name="themes g10 text01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 text02 should be defined" name="themes g10 text02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 text03 should be defined" name="themes g10 text03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 text04 should be defined" name="themes g10 text04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 text05 should be defined" name="themes g10 text05 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 textError should be defined" name="themes g10 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 icon01 should be defined" name="themes g10 icon01 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g10 icon02 should be defined" name="themes g10 icon02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 icon03 should be defined" name="themes g10 icon03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 link01 should be defined" name="themes g10 link01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 link02 should be defined" name="themes g10 link02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseLink should be defined" name="themes g10 inverseLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field01 should be defined" name="themes g10 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field02 should be defined" name="themes g10 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverse01 should be defined" name="themes g10 inverse01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverse02 should be defined" name="themes g10 inverse02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 support01 should be defined" name="themes g10 support01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 support02 should be defined" name="themes g10 support02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 support03 should be defined" name="themes g10 support03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 support04 should be defined" name="themes g10 support04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport01 should be defined" name="themes g10 inverseSupport01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport02 should be defined" name="themes g10 inverseSupport02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport03 should be defined" name="themes g10 inverseSupport03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport04 should be defined" name="themes g10 inverseSupport04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 overlay01 should be defined" name="themes g10 overlay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 danger01 should be defined" name="themes g10 danger01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 danger02 should be defined" name="themes g10 danger02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 focus should be defined" name="themes g10 focus should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseFocusUi should be defined" name="themes g10 inverseFocusUi should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverPrimary should be defined" name="themes g10 hoverPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activePrimary should be defined" name="themes g10 activePrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverPrimaryText should be defined" name="themes g10 hoverPrimaryText should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverSecondary should be defined" name="themes g10 hoverSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activeSecondary should be defined" name="themes g10 activeSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverTertiary should be defined" name="themes g10 hoverTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activeTertiary should be defined" name="themes g10 activeTertiary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 hoverUI should be defined" name="themes g10 hoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverLightUI should be defined" name="themes g10 hoverLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverSelectedUI should be defined" name="themes g10 hoverSelectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activeUI should be defined" name="themes g10 activeUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activeLightUI should be defined" name="themes g10 activeLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 selectedUI should be defined" name="themes g10 selectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 selectedLightUI should be defined" name="themes g10 selectedLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 inverseHoverUI should be defined" name="themes g10 inverseHoverUI should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 hoverDanger should be defined" name="themes g10 hoverDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 activeDanger should be defined" name="themes g10 activeDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverRow should be defined" name="themes g10 hoverRow should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 visitedLink should be defined" name="themes g10 visitedLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 disabled01 should be defined" name="themes g10 disabled01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 disabled02 should be defined" name="themes g10 disabled02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 disabled03 should be defined" name="themes g10 disabled03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 highlight should be defined" name="themes g10 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 decorative01 should be defined" name="themes g10 decorative01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSeparator should be defined" name="themes g10 buttonSeparator should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeleton01 should be defined" name="themes g10 skeleton01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeleton02 should be defined" name="themes g10 skeleton02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 background should be defined" name="themes g10 background should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layer should be defined" name="themes g10 layer should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccent should be defined" name="themes g10 layerAccent should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentHover should be defined" name="themes g10 layerAccentHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentActive should be defined" name="themes g10 layerAccentActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field should be defined" name="themes g10 field should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 backgroundInverse should be defined" name="themes g10 backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundBrand should be defined" name="themes g10 backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 interactive should be defined" name="themes g10 interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtle should be defined" name="themes g10 borderSubtle should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderStrong should be defined" name="themes g10 borderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderInverse should be defined" name="themes g10 borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderInteractive should be defined" name="themes g10 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textPrimary should be defined" name="themes g10 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textSecondary should be defined" name="themes g10 textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textPlaceholder should be defined" name="themes g10 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textHelper should be defined" name="themes g10 textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textOnColor should be defined" name="themes g10 textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textInverse should be defined" name="themes g10 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkPrimary should be defined" name="themes g10 linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkSecondary should be defined" name="themes g10 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkVisited should be defined" name="themes g10 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverse should be defined" name="themes g10 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconPrimary should be defined" name="themes g10 iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconSecondary should be defined" name="themes g10 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconOnColor should be defined" name="themes g10 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconInverse should be defined" name="themes g10 iconInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportError should be defined" name="themes g10 supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccess should be defined" name="themes g10 supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarning should be defined" name="themes g10 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfo should be defined" name="themes g10 supportInfo should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 supportErrorInverse should be defined" name="themes g10 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccessInverse should be defined" name="themes g10 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarningInverse should be defined" name="themes g10 supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfoInverse should be defined" name="themes g10 supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 overlay should be defined" name="themes g10 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 toggleOff should be defined" name="themes g10 toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 shadow should be defined" name="themes g10 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimary should be defined" name="themes g10 buttonPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSecondary should be defined" name="themes g10 buttonSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiary should be defined" name="themes g10 buttonTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerPrimary should be defined" name="themes g10 buttonDangerPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerSecondary should be defined" name="themes g10 buttonDangerSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundActive should be defined" name="themes g10 backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerActive should be defined" name="themes g10 layerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerActive should be defined" name="themes g10 buttonDangerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimaryActive should be defined" name="themes g10 buttonPrimaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSecondaryActive should be defined" name="themes g10 buttonSecondaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiaryActive should be defined" name="themes g10 buttonTertiaryActive should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 focusInset should be defined" name="themes g10 focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 focusInverse should be defined" name="themes g10 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundHover should be defined" name="themes g10 backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerHover should be defined" name="themes g10 layerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fieldHover should be defined" name="themes g10 fieldHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundInverseHover should be defined" name="themes g10 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkPrimaryHover should be defined" name="themes g10 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerHover should be defined" name="themes g10 buttonDangerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimaryHover should be defined" name="themes g10 buttonPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSecondaryHover should be defined" name="themes g10 buttonSecondaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiaryHover should be defined" name="themes g10 buttonTertiaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelected should be defined" name="themes g10 backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelectedHover should be defined" name="themes g10 backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelected should be defined" name="themes g10 layerSelected should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g10 layerSelectedHover should be defined" name="themes g10 layerSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedInverse should be defined" name="themes g10 layerSelectedInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 borderSubtleSelected should be defined" name="themes g10 borderSubtleSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderDisabled should be defined" name="themes g10 borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textDisabled should be defined" name="themes g10 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDisabled should be defined" name="themes g10 buttonDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconDisabled should be defined" name="themes g10 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textOnColorDisabled should be defined" name="themes g10 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconOnColorDisabled should be defined" name="themes g10 iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedDisabled should be defined" name="themes g10 layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonBackground should be defined" name="themes g10 skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonElement should be defined" name="themes g10 skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 brand01 should be defined" name="themes g10 brand01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 brand02 should be defined" name="themes g10 brand02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 brand03 should be defined" name="themes g10 brand03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 active01 should be defined" name="themes g10 active01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 hoverField should be defined" name="themes g10 hoverField should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 danger should be defined" name="themes g10 danger should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 caption01 should be defined" name="themes g10 caption01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 caption02 should be defined" name="themes g10 caption02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 label01 should be defined" name="themes g10 label01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 label02 should be defined" name="themes g10 label02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 helperText01 should be defined" name="themes g10 helperText01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 helperText02 should be defined" name="themes g10 helperText02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 bodyShort01 should be defined" name="themes g10 bodyShort01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 bodyLong01 should be defined" name="themes g10 bodyLong01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 bodyShort02 should be defined" name="themes g10 bodyShort02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 bodyLong02 should be defined" name="themes g10 bodyLong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 code01 should be defined" name="themes g10 code01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 code02 should be defined" name="themes g10 code02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading01 should be defined" name="themes g10 heading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading01 should be defined" name="themes g10 productiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading02 should be defined" name="themes g10 heading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading02 should be defined" name="themes g10 productiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading03 should be defined" name="themes g10 productiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading04 should be defined" name="themes g10 productiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading05 should be defined" name="themes g10 productiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading06 should be defined" name="themes g10 productiveHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading07 should be defined" name="themes g10 productiveHeading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading01 should be defined" name="themes g10 expressiveHeading01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 expressiveHeading02 should be defined" name="themes g10 expressiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading03 should be defined" name="themes g10 expressiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading04 should be defined" name="themes g10 expressiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading05 should be defined" name="themes g10 expressiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading06 should be defined" name="themes g10 expressiveHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveParagraph01 should be defined" name="themes g10 expressiveParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 quotation01 should be defined" name="themes g10 quotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 quotation02 should be defined" name="themes g10 quotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 display01 should be defined" name="themes g10 display01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 display02 should be defined" name="themes g10 display02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 display03 should be defined" name="themes g10 display03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 display04 should be defined" name="themes g10 display04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 legal01 should be defined" name="themes g10 legal01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 legal02 should be defined" name="themes g10 legal02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 bodyCompact01 should be defined" name="themes g10 bodyCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 bodyCompact02 should be defined" name="themes g10 bodyCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 body01 should be defined" name="themes g10 body01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 body02 should be defined" name="themes g10 body02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 headingCompact01 should be defined" name="themes g10 headingCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 headingCompact02 should be defined" name="themes g10 headingCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading03 should be defined" name="themes g10 heading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading04 should be defined" name="themes g10 heading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading05 should be defined" name="themes g10 heading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading06 should be defined" name="themes g10 heading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 heading07 should be defined" name="themes g10 heading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading03 should be defined" name="themes g10 fluidHeading03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 fluidHeading04 should be defined" name="themes g10 fluidHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading05 should be defined" name="themes g10 fluidHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading06 should be defined" name="themes g10 fluidHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidParagraph01 should be defined" name="themes g10 fluidParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidQuotation01 should be defined" name="themes g10 fluidQuotation01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 fluidQuotation02 should be defined" name="themes g10 fluidQuotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay01 should be defined" name="themes g10 fluidDisplay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay02 should be defined" name="themes g10 fluidDisplay02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay03 should be defined" name="themes g10 fluidDisplay03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay04 should be defined" name="themes g10 fluidDisplay04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing01 should be defined" name="themes g10 spacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing02 should be defined" name="themes g10 spacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing03 should be defined" name="themes g10 spacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing04 should be defined" name="themes g10 spacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing05 should be defined" name="themes g10 spacing05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing06 should be defined" name="themes g10 spacing06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing07 should be defined" name="themes g10 spacing07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing08 should be defined" name="themes g10 spacing08 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing09 should be defined" name="themes g10 spacing09 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing10 should be defined" name="themes g10 spacing10 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing11 should be defined" name="themes g10 spacing11 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing12 should be defined" name="themes g10 spacing12 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 spacing13 should be defined" name="themes g10 spacing13 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing01 should be defined" name="themes g10 fluidSpacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing02 should be defined" name="themes g10 fluidSpacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing03 should be defined" name="themes g10 fluidSpacing03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 fluidSpacing04 should be defined" name="themes g10 fluidSpacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 container01 should be defined" name="themes g10 container01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 container02 should be defined" name="themes g10 container02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 container03 should be defined" name="themes g10 container03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 container04 should be defined" name="themes g10 container04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 container05 should be defined" name="themes g10 container05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 sizeXSmall should be defined" name="themes g10 sizeXSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 sizeSmall should be defined" name="themes g10 sizeSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 sizeMedium should be defined" name="themes g10 sizeMedium should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 sizeLarge should be defined" name="themes g10 sizeLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 sizeXLarge should be defined" name="themes g10 sizeXLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 size2XLarge should be defined" name="themes g10 size2XLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconSize01 should be defined" name="themes g10 iconSize01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconSize02 should be defined" name="themes g10 iconSize02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layout01 should be defined" name="themes g10 layout01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layout02 should be defined" name="themes g10 layout02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layout03 should be defined" name="themes g10 layout03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layout04 should be defined" name="themes g10 layout04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layout05 should be defined" name="themes g10 layout05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layout06 should be defined" name="themes g10 layout06 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layout07 should be defined" name="themes g10 layout07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 active01 should be a token" name="themes g10 active01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 activeDanger should be a token" name="themes g10 activeDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 activeLightUI should be a token" name="themes g10 activeLightUI should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 activePrimary should be a token" name="themes g10 activePrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 activeSecondary should be a token" name="themes g10 activeSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 activeTertiary should be a token" name="themes g10 activeTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 activeUI should be a token" name="themes g10 activeUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 background should be a token" name="themes g10 background should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundActive should be a token" name="themes g10 backgroundActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundBrand should be a token" name="themes g10 backgroundBrand should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundHover should be a token" name="themes g10 backgroundHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundInverse should be a token" name="themes g10 backgroundInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundInverseHover should be a token" name="themes g10 backgroundInverseHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelected should be a token" name="themes g10 backgroundSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelectedHover should be a token" name="themes g10 backgroundSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 body01 should be a token" name="themes g10 body01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 body02 should be a token" name="themes g10 body02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 bodyCompact01 should be a token" name="themes g10 bodyCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 bodyCompact02 should be a token" name="themes g10 bodyCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 bodyLong01 should be a token" name="themes g10 bodyLong01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 bodyLong02 should be a token" name="themes g10 bodyLong02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 bodyShort01 should be a token" name="themes g10 bodyShort01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 bodyShort02 should be a token" name="themes g10 bodyShort02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderDisabled should be a token" name="themes g10 borderDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderInteractive should be a token" name="themes g10 borderInteractive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderInverse should be a token" name="themes g10 borderInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderStrong should be a token" name="themes g10 borderStrong should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtle should be a token" name="themes g10 borderSubtle should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtleSelected should be a token" name="themes g10 borderSubtleSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 brand01 should be a token" name="themes g10 brand01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 brand02 should be a token" name="themes g10 brand02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 brand03 should be a token" name="themes g10 brand03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerActive should be a token" name="themes g10 buttonDangerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerHover should be a token" name="themes g10 buttonDangerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerPrimary should be a token" name="themes g10 buttonDangerPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDangerSecondary should be a token" name="themes g10 buttonDangerSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonDisabled should be a token" name="themes g10 buttonDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimary should be a token" name="themes g10 buttonPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimaryActive should be a token" name="themes g10 buttonPrimaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonPrimaryHover should be a token" name="themes g10 buttonPrimaryHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 buttonSecondary should be a token" name="themes g10 buttonSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSecondaryActive should be a token" name="themes g10 buttonSecondaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSecondaryHover should be a token" name="themes g10 buttonSecondaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonSeparator should be a token" name="themes g10 buttonSeparator should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiary should be a token" name="themes g10 buttonTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiaryActive should be a token" name="themes g10 buttonTertiaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 buttonTertiaryHover should be a token" name="themes g10 buttonTertiaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 caption01 should be a token" name="themes g10 caption01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 caption02 should be a token" name="themes g10 caption02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 code01 should be a token" name="themes g10 code01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 code02 should be a token" name="themes g10 code02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 container01 should be a token" name="themes g10 container01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 container02 should be a token" name="themes g10 container02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 container03 should be a token" name="themes g10 container03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 container04 should be a token" name="themes g10 container04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 container05 should be a token" name="themes g10 container05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 danger should be a token" name="themes g10 danger should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 danger01 should be a token" name="themes g10 danger01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 danger02 should be a token" name="themes g10 danger02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 decorative01 should be a token" name="themes g10 decorative01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 disabled01 should be a token" name="themes g10 disabled01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 disabled02 should be a token" name="themes g10 disabled02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 disabled03 should be a token" name="themes g10 disabled03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 display01 should be a token" name="themes g10 display01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 display02 should be a token" name="themes g10 display02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 display03 should be a token" name="themes g10 display03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 display04 should be a token" name="themes g10 display04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading01 should be a token" name="themes g10 expressiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading02 should be a token" name="themes g10 expressiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading03 should be a token" name="themes g10 expressiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading04 should be a token" name="themes g10 expressiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading05 should be a token" name="themes g10 expressiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveHeading06 should be a token" name="themes g10 expressiveHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 expressiveParagraph01 should be a token" name="themes g10 expressiveParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 field should be a token" name="themes g10 field should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 field01 should be a token" name="themes g10 field01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 field02 should be a token" name="themes g10 field02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fieldHover should be a token" name="themes g10 fieldHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay01 should be a token" name="themes g10 fluidDisplay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay02 should be a token" name="themes g10 fluidDisplay02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 fluidDisplay03 should be a token" name="themes g10 fluidDisplay03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidDisplay04 should be a token" name="themes g10 fluidDisplay04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading03 should be a token" name="themes g10 fluidHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading04 should be a token" name="themes g10 fluidHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading05 should be a token" name="themes g10 fluidHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidHeading06 should be a token" name="themes g10 fluidHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidParagraph01 should be a token" name="themes g10 fluidParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidQuotation01 should be a token" name="themes g10 fluidQuotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidQuotation02 should be a token" name="themes g10 fluidQuotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing01 should be a token" name="themes g10 fluidSpacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing02 should be a token" name="themes g10 fluidSpacing02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 fluidSpacing03 should be a token" name="themes g10 fluidSpacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 fluidSpacing04 should be a token" name="themes g10 fluidSpacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 focus should be a token" name="themes g10 focus should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 focusInset should be a token" name="themes g10 focusInset should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 focusInverse should be a token" name="themes g10 focusInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading01 should be a token" name="themes g10 heading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading02 should be a token" name="themes g10 heading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading03 should be a token" name="themes g10 heading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading04 should be a token" name="themes g10 heading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading05 should be a token" name="themes g10 heading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading06 should be a token" name="themes g10 heading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 heading07 should be a token" name="themes g10 heading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 headingCompact01 should be a token" name="themes g10 headingCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 headingCompact02 should be a token" name="themes g10 headingCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 helperText01 should be a token" name="themes g10 helperText01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 helperText02 should be a token" name="themes g10 helperText02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 highlight should be a token" name="themes g10 highlight should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverDanger should be a token" name="themes g10 hoverDanger should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 hoverField should be a token" name="themes g10 hoverField should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverLightUI should be a token" name="themes g10 hoverLightUI should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 hoverPrimary should be a token" name="themes g10 hoverPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverPrimaryText should be a token" name="themes g10 hoverPrimaryText should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverRow should be a token" name="themes g10 hoverRow should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverSecondary should be a token" name="themes g10 hoverSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverSelectedUI should be a token" name="themes g10 hoverSelectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 hoverTertiary should be a token" name="themes g10 hoverTertiary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 hoverUI should be a token" name="themes g10 hoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 icon01 should be a token" name="themes g10 icon01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 icon02 should be a token" name="themes g10 icon02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 icon03 should be a token" name="themes g10 icon03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconDisabled should be a token" name="themes g10 iconDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconInverse should be a token" name="themes g10 iconInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconOnColor should be a token" name="themes g10 iconOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconOnColorDisabled should be a token" name="themes g10 iconOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconPrimary should be a token" name="themes g10 iconPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconSecondary should be a token" name="themes g10 iconSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconSize01 should be a token" name="themes g10 iconSize01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 iconSize02 should be a token" name="themes g10 iconSize02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive should be a token" name="themes g10 interactive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive01 should be a token" name="themes g10 interactive01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive02 should be a token" name="themes g10 interactive02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive03 should be a token" name="themes g10 interactive03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 interactive04 should be a token" name="themes g10 interactive04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverse01 should be a token" name="themes g10 inverse01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverse02 should be a token" name="themes g10 inverse02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseFocusUi should be a token" name="themes g10 inverseFocusUi should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseHoverUI should be a token" name="themes g10 inverseHoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseLink should be a token" name="themes g10 inverseLink should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport01 should be a token" name="themes g10 inverseSupport01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 inverseSupport02 should be a token" name="themes g10 inverseSupport02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport03 should be a token" name="themes g10 inverseSupport03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 inverseSupport04 should be a token" name="themes g10 inverseSupport04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 label01 should be a token" name="themes g10 label01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 label02 should be a token" name="themes g10 label02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layer should be a token" name="themes g10 layer should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccent should be a token" name="themes g10 layerAccent should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentActive should be a token" name="themes g10 layerAccentActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentHover should be a token" name="themes g10 layerAccentHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerActive should be a token" name="themes g10 layerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerHover should be a token" name="themes g10 layerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelected should be a token" name="themes g10 layerSelected should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 layerSelectedDisabled should be a token" name="themes g10 layerSelectedDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedHover should be a token" name="themes g10 layerSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedInverse should be a token" name="themes g10 layerSelectedInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layout01 should be a token" name="themes g10 layout01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layout02 should be a token" name="themes g10 layout02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 layout03 should be a token" name="themes g10 layout03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layout04 should be a token" name="themes g10 layout04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layout05 should be a token" name="themes g10 layout05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 layout06 should be a token" name="themes g10 layout06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 layout07 should be a token" name="themes g10 layout07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 legal01 should be a token" name="themes g10 legal01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 legal02 should be a token" name="themes g10 legal02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 link01 should be a token" name="themes g10 link01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 link02 should be a token" name="themes g10 link02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverse should be a token" name="themes g10 linkInverse should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 linkPrimary should be a token" name="themes g10 linkPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 linkPrimaryHover should be a token" name="themes g10 linkPrimaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 linkSecondary should be a token" name="themes g10 linkSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 linkVisited should be a token" name="themes g10 linkVisited should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 overlay should be a token" name="themes g10 overlay should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 overlay01 should be a token" name="themes g10 overlay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading01 should be a token" name="themes g10 productiveHeading01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 productiveHeading02 should be a token" name="themes g10 productiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading03 should be a token" name="themes g10 productiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading04 should be a token" name="themes g10 productiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading05 should be a token" name="themes g10 productiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 productiveHeading06 should be a token" name="themes g10 productiveHeading06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 productiveHeading07 should be a token" name="themes g10 productiveHeading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 quotation01 should be a token" name="themes g10 quotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 quotation02 should be a token" name="themes g10 quotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 selectedLightUI should be a token" name="themes g10 selectedLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 selectedUI should be a token" name="themes g10 selectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 shadow should be a token" name="themes g10 shadow should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 size2XLarge should be a token" name="themes g10 size2XLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 sizeLarge should be a token" name="themes g10 sizeLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 sizeMedium should be a token" name="themes g10 sizeMedium should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 sizeSmall should be a token" name="themes g10 sizeSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 sizeXLarge should be a token" name="themes g10 sizeXLarge should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 sizeXSmall should be a token" name="themes g10 sizeXSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 skeleton01 should be a token" name="themes g10 skeleton01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 skeleton02 should be a token" name="themes g10 skeleton02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonBackground should be a token" name="themes g10 skeletonBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonElement should be a token" name="themes g10 skeletonElement should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing01 should be a token" name="themes g10 spacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing02 should be a token" name="themes g10 spacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing03 should be a token" name="themes g10 spacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing04 should be a token" name="themes g10 spacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing05 should be a token" name="themes g10 spacing05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing06 should be a token" name="themes g10 spacing06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing07 should be a token" name="themes g10 spacing07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing08 should be a token" name="themes g10 spacing08 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing09 should be a token" name="themes g10 spacing09 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing10 should be a token" name="themes g10 spacing10 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing11 should be a token" name="themes g10 spacing11 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 spacing12 should be a token" name="themes g10 spacing12 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 spacing13 should be a token" name="themes g10 spacing13 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 support01 should be a token" name="themes g10 support01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 support02 should be a token" name="themes g10 support02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 support03 should be a token" name="themes g10 support03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 support04 should be a token" name="themes g10 support04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportError should be a token" name="themes g10 supportError should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportErrorInverse should be a token" name="themes g10 supportErrorInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfo should be a token" name="themes g10 supportInfo should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfoInverse should be a token" name="themes g10 supportInfoInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccess should be a token" name="themes g10 supportSuccess should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccessInverse should be a token" name="themes g10 supportSuccessInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarning should be a token" name="themes g10 supportWarning should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarningInverse should be a token" name="themes g10 supportWarningInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 text01 should be a token" name="themes g10 text01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 text02 should be a token" name="themes g10 text02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 text03 should be a token" name="themes g10 text03 should be a token" time="0.003">
    </testcase>
    <testcase classname="themes g10 text04 should be a token" name="themes g10 text04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 text05 should be a token" name="themes g10 text05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textDisabled should be a token" name="themes g10 textDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textError should be a token" name="themes g10 textError should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textHelper should be a token" name="themes g10 textHelper should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g10 textInverse should be a token" name="themes g10 textInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textOnColor should be a token" name="themes g10 textOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textOnColorDisabled should be a token" name="themes g10 textOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textPlaceholder should be a token" name="themes g10 textPlaceholder should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textPrimary should be a token" name="themes g10 textPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 textSecondary should be a token" name="themes g10 textSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 toggleOff should be a token" name="themes g10 toggleOff should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 ui01 should be a token" name="themes g10 ui01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 ui02 should be a token" name="themes g10 ui02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 ui03 should be a token" name="themes g10 ui03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 ui04 should be a token" name="themes g10 ui04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 ui05 should be a token" name="themes g10 ui05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 uiBackground should be a token" name="themes g10 uiBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g10 visitedLink should be a token" name="themes g10 visitedLink should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 interactive01 should be defined" name="themes g90 interactive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 interactive02 should be defined" name="themes g90 interactive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 interactive03 should be defined" name="themes g90 interactive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 interactive04 should be defined" name="themes g90 interactive04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 uiBackground should be defined" name="themes g90 uiBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 ui01 should be defined" name="themes g90 ui01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 ui02 should be defined" name="themes g90 ui02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 ui03 should be defined" name="themes g90 ui03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 ui04 should be defined" name="themes g90 ui04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 ui05 should be defined" name="themes g90 ui05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 text01 should be defined" name="themes g90 text01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 text02 should be defined" name="themes g90 text02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 text03 should be defined" name="themes g90 text03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 text04 should be defined" name="themes g90 text04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 text05 should be defined" name="themes g90 text05 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 textError should be defined" name="themes g90 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 icon01 should be defined" name="themes g90 icon01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 icon02 should be defined" name="themes g90 icon02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 icon03 should be defined" name="themes g90 icon03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 link01 should be defined" name="themes g90 link01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 link02 should be defined" name="themes g90 link02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseLink should be defined" name="themes g90 inverseLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 field01 should be defined" name="themes g90 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 field02 should be defined" name="themes g90 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverse01 should be defined" name="themes g90 inverse01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverse02 should be defined" name="themes g90 inverse02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 support01 should be defined" name="themes g90 support01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 support02 should be defined" name="themes g90 support02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 support03 should be defined" name="themes g90 support03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 support04 should be defined" name="themes g90 support04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport01 should be defined" name="themes g90 inverseSupport01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport02 should be defined" name="themes g90 inverseSupport02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport03 should be defined" name="themes g90 inverseSupport03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 inverseSupport04 should be defined" name="themes g90 inverseSupport04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 overlay01 should be defined" name="themes g90 overlay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 danger01 should be defined" name="themes g90 danger01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 danger02 should be defined" name="themes g90 danger02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 focus should be defined" name="themes g90 focus should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseFocusUi should be defined" name="themes g90 inverseFocusUi should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverPrimary should be defined" name="themes g90 hoverPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activePrimary should be defined" name="themes g90 activePrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverPrimaryText should be defined" name="themes g90 hoverPrimaryText should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverSecondary should be defined" name="themes g90 hoverSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activeSecondary should be defined" name="themes g90 activeSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverTertiary should be defined" name="themes g90 hoverTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activeTertiary should be defined" name="themes g90 activeTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverUI should be defined" name="themes g90 hoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverLightUI should be defined" name="themes g90 hoverLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverSelectedUI should be defined" name="themes g90 hoverSelectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activeUI should be defined" name="themes g90 activeUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activeLightUI should be defined" name="themes g90 activeLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 selectedUI should be defined" name="themes g90 selectedUI should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 selectedLightUI should be defined" name="themes g90 selectedLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 inverseHoverUI should be defined" name="themes g90 inverseHoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverDanger should be defined" name="themes g90 hoverDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 activeDanger should be defined" name="themes g90 activeDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverRow should be defined" name="themes g90 hoverRow should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 visitedLink should be defined" name="themes g90 visitedLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 disabled01 should be defined" name="themes g90 disabled01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 disabled02 should be defined" name="themes g90 disabled02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 disabled03 should be defined" name="themes g90 disabled03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 highlight should be defined" name="themes g90 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 decorative01 should be defined" name="themes g90 decorative01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSeparator should be defined" name="themes g90 buttonSeparator should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 skeleton01 should be defined" name="themes g90 skeleton01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 skeleton02 should be defined" name="themes g90 skeleton02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 background should be defined" name="themes g90 background should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layer should be defined" name="themes g90 layer should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccent should be defined" name="themes g90 layerAccent should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentHover should be defined" name="themes g90 layerAccentHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentActive should be defined" name="themes g90 layerAccentActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 field should be defined" name="themes g90 field should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverse should be defined" name="themes g90 backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundBrand should be defined" name="themes g90 backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 interactive should be defined" name="themes g90 interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtle should be defined" name="themes g90 borderSubtle should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderStrong should be defined" name="themes g90 borderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderInverse should be defined" name="themes g90 borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderInteractive should be defined" name="themes g90 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textPrimary should be defined" name="themes g90 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textSecondary should be defined" name="themes g90 textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textPlaceholder should be defined" name="themes g90 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textHelper should be defined" name="themes g90 textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColor should be defined" name="themes g90 textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textInverse should be defined" name="themes g90 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkPrimary should be defined" name="themes g90 linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkSecondary should be defined" name="themes g90 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkVisited should be defined" name="themes g90 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverse should be defined" name="themes g90 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconPrimary should be defined" name="themes g90 iconPrimary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 iconSecondary should be defined" name="themes g90 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColor should be defined" name="themes g90 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconInverse should be defined" name="themes g90 iconInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportError should be defined" name="themes g90 supportError should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 supportSuccess should be defined" name="themes g90 supportSuccess should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 supportWarning should be defined" name="themes g90 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportInfo should be defined" name="themes g90 supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportErrorInverse should be defined" name="themes g90 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportSuccessInverse should be defined" name="themes g90 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportWarningInverse should be defined" name="themes g90 supportWarningInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 supportInfoInverse should be defined" name="themes g90 supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 overlay should be defined" name="themes g90 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 toggleOff should be defined" name="themes g90 toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 shadow should be defined" name="themes g90 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonPrimary should be defined" name="themes g90 buttonPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSecondary should be defined" name="themes g90 buttonSecondary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 buttonTertiary should be defined" name="themes g90 buttonTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerPrimary should be defined" name="themes g90 buttonDangerPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerSecondary should be defined" name="themes g90 buttonDangerSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundActive should be defined" name="themes g90 backgroundActive should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 layerActive should be defined" name="themes g90 layerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerActive should be defined" name="themes g90 buttonDangerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonPrimaryActive should be defined" name="themes g90 buttonPrimaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSecondaryActive should be defined" name="themes g90 buttonSecondaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonTertiaryActive should be defined" name="themes g90 buttonTertiaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 focusInset should be defined" name="themes g90 focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 focusInverse should be defined" name="themes g90 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundHover should be defined" name="themes g90 backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerHover should be defined" name="themes g90 layerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fieldHover should be defined" name="themes g90 fieldHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverseHover should be defined" name="themes g90 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkPrimaryHover should be defined" name="themes g90 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerHover should be defined" name="themes g90 buttonDangerHover should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 buttonPrimaryHover should be defined" name="themes g90 buttonPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSecondaryHover should be defined" name="themes g90 buttonSecondaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonTertiaryHover should be defined" name="themes g90 buttonTertiaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelected should be defined" name="themes g90 backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelectedHover should be defined" name="themes g90 backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelected should be defined" name="themes g90 layerSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedHover should be defined" name="themes g90 layerSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedInverse should be defined" name="themes g90 layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtleSelected should be defined" name="themes g90 borderSubtleSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderDisabled should be defined" name="themes g90 borderDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 textDisabled should be defined" name="themes g90 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDisabled should be defined" name="themes g90 buttonDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconDisabled should be defined" name="themes g90 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColorDisabled should be defined" name="themes g90 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColorDisabled should be defined" name="themes g90 iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedDisabled should be defined" name="themes g90 layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 skeletonBackground should be defined" name="themes g90 skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 skeletonElement should be defined" name="themes g90 skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 brand01 should be defined" name="themes g90 brand01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 brand02 should be defined" name="themes g90 brand02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 brand03 should be defined" name="themes g90 brand03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 active01 should be defined" name="themes g90 active01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 hoverField should be defined" name="themes g90 hoverField should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 danger should be defined" name="themes g90 danger should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 caption01 should be defined" name="themes g90 caption01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 caption02 should be defined" name="themes g90 caption02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 label01 should be defined" name="themes g90 label01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 label02 should be defined" name="themes g90 label02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 helperText01 should be defined" name="themes g90 helperText01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 helperText02 should be defined" name="themes g90 helperText02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyShort01 should be defined" name="themes g90 bodyShort01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyLong01 should be defined" name="themes g90 bodyLong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyShort02 should be defined" name="themes g90 bodyShort02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyLong02 should be defined" name="themes g90 bodyLong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 code01 should be defined" name="themes g90 code01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 code02 should be defined" name="themes g90 code02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading01 should be defined" name="themes g90 heading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading01 should be defined" name="themes g90 productiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading02 should be defined" name="themes g90 heading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading02 should be defined" name="themes g90 productiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading03 should be defined" name="themes g90 productiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading04 should be defined" name="themes g90 productiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading05 should be defined" name="themes g90 productiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading06 should be defined" name="themes g90 productiveHeading06 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 productiveHeading07 should be defined" name="themes g90 productiveHeading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading01 should be defined" name="themes g90 expressiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading02 should be defined" name="themes g90 expressiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading03 should be defined" name="themes g90 expressiveHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading04 should be defined" name="themes g90 expressiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading05 should be defined" name="themes g90 expressiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading06 should be defined" name="themes g90 expressiveHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveParagraph01 should be defined" name="themes g90 expressiveParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 quotation01 should be defined" name="themes g90 quotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 quotation02 should be defined" name="themes g90 quotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 display01 should be defined" name="themes g90 display01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 display02 should be defined" name="themes g90 display02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 display03 should be defined" name="themes g90 display03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 display04 should be defined" name="themes g90 display04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 legal01 should be defined" name="themes g90 legal01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 legal02 should be defined" name="themes g90 legal02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyCompact01 should be defined" name="themes g90 bodyCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 bodyCompact02 should be defined" name="themes g90 bodyCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 body01 should be defined" name="themes g90 body01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 body02 should be defined" name="themes g90 body02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 headingCompact01 should be defined" name="themes g90 headingCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 headingCompact02 should be defined" name="themes g90 headingCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading03 should be defined" name="themes g90 heading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading04 should be defined" name="themes g90 heading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading05 should be defined" name="themes g90 heading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading06 should be defined" name="themes g90 heading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 heading07 should be defined" name="themes g90 heading07 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 fluidHeading03 should be defined" name="themes g90 fluidHeading03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 fluidHeading04 should be defined" name="themes g90 fluidHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidHeading05 should be defined" name="themes g90 fluidHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidHeading06 should be defined" name="themes g90 fluidHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidParagraph01 should be defined" name="themes g90 fluidParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidQuotation01 should be defined" name="themes g90 fluidQuotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidQuotation02 should be defined" name="themes g90 fluidQuotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay01 should be defined" name="themes g90 fluidDisplay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay02 should be defined" name="themes g90 fluidDisplay02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay03 should be defined" name="themes g90 fluidDisplay03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay04 should be defined" name="themes g90 fluidDisplay04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing01 should be defined" name="themes g90 spacing01 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g90 spacing02 should be defined" name="themes g90 spacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing03 should be defined" name="themes g90 spacing03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 spacing04 should be defined" name="themes g90 spacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing05 should be defined" name="themes g90 spacing05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing06 should be defined" name="themes g90 spacing06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing07 should be defined" name="themes g90 spacing07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing08 should be defined" name="themes g90 spacing08 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing09 should be defined" name="themes g90 spacing09 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing10 should be defined" name="themes g90 spacing10 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing11 should be defined" name="themes g90 spacing11 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 spacing12 should be defined" name="themes g90 spacing12 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 spacing13 should be defined" name="themes g90 spacing13 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing01 should be defined" name="themes g90 fluidSpacing01 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g90 fluidSpacing02 should be defined" name="themes g90 fluidSpacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing03 should be defined" name="themes g90 fluidSpacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing04 should be defined" name="themes g90 fluidSpacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 container01 should be defined" name="themes g90 container01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 container02 should be defined" name="themes g90 container02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 container03 should be defined" name="themes g90 container03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 container04 should be defined" name="themes g90 container04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 container05 should be defined" name="themes g90 container05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 sizeXSmall should be defined" name="themes g90 sizeXSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 sizeSmall should be defined" name="themes g90 sizeSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 sizeMedium should be defined" name="themes g90 sizeMedium should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 sizeLarge should be defined" name="themes g90 sizeLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 sizeXLarge should be defined" name="themes g90 sizeXLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 size2XLarge should be defined" name="themes g90 size2XLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconSize01 should be defined" name="themes g90 iconSize01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconSize02 should be defined" name="themes g90 iconSize02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout01 should be defined" name="themes g90 layout01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout02 should be defined" name="themes g90 layout02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout03 should be defined" name="themes g90 layout03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout04 should be defined" name="themes g90 layout04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout05 should be defined" name="themes g90 layout05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout06 should be defined" name="themes g90 layout06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layout07 should be defined" name="themes g90 layout07 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 active01 should be a token" name="themes g90 active01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activeDanger should be a token" name="themes g90 activeDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activeLightUI should be a token" name="themes g90 activeLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activePrimary should be a token" name="themes g90 activePrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activeSecondary should be a token" name="themes g90 activeSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activeTertiary should be a token" name="themes g90 activeTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 activeUI should be a token" name="themes g90 activeUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 background should be a token" name="themes g90 background should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundActive should be a token" name="themes g90 backgroundActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundBrand should be a token" name="themes g90 backgroundBrand should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundHover should be a token" name="themes g90 backgroundHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverse should be a token" name="themes g90 backgroundInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverseHover should be a token" name="themes g90 backgroundInverseHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelected should be a token" name="themes g90 backgroundSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelectedHover should be a token" name="themes g90 backgroundSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 body01 should be a token" name="themes g90 body01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 body02 should be a token" name="themes g90 body02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 bodyCompact01 should be a token" name="themes g90 bodyCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 bodyCompact02 should be a token" name="themes g90 bodyCompact02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 bodyLong01 should be a token" name="themes g90 bodyLong01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 bodyLong02 should be a token" name="themes g90 bodyLong02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 bodyShort01 should be a token" name="themes g90 bodyShort01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 bodyShort02 should be a token" name="themes g90 bodyShort02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 borderDisabled should be a token" name="themes g90 borderDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 borderInteractive should be a token" name="themes g90 borderInteractive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 borderInverse should be a token" name="themes g90 borderInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 borderStrong should be a token" name="themes g90 borderStrong should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtle should be a token" name="themes g90 borderSubtle should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 borderSubtleSelected should be a token" name="themes g90 borderSubtleSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 brand01 should be a token" name="themes g90 brand01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 brand02 should be a token" name="themes g90 brand02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 brand03 should be a token" name="themes g90 brand03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerActive should be a token" name="themes g90 buttonDangerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerHover should be a token" name="themes g90 buttonDangerHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 buttonDangerPrimary should be a token" name="themes g90 buttonDangerPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDangerSecondary should be a token" name="themes g90 buttonDangerSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonDisabled should be a token" name="themes g90 buttonDisabled should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 buttonPrimary should be a token" name="themes g90 buttonPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonPrimaryActive should be a token" name="themes g90 buttonPrimaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonPrimaryHover should be a token" name="themes g90 buttonPrimaryHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 buttonSecondary should be a token" name="themes g90 buttonSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSecondaryActive should be a token" name="themes g90 buttonSecondaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSecondaryHover should be a token" name="themes g90 buttonSecondaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonSeparator should be a token" name="themes g90 buttonSeparator should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonTertiary should be a token" name="themes g90 buttonTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonTertiaryActive should be a token" name="themes g90 buttonTertiaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 buttonTertiaryHover should be a token" name="themes g90 buttonTertiaryHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 caption01 should be a token" name="themes g90 caption01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 caption02 should be a token" name="themes g90 caption02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 code01 should be a token" name="themes g90 code01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 code02 should be a token" name="themes g90 code02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 container01 should be a token" name="themes g90 container01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 container02 should be a token" name="themes g90 container02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 container03 should be a token" name="themes g90 container03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 container04 should be a token" name="themes g90 container04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 container05 should be a token" name="themes g90 container05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 danger should be a token" name="themes g90 danger should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 danger01 should be a token" name="themes g90 danger01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 danger02 should be a token" name="themes g90 danger02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 decorative01 should be a token" name="themes g90 decorative01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 disabled01 should be a token" name="themes g90 disabled01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 disabled02 should be a token" name="themes g90 disabled02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 disabled03 should be a token" name="themes g90 disabled03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 display01 should be a token" name="themes g90 display01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 display02 should be a token" name="themes g90 display02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 display03 should be a token" name="themes g90 display03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 display04 should be a token" name="themes g90 display04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading01 should be a token" name="themes g90 expressiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading02 should be a token" name="themes g90 expressiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading03 should be a token" name="themes g90 expressiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading04 should be a token" name="themes g90 expressiveHeading04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 expressiveHeading05 should be a token" name="themes g90 expressiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveHeading06 should be a token" name="themes g90 expressiveHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 expressiveParagraph01 should be a token" name="themes g90 expressiveParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 field should be a token" name="themes g90 field should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 field01 should be a token" name="themes g90 field01 should be a token" time="0.002">
    </testcase>
    <testcase classname="themes g90 field02 should be a token" name="themes g90 field02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fieldHover should be a token" name="themes g90 fieldHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 fluidDisplay01 should be a token" name="themes g90 fluidDisplay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay02 should be a token" name="themes g90 fluidDisplay02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay03 should be a token" name="themes g90 fluidDisplay03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidDisplay04 should be a token" name="themes g90 fluidDisplay04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 fluidHeading03 should be a token" name="themes g90 fluidHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidHeading04 should be a token" name="themes g90 fluidHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidHeading05 should be a token" name="themes g90 fluidHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidHeading06 should be a token" name="themes g90 fluidHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidParagraph01 should be a token" name="themes g90 fluidParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidQuotation01 should be a token" name="themes g90 fluidQuotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidQuotation02 should be a token" name="themes g90 fluidQuotation02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 fluidSpacing01 should be a token" name="themes g90 fluidSpacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing02 should be a token" name="themes g90 fluidSpacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing03 should be a token" name="themes g90 fluidSpacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 fluidSpacing04 should be a token" name="themes g90 fluidSpacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 focus should be a token" name="themes g90 focus should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 focusInset should be a token" name="themes g90 focusInset should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 focusInverse should be a token" name="themes g90 focusInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading01 should be a token" name="themes g90 heading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading02 should be a token" name="themes g90 heading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading03 should be a token" name="themes g90 heading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading04 should be a token" name="themes g90 heading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading05 should be a token" name="themes g90 heading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 heading06 should be a token" name="themes g90 heading06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 heading07 should be a token" name="themes g90 heading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 headingCompact01 should be a token" name="themes g90 headingCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 headingCompact02 should be a token" name="themes g90 headingCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 helperText01 should be a token" name="themes g90 helperText01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 helperText02 should be a token" name="themes g90 helperText02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 highlight should be a token" name="themes g90 highlight should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverDanger should be a token" name="themes g90 hoverDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverField should be a token" name="themes g90 hoverField should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 hoverLightUI should be a token" name="themes g90 hoverLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverPrimary should be a token" name="themes g90 hoverPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverPrimaryText should be a token" name="themes g90 hoverPrimaryText should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverRow should be a token" name="themes g90 hoverRow should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverSecondary should be a token" name="themes g90 hoverSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverSelectedUI should be a token" name="themes g90 hoverSelectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 hoverTertiary should be a token" name="themes g90 hoverTertiary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 hoverUI should be a token" name="themes g90 hoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 icon01 should be a token" name="themes g90 icon01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 icon02 should be a token" name="themes g90 icon02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 icon03 should be a token" name="themes g90 icon03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconDisabled should be a token" name="themes g90 iconDisabled should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 iconInverse should be a token" name="themes g90 iconInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColor should be a token" name="themes g90 iconOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColorDisabled should be a token" name="themes g90 iconOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconPrimary should be a token" name="themes g90 iconPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconSecondary should be a token" name="themes g90 iconSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 iconSize01 should be a token" name="themes g90 iconSize01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 iconSize02 should be a token" name="themes g90 iconSize02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 interactive should be a token" name="themes g90 interactive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 interactive01 should be a token" name="themes g90 interactive01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 interactive02 should be a token" name="themes g90 interactive02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 interactive03 should be a token" name="themes g90 interactive03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 interactive04 should be a token" name="themes g90 interactive04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverse01 should be a token" name="themes g90 inverse01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverse02 should be a token" name="themes g90 inverse02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseFocusUi should be a token" name="themes g90 inverseFocusUi should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseHoverUI should be a token" name="themes g90 inverseHoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseLink should be a token" name="themes g90 inverseLink should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport01 should be a token" name="themes g90 inverseSupport01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport02 should be a token" name="themes g90 inverseSupport02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport03 should be a token" name="themes g90 inverseSupport03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 inverseSupport04 should be a token" name="themes g90 inverseSupport04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 label01 should be a token" name="themes g90 label01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 label02 should be a token" name="themes g90 label02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layer should be a token" name="themes g90 layer should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccent should be a token" name="themes g90 layerAccent should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentActive should be a token" name="themes g90 layerAccentActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentHover should be a token" name="themes g90 layerAccentHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerActive should be a token" name="themes g90 layerActive should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 layerHover should be a token" name="themes g90 layerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelected should be a token" name="themes g90 layerSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedDisabled should be a token" name="themes g90 layerSelectedDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedHover should be a token" name="themes g90 layerSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedInverse should be a token" name="themes g90 layerSelectedInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout01 should be a token" name="themes g90 layout01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout02 should be a token" name="themes g90 layout02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout03 should be a token" name="themes g90 layout03 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 layout04 should be a token" name="themes g90 layout04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout05 should be a token" name="themes g90 layout05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout06 should be a token" name="themes g90 layout06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 layout07 should be a token" name="themes g90 layout07 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 legal01 should be a token" name="themes g90 legal01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 legal02 should be a token" name="themes g90 legal02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 link01 should be a token" name="themes g90 link01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 link02 should be a token" name="themes g90 link02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverse should be a token" name="themes g90 linkInverse should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 linkPrimary should be a token" name="themes g90 linkPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 linkPrimaryHover should be a token" name="themes g90 linkPrimaryHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 linkSecondary should be a token" name="themes g90 linkSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 linkVisited should be a token" name="themes g90 linkVisited should be a token" time="0.004">
    </testcase>
    <testcase classname="themes g90 overlay should be a token" name="themes g90 overlay should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 overlay01 should be a token" name="themes g90 overlay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading01 should be a token" name="themes g90 productiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading02 should be a token" name="themes g90 productiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading03 should be a token" name="themes g90 productiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading04 should be a token" name="themes g90 productiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading05 should be a token" name="themes g90 productiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 productiveHeading06 should be a token" name="themes g90 productiveHeading06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 productiveHeading07 should be a token" name="themes g90 productiveHeading07 should be a token" time="0.004">
    </testcase>
    <testcase classname="themes g90 quotation01 should be a token" name="themes g90 quotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 quotation02 should be a token" name="themes g90 quotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 selectedLightUI should be a token" name="themes g90 selectedLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 selectedUI should be a token" name="themes g90 selectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 shadow should be a token" name="themes g90 shadow should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 size2XLarge should be a token" name="themes g90 size2XLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 sizeLarge should be a token" name="themes g90 sizeLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 sizeMedium should be a token" name="themes g90 sizeMedium should be a token" time="0.002">
    </testcase>
    <testcase classname="themes g90 sizeSmall should be a token" name="themes g90 sizeSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 sizeXLarge should be a token" name="themes g90 sizeXLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 sizeXSmall should be a token" name="themes g90 sizeXSmall should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 skeleton01 should be a token" name="themes g90 skeleton01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 skeleton02 should be a token" name="themes g90 skeleton02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 skeletonBackground should be a token" name="themes g90 skeletonBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 skeletonElement should be a token" name="themes g90 skeletonElement should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing01 should be a token" name="themes g90 spacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing02 should be a token" name="themes g90 spacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing03 should be a token" name="themes g90 spacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing04 should be a token" name="themes g90 spacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing05 should be a token" name="themes g90 spacing05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing06 should be a token" name="themes g90 spacing06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing07 should be a token" name="themes g90 spacing07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing08 should be a token" name="themes g90 spacing08 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing09 should be a token" name="themes g90 spacing09 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing10 should be a token" name="themes g90 spacing10 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 spacing11 should be a token" name="themes g90 spacing11 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing12 should be a token" name="themes g90 spacing12 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 spacing13 should be a token" name="themes g90 spacing13 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 support01 should be a token" name="themes g90 support01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 support02 should be a token" name="themes g90 support02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 support03 should be a token" name="themes g90 support03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 support04 should be a token" name="themes g90 support04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportError should be a token" name="themes g90 supportError should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportErrorInverse should be a token" name="themes g90 supportErrorInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportInfo should be a token" name="themes g90 supportInfo should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportInfoInverse should be a token" name="themes g90 supportInfoInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportSuccess should be a token" name="themes g90 supportSuccess should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportSuccessInverse should be a token" name="themes g90 supportSuccessInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportWarning should be a token" name="themes g90 supportWarning should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 supportWarningInverse should be a token" name="themes g90 supportWarningInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 text01 should be a token" name="themes g90 text01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 text02 should be a token" name="themes g90 text02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 text03 should be a token" name="themes g90 text03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 text04 should be a token" name="themes g90 text04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g90 text05 should be a token" name="themes g90 text05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textDisabled should be a token" name="themes g90 textDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textError should be a token" name="themes g90 textError should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textHelper should be a token" name="themes g90 textHelper should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textInverse should be a token" name="themes g90 textInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColor should be a token" name="themes g90 textOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColorDisabled should be a token" name="themes g90 textOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textPlaceholder should be a token" name="themes g90 textPlaceholder should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textPrimary should be a token" name="themes g90 textPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 textSecondary should be a token" name="themes g90 textSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 toggleOff should be a token" name="themes g90 toggleOff should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 ui01 should be a token" name="themes g90 ui01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 ui02 should be a token" name="themes g90 ui02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 ui03 should be a token" name="themes g90 ui03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 ui04 should be a token" name="themes g90 ui04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 ui05 should be a token" name="themes g90 ui05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 uiBackground should be a token" name="themes g90 uiBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g90 visitedLink should be a token" name="themes g90 visitedLink should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive01 should be defined" name="themes g100 interactive01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 interactive02 should be defined" name="themes g100 interactive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 interactive03 should be defined" name="themes g100 interactive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 interactive04 should be defined" name="themes g100 interactive04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 uiBackground should be defined" name="themes g100 uiBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 ui01 should be defined" name="themes g100 ui01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 ui02 should be defined" name="themes g100 ui02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 ui03 should be defined" name="themes g100 ui03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 ui04 should be defined" name="themes g100 ui04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 ui05 should be defined" name="themes g100 ui05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 text01 should be defined" name="themes g100 text01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 text02 should be defined" name="themes g100 text02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 text03 should be defined" name="themes g100 text03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 text04 should be defined" name="themes g100 text04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 text05 should be defined" name="themes g100 text05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textError should be defined" name="themes g100 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 icon01 should be defined" name="themes g100 icon01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 icon02 should be defined" name="themes g100 icon02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 icon03 should be defined" name="themes g100 icon03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 link01 should be defined" name="themes g100 link01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 link02 should be defined" name="themes g100 link02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseLink should be defined" name="themes g100 inverseLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field01 should be defined" name="themes g100 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field02 should be defined" name="themes g100 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverse01 should be defined" name="themes g100 inverse01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverse02 should be defined" name="themes g100 inverse02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 support01 should be defined" name="themes g100 support01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 support02 should be defined" name="themes g100 support02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 support03 should be defined" name="themes g100 support03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 support04 should be defined" name="themes g100 support04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport01 should be defined" name="themes g100 inverseSupport01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport02 should be defined" name="themes g100 inverseSupport02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport03 should be defined" name="themes g100 inverseSupport03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport04 should be defined" name="themes g100 inverseSupport04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 overlay01 should be defined" name="themes g100 overlay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 danger01 should be defined" name="themes g100 danger01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 danger02 should be defined" name="themes g100 danger02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focus should be defined" name="themes g100 focus should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseFocusUi should be defined" name="themes g100 inverseFocusUi should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverPrimary should be defined" name="themes g100 hoverPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activePrimary should be defined" name="themes g100 activePrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverPrimaryText should be defined" name="themes g100 hoverPrimaryText should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverSecondary should be defined" name="themes g100 hoverSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activeSecondary should be defined" name="themes g100 activeSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverTertiary should be defined" name="themes g100 hoverTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activeTertiary should be defined" name="themes g100 activeTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverUI should be defined" name="themes g100 hoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverLightUI should be defined" name="themes g100 hoverLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverSelectedUI should be defined" name="themes g100 hoverSelectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activeUI should be defined" name="themes g100 activeUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activeLightUI should be defined" name="themes g100 activeLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 selectedUI should be defined" name="themes g100 selectedUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 selectedLightUI should be defined" name="themes g100 selectedLightUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 inverseHoverUI should be defined" name="themes g100 inverseHoverUI should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverDanger should be defined" name="themes g100 hoverDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 activeDanger should be defined" name="themes g100 activeDanger should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverRow should be defined" name="themes g100 hoverRow should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 visitedLink should be defined" name="themes g100 visitedLink should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 disabled01 should be defined" name="themes g100 disabled01 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 disabled02 should be defined" name="themes g100 disabled02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 disabled03 should be defined" name="themes g100 disabled03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 highlight should be defined" name="themes g100 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 decorative01 should be defined" name="themes g100 decorative01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSeparator should be defined" name="themes g100 buttonSeparator should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeleton01 should be defined" name="themes g100 skeleton01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeleton02 should be defined" name="themes g100 skeleton02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 background should be defined" name="themes g100 background should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layer should be defined" name="themes g100 layer should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccent should be defined" name="themes g100 layerAccent should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentHover should be defined" name="themes g100 layerAccentHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentActive should be defined" name="themes g100 layerAccentActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field should be defined" name="themes g100 field should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundInverse should be defined" name="themes g100 backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundBrand should be defined" name="themes g100 backgroundBrand should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 interactive should be defined" name="themes g100 interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle should be defined" name="themes g100 borderSubtle should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderStrong should be defined" name="themes g100 borderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderInverse should be defined" name="themes g100 borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderInteractive should be defined" name="themes g100 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textPrimary should be defined" name="themes g100 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textSecondary should be defined" name="themes g100 textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textPlaceholder should be defined" name="themes g100 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textHelper should be defined" name="themes g100 textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColor should be defined" name="themes g100 textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textInverse should be defined" name="themes g100 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimary should be defined" name="themes g100 linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkSecondary should be defined" name="themes g100 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkVisited should be defined" name="themes g100 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverse should be defined" name="themes g100 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconPrimary should be defined" name="themes g100 iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconSecondary should be defined" name="themes g100 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconOnColor should be defined" name="themes g100 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconInverse should be defined" name="themes g100 iconInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 supportError should be defined" name="themes g100 supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportSuccess should be defined" name="themes g100 supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarning should be defined" name="themes g100 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfo should be defined" name="themes g100 supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportErrorInverse should be defined" name="themes g100 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportSuccessInverse should be defined" name="themes g100 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarningInverse should be defined" name="themes g100 supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfoInverse should be defined" name="themes g100 supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 overlay should be defined" name="themes g100 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 toggleOff should be defined" name="themes g100 toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 shadow should be defined" name="themes g100 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimary should be defined" name="themes g100 buttonPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSecondary should be defined" name="themes g100 buttonSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiary should be defined" name="themes g100 buttonTertiary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerPrimary should be defined" name="themes g100 buttonDangerPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerSecondary should be defined" name="themes g100 buttonDangerSecondary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 backgroundActive should be defined" name="themes g100 backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerActive should be defined" name="themes g100 layerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerActive should be defined" name="themes g100 buttonDangerActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimaryActive should be defined" name="themes g100 buttonPrimaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSecondaryActive should be defined" name="themes g100 buttonSecondaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiaryActive should be defined" name="themes g100 buttonTertiaryActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focusInset should be defined" name="themes g100 focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focusInverse should be defined" name="themes g100 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundHover should be defined" name="themes g100 backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerHover should be defined" name="themes g100 layerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fieldHover should be defined" name="themes g100 fieldHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundInverseHover should be defined" name="themes g100 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimaryHover should be defined" name="themes g100 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerHover should be defined" name="themes g100 buttonDangerHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimaryHover should be defined" name="themes g100 buttonPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSecondaryHover should be defined" name="themes g100 buttonSecondaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiaryHover should be defined" name="themes g100 buttonTertiaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundSelected should be defined" name="themes g100 backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundSelectedHover should be defined" name="themes g100 backgroundSelectedHover should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerSelected should be defined" name="themes g100 layerSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedHover should be defined" name="themes g100 layerSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedInverse should be defined" name="themes g100 layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtleSelected should be defined" name="themes g100 borderSubtleSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderDisabled should be defined" name="themes g100 borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textDisabled should be defined" name="themes g100 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDisabled should be defined" name="themes g100 buttonDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconDisabled should be defined" name="themes g100 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColorDisabled should be defined" name="themes g100 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconOnColorDisabled should be defined" name="themes g100 iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedDisabled should be defined" name="themes g100 layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonBackground should be defined" name="themes g100 skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonElement should be defined" name="themes g100 skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 brand01 should be defined" name="themes g100 brand01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 brand02 should be defined" name="themes g100 brand02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 brand03 should be defined" name="themes g100 brand03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 active01 should be defined" name="themes g100 active01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 hoverField should be defined" name="themes g100 hoverField should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 danger should be defined" name="themes g100 danger should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 caption01 should be defined" name="themes g100 caption01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 caption02 should be defined" name="themes g100 caption02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 label01 should be defined" name="themes g100 label01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 label02 should be defined" name="themes g100 label02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 helperText01 should be defined" name="themes g100 helperText01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 helperText02 should be defined" name="themes g100 helperText02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyShort01 should be defined" name="themes g100 bodyShort01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyLong01 should be defined" name="themes g100 bodyLong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyShort02 should be defined" name="themes g100 bodyShort02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyLong02 should be defined" name="themes g100 bodyLong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 code01 should be defined" name="themes g100 code01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 code02 should be defined" name="themes g100 code02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading01 should be defined" name="themes g100 heading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading01 should be defined" name="themes g100 productiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading02 should be defined" name="themes g100 heading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading02 should be defined" name="themes g100 productiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading03 should be defined" name="themes g100 productiveHeading03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 productiveHeading04 should be defined" name="themes g100 productiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading05 should be defined" name="themes g100 productiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading06 should be defined" name="themes g100 productiveHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading07 should be defined" name="themes g100 productiveHeading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading01 should be defined" name="themes g100 expressiveHeading01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading02 should be defined" name="themes g100 expressiveHeading02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading03 should be defined" name="themes g100 expressiveHeading03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 expressiveHeading04 should be defined" name="themes g100 expressiveHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading05 should be defined" name="themes g100 expressiveHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading06 should be defined" name="themes g100 expressiveHeading06 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 expressiveParagraph01 should be defined" name="themes g100 expressiveParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 quotation01 should be defined" name="themes g100 quotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 quotation02 should be defined" name="themes g100 quotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 display01 should be defined" name="themes g100 display01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 display02 should be defined" name="themes g100 display02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 display03 should be defined" name="themes g100 display03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 display04 should be defined" name="themes g100 display04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 legal01 should be defined" name="themes g100 legal01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 legal02 should be defined" name="themes g100 legal02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyCompact01 should be defined" name="themes g100 bodyCompact01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 bodyCompact02 should be defined" name="themes g100 bodyCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 body01 should be defined" name="themes g100 body01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 body02 should be defined" name="themes g100 body02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 headingCompact01 should be defined" name="themes g100 headingCompact01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 headingCompact02 should be defined" name="themes g100 headingCompact02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading03 should be defined" name="themes g100 heading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading04 should be defined" name="themes g100 heading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading05 should be defined" name="themes g100 heading05 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 heading06 should be defined" name="themes g100 heading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 heading07 should be defined" name="themes g100 heading07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading03 should be defined" name="themes g100 fluidHeading03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading04 should be defined" name="themes g100 fluidHeading04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading05 should be defined" name="themes g100 fluidHeading05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading06 should be defined" name="themes g100 fluidHeading06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidParagraph01 should be defined" name="themes g100 fluidParagraph01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidQuotation01 should be defined" name="themes g100 fluidQuotation01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidQuotation02 should be defined" name="themes g100 fluidQuotation02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay01 should be defined" name="themes g100 fluidDisplay01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay02 should be defined" name="themes g100 fluidDisplay02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay03 should be defined" name="themes g100 fluidDisplay03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay04 should be defined" name="themes g100 fluidDisplay04 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 spacing01 should be defined" name="themes g100 spacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing02 should be defined" name="themes g100 spacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing03 should be defined" name="themes g100 spacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing04 should be defined" name="themes g100 spacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing05 should be defined" name="themes g100 spacing05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing06 should be defined" name="themes g100 spacing06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing07 should be defined" name="themes g100 spacing07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing08 should be defined" name="themes g100 spacing08 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing09 should be defined" name="themes g100 spacing09 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing10 should be defined" name="themes g100 spacing10 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing11 should be defined" name="themes g100 spacing11 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 spacing12 should be defined" name="themes g100 spacing12 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 spacing13 should be defined" name="themes g100 spacing13 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing01 should be defined" name="themes g100 fluidSpacing01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing02 should be defined" name="themes g100 fluidSpacing02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing03 should be defined" name="themes g100 fluidSpacing03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing04 should be defined" name="themes g100 fluidSpacing04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 container01 should be defined" name="themes g100 container01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 container02 should be defined" name="themes g100 container02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 container03 should be defined" name="themes g100 container03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 container04 should be defined" name="themes g100 container04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 container05 should be defined" name="themes g100 container05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 sizeXSmall should be defined" name="themes g100 sizeXSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 sizeSmall should be defined" name="themes g100 sizeSmall should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 sizeMedium should be defined" name="themes g100 sizeMedium should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 sizeLarge should be defined" name="themes g100 sizeLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 sizeXLarge should be defined" name="themes g100 sizeXLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 size2XLarge should be defined" name="themes g100 size2XLarge should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconSize01 should be defined" name="themes g100 iconSize01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconSize02 should be defined" name="themes g100 iconSize02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout01 should be defined" name="themes g100 layout01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout02 should be defined" name="themes g100 layout02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout03 should be defined" name="themes g100 layout03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout04 should be defined" name="themes g100 layout04 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout05 should be defined" name="themes g100 layout05 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout06 should be defined" name="themes g100 layout06 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layout07 should be defined" name="themes g100 layout07 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 active01 should be a token" name="themes g100 active01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 activeDanger should be a token" name="themes g100 activeDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 activeLightUI should be a token" name="themes g100 activeLightUI should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 activePrimary should be a token" name="themes g100 activePrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 activeSecondary should be a token" name="themes g100 activeSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 activeTertiary should be a token" name="themes g100 activeTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 activeUI should be a token" name="themes g100 activeUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 background should be a token" name="themes g100 background should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 backgroundActive should be a token" name="themes g100 backgroundActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundBrand should be a token" name="themes g100 backgroundBrand should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundHover should be a token" name="themes g100 backgroundHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundInverse should be a token" name="themes g100 backgroundInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundInverseHover should be a token" name="themes g100 backgroundInverseHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundSelected should be a token" name="themes g100 backgroundSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundSelectedHover should be a token" name="themes g100 backgroundSelectedHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 body01 should be a token" name="themes g100 body01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 body02 should be a token" name="themes g100 body02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 bodyCompact01 should be a token" name="themes g100 bodyCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 bodyCompact02 should be a token" name="themes g100 bodyCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 bodyLong01 should be a token" name="themes g100 bodyLong01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 bodyLong02 should be a token" name="themes g100 bodyLong02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 bodyShort01 should be a token" name="themes g100 bodyShort01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 bodyShort02 should be a token" name="themes g100 bodyShort02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderDisabled should be a token" name="themes g100 borderDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderInteractive should be a token" name="themes g100 borderInteractive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderInverse should be a token" name="themes g100 borderInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderStrong should be a token" name="themes g100 borderStrong should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle should be a token" name="themes g100 borderSubtle should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtleSelected should be a token" name="themes g100 borderSubtleSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 brand01 should be a token" name="themes g100 brand01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 brand02 should be a token" name="themes g100 brand02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 brand03 should be a token" name="themes g100 brand03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerActive should be a token" name="themes g100 buttonDangerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerHover should be a token" name="themes g100 buttonDangerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerPrimary should be a token" name="themes g100 buttonDangerPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonDangerSecondary should be a token" name="themes g100 buttonDangerSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 buttonDisabled should be a token" name="themes g100 buttonDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimary should be a token" name="themes g100 buttonPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimaryActive should be a token" name="themes g100 buttonPrimaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonPrimaryHover should be a token" name="themes g100 buttonPrimaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSecondary should be a token" name="themes g100 buttonSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 buttonSecondaryActive should be a token" name="themes g100 buttonSecondaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSecondaryHover should be a token" name="themes g100 buttonSecondaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonSeparator should be a token" name="themes g100 buttonSeparator should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiary should be a token" name="themes g100 buttonTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiaryActive should be a token" name="themes g100 buttonTertiaryActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 buttonTertiaryHover should be a token" name="themes g100 buttonTertiaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 caption01 should be a token" name="themes g100 caption01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 caption02 should be a token" name="themes g100 caption02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 code01 should be a token" name="themes g100 code01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 code02 should be a token" name="themes g100 code02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 container01 should be a token" name="themes g100 container01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 container02 should be a token" name="themes g100 container02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 container03 should be a token" name="themes g100 container03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 container04 should be a token" name="themes g100 container04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 container05 should be a token" name="themes g100 container05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 danger should be a token" name="themes g100 danger should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 danger01 should be a token" name="themes g100 danger01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 danger02 should be a token" name="themes g100 danger02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 decorative01 should be a token" name="themes g100 decorative01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 disabled01 should be a token" name="themes g100 disabled01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 disabled02 should be a token" name="themes g100 disabled02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 disabled03 should be a token" name="themes g100 disabled03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 display01 should be a token" name="themes g100 display01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 display02 should be a token" name="themes g100 display02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 display03 should be a token" name="themes g100 display03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 display04 should be a token" name="themes g100 display04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading01 should be a token" name="themes g100 expressiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading02 should be a token" name="themes g100 expressiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading03 should be a token" name="themes g100 expressiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading04 should be a token" name="themes g100 expressiveHeading04 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 expressiveHeading05 should be a token" name="themes g100 expressiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveHeading06 should be a token" name="themes g100 expressiveHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 expressiveParagraph01 should be a token" name="themes g100 expressiveParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 field should be a token" name="themes g100 field should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 field01 should be a token" name="themes g100 field01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 field02 should be a token" name="themes g100 field02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fieldHover should be a token" name="themes g100 fieldHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay01 should be a token" name="themes g100 fluidDisplay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay02 should be a token" name="themes g100 fluidDisplay02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay03 should be a token" name="themes g100 fluidDisplay03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidDisplay04 should be a token" name="themes g100 fluidDisplay04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading03 should be a token" name="themes g100 fluidHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading04 should be a token" name="themes g100 fluidHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidHeading05 should be a token" name="themes g100 fluidHeading05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 fluidHeading06 should be a token" name="themes g100 fluidHeading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidParagraph01 should be a token" name="themes g100 fluidParagraph01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidQuotation01 should be a token" name="themes g100 fluidQuotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidQuotation02 should be a token" name="themes g100 fluidQuotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing01 should be a token" name="themes g100 fluidSpacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing02 should be a token" name="themes g100 fluidSpacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing03 should be a token" name="themes g100 fluidSpacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 fluidSpacing04 should be a token" name="themes g100 fluidSpacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 focus should be a token" name="themes g100 focus should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 focusInset should be a token" name="themes g100 focusInset should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 focusInverse should be a token" name="themes g100 focusInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading01 should be a token" name="themes g100 heading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading02 should be a token" name="themes g100 heading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading03 should be a token" name="themes g100 heading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading04 should be a token" name="themes g100 heading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading05 should be a token" name="themes g100 heading05 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 heading06 should be a token" name="themes g100 heading06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 heading07 should be a token" name="themes g100 heading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 headingCompact01 should be a token" name="themes g100 headingCompact01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 headingCompact02 should be a token" name="themes g100 headingCompact02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 helperText01 should be a token" name="themes g100 helperText01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 helperText02 should be a token" name="themes g100 helperText02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 highlight should be a token" name="themes g100 highlight should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverDanger should be a token" name="themes g100 hoverDanger should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverField should be a token" name="themes g100 hoverField should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverLightUI should be a token" name="themes g100 hoverLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverPrimary should be a token" name="themes g100 hoverPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverPrimaryText should be a token" name="themes g100 hoverPrimaryText should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverRow should be a token" name="themes g100 hoverRow should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverSecondary should be a token" name="themes g100 hoverSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverSelectedUI should be a token" name="themes g100 hoverSelectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverTertiary should be a token" name="themes g100 hoverTertiary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 hoverUI should be a token" name="themes g100 hoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 icon01 should be a token" name="themes g100 icon01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 icon02 should be a token" name="themes g100 icon02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 icon03 should be a token" name="themes g100 icon03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconDisabled should be a token" name="themes g100 iconDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconInverse should be a token" name="themes g100 iconInverse should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 iconOnColor should be a token" name="themes g100 iconOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconOnColorDisabled should be a token" name="themes g100 iconOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconPrimary should be a token" name="themes g100 iconPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconSecondary should be a token" name="themes g100 iconSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 iconSize01 should be a token" name="themes g100 iconSize01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 iconSize02 should be a token" name="themes g100 iconSize02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive should be a token" name="themes g100 interactive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive01 should be a token" name="themes g100 interactive01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive02 should be a token" name="themes g100 interactive02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive03 should be a token" name="themes g100 interactive03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 interactive04 should be a token" name="themes g100 interactive04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverse01 should be a token" name="themes g100 inverse01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverse02 should be a token" name="themes g100 inverse02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseFocusUi should be a token" name="themes g100 inverseFocusUi should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseHoverUI should be a token" name="themes g100 inverseHoverUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseLink should be a token" name="themes g100 inverseLink should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 inverseSupport01 should be a token" name="themes g100 inverseSupport01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport02 should be a token" name="themes g100 inverseSupport02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport03 should be a token" name="themes g100 inverseSupport03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 inverseSupport04 should be a token" name="themes g100 inverseSupport04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 label01 should be a token" name="themes g100 label01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 label02 should be a token" name="themes g100 label02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layer should be a token" name="themes g100 layer should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccent should be a token" name="themes g100 layerAccent should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentActive should be a token" name="themes g100 layerAccentActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentHover should be a token" name="themes g100 layerAccentHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerActive should be a token" name="themes g100 layerActive should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerHover should be a token" name="themes g100 layerHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelected should be a token" name="themes g100 layerSelected should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedDisabled should be a token" name="themes g100 layerSelectedDisabled should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerSelectedHover should be a token" name="themes g100 layerSelectedHover should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerSelectedInverse should be a token" name="themes g100 layerSelectedInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout01 should be a token" name="themes g100 layout01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout02 should be a token" name="themes g100 layout02 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 layout03 should be a token" name="themes g100 layout03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout04 should be a token" name="themes g100 layout04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout05 should be a token" name="themes g100 layout05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout06 should be a token" name="themes g100 layout06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 layout07 should be a token" name="themes g100 layout07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 legal01 should be a token" name="themes g100 legal01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 legal02 should be a token" name="themes g100 legal02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 link01 should be a token" name="themes g100 link01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 link02 should be a token" name="themes g100 link02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverse should be a token" name="themes g100 linkInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimary should be a token" name="themes g100 linkPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimaryHover should be a token" name="themes g100 linkPrimaryHover should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 linkSecondary should be a token" name="themes g100 linkSecondary should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 linkVisited should be a token" name="themes g100 linkVisited should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 overlay should be a token" name="themes g100 overlay should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 overlay01 should be a token" name="themes g100 overlay01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading01 should be a token" name="themes g100 productiveHeading01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading02 should be a token" name="themes g100 productiveHeading02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading03 should be a token" name="themes g100 productiveHeading03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading04 should be a token" name="themes g100 productiveHeading04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading05 should be a token" name="themes g100 productiveHeading05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 productiveHeading06 should be a token" name="themes g100 productiveHeading06 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 productiveHeading07 should be a token" name="themes g100 productiveHeading07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 quotation01 should be a token" name="themes g100 quotation01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 quotation02 should be a token" name="themes g100 quotation02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 selectedLightUI should be a token" name="themes g100 selectedLightUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 selectedUI should be a token" name="themes g100 selectedUI should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 shadow should be a token" name="themes g100 shadow should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 size2XLarge should be a token" name="themes g100 size2XLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 sizeLarge should be a token" name="themes g100 sizeLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 sizeMedium should be a token" name="themes g100 sizeMedium should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 sizeSmall should be a token" name="themes g100 sizeSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 sizeXLarge should be a token" name="themes g100 sizeXLarge should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 sizeXSmall should be a token" name="themes g100 sizeXSmall should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 skeleton01 should be a token" name="themes g100 skeleton01 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 skeleton02 should be a token" name="themes g100 skeleton02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonBackground should be a token" name="themes g100 skeletonBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonElement should be a token" name="themes g100 skeletonElement should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing01 should be a token" name="themes g100 spacing01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing02 should be a token" name="themes g100 spacing02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing03 should be a token" name="themes g100 spacing03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing04 should be a token" name="themes g100 spacing04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing05 should be a token" name="themes g100 spacing05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing06 should be a token" name="themes g100 spacing06 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing07 should be a token" name="themes g100 spacing07 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing08 should be a token" name="themes g100 spacing08 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing09 should be a token" name="themes g100 spacing09 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 spacing10 should be a token" name="themes g100 spacing10 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing11 should be a token" name="themes g100 spacing11 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing12 should be a token" name="themes g100 spacing12 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 spacing13 should be a token" name="themes g100 spacing13 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 support01 should be a token" name="themes g100 support01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 support02 should be a token" name="themes g100 support02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 support03 should be a token" name="themes g100 support03 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 support04 should be a token" name="themes g100 support04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportError should be a token" name="themes g100 supportError should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportErrorInverse should be a token" name="themes g100 supportErrorInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfo should be a token" name="themes g100 supportInfo should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfoInverse should be a token" name="themes g100 supportInfoInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportSuccess should be a token" name="themes g100 supportSuccess should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 supportSuccessInverse should be a token" name="themes g100 supportSuccessInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarning should be a token" name="themes g100 supportWarning should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarningInverse should be a token" name="themes g100 supportWarningInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 text01 should be a token" name="themes g100 text01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 text02 should be a token" name="themes g100 text02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 text03 should be a token" name="themes g100 text03 should be a token" time="0.001">
    </testcase>
    <testcase classname="themes g100 text04 should be a token" name="themes g100 text04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 text05 should be a token" name="themes g100 text05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textDisabled should be a token" name="themes g100 textDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textError should be a token" name="themes g100 textError should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textHelper should be a token" name="themes g100 textHelper should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textInverse should be a token" name="themes g100 textInverse should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColor should be a token" name="themes g100 textOnColor should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColorDisabled should be a token" name="themes g100 textOnColorDisabled should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textPlaceholder should be a token" name="themes g100 textPlaceholder should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textPrimary should be a token" name="themes g100 textPrimary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 textSecondary should be a token" name="themes g100 textSecondary should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 toggleOff should be a token" name="themes g100 toggleOff should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 ui01 should be a token" name="themes g100 ui01 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 ui02 should be a token" name="themes g100 ui02 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 ui03 should be a token" name="themes g100 ui03 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 ui04 should be a token" name="themes g100 ui04 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 ui05 should be a token" name="themes g100 ui05 should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 uiBackground should be a token" name="themes g100 uiBackground should be a token" time="0">
    </testcase>
    <testcase classname="themes g100 visitedLink should be a token" name="themes g100 visitedLink should be a token" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Tile" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:47" time="0.899" tests="31">
    <testcase classname="Tile renders as expected - Component API should spread extra props onto outermost element" name="Tile renders as expected - Component API should spread extra props onto outermost element" time="0.024">
    </testcase>
    <testcase classname="Tile renders as expected - Component API should render children as expected" name="Tile renders as expected - Component API should render children as expected" time="0.004">
    </testcase>
    <testcase classname="Tile renders as expected - Component API should support a custom `className` prop on the outermost element" name="Tile renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="Tile renders as expected - Component API should respect decorator prop" name="Tile renders as expected - Component API should respect decorator prop" time="0.023">
    </testcase>
    <testcase classname="Tile renders as expected - Component API should respect deprecated slug prop" name="Tile renders as expected - Component API should respect deprecated slug prop" time="0.011">
    </testcase>
    <testcase classname="Tile ClickableTile renders with a link" name="Tile ClickableTile renders with a link" time="0.007">
    </testcase>
    <testcase classname="Tile ClickableTile does not invoke the click handler if ClickableTile is disabled" name="Tile ClickableTile does not invoke the click handler if ClickableTile is disabled" time="0.019">
    </testcase>
    <testcase classname="Tile ClickableTile should allow for a custom icon" name="Tile ClickableTile should allow for a custom icon" time="0.003">
    </testcase>
    <testcase classname="Tile ClickableTile should respect decorator prop" name="Tile ClickableTile should respect decorator prop" time="0.007">
    </testcase>
    <testcase classname="Tile ClickableTile should respect deprecated slug prop" name="Tile ClickableTile should respect deprecated slug prop" time="0.003">
    </testcase>
    <testcase classname="Tile ClickableTile should call onKeyDown" name="Tile ClickableTile should call onKeyDown" time="0.029">
    </testcase>
    <testcase classname="Tile Multi Select does not invoke the click handler if SelectableTile is disabled" name="Tile Multi Select does not invoke the click handler if SelectableTile is disabled" time="0.021">
    </testcase>
    <testcase classname="Tile Multi Select should cycle elements in document tab order" name="Tile Multi Select should cycle elements in document tab order" time="0.041">
    </testcase>
    <testcase classname="Tile Multi Select should respect decorator prop" name="Tile Multi Select should respect decorator prop" time="0.031">
    </testcase>
    <testcase classname="Tile Multi Select should respect deprecated slug prop" name="Tile Multi Select should respect deprecated slug prop" time="0.017">
    </testcase>
    <testcase classname="Tile ExpandableTile renders initial children as expected" name="Tile ExpandableTile renders initial children as expected" time="0.015">
    </testcase>
    <testcase classname="Tile ExpandableTile has the expected classes" name="Tile ExpandableTile has the expected classes" time="0.039">
    </testcase>
    <testcase classname="Tile ExpandableTile toggles the expandable class on click" name="Tile ExpandableTile toggles the expandable class on click" time="0.08">
    </testcase>
    <testcase classname="Tile ExpandableTile contains the default tooltip for the button" name="Tile ExpandableTile contains the default tooltip for the button" time="0.027">
    </testcase>
    <testcase classname="Tile ExpandableTile displays the custom tooltips for the button depending on state" name="Tile ExpandableTile displays the custom tooltips for the button depending on state" time="0.028">
    </testcase>
    <testcase classname="Tile ExpandableTile supports setting expanded prop to true" name="Tile ExpandableTile supports setting expanded prop to true" time="0.01">
    </testcase>
    <testcase classname="Tile ExpandableTile supports setting expanded prop to false" name="Tile ExpandableTile supports setting expanded prop to false" time="0.003">
    </testcase>
    <testcase classname="Tile ExpandableTile should respect decorator prop" name="Tile ExpandableTile should respect decorator prop" time="0.009">
    </testcase>
    <testcase classname="Tile ExpandableTile should respect deprecated slug prop" name="Tile ExpandableTile should respect deprecated slug prop" time="0.019">
    </testcase>
    <testcase classname="Tile ExpandableTile with interactive elements does not render the tile as a button and expands/collapses" name="Tile ExpandableTile with interactive elements does not render the tile as a button and expands/collapses" time="0.033">
    </testcase>
    <testcase classname="Tile ExpandableTile with role elements does not render the tile as a button and expands/collapses" name="Tile ExpandableTile with role elements does not render the tile as a button and expands/collapses" time="0.017">
    </testcase>
    <testcase classname="Tile ExpandableTile with role elements supports interactive elements in expanded state" name="Tile ExpandableTile with role elements supports interactive elements in expanded state" time="0.023">
    </testcase>
    <testcase classname="Tile respect selected prop" name="Tile respect selected prop" time="0.012">
    </testcase>
    <testcase classname="Tile SelectableTile Should call onChange with correct values" name="Tile SelectableTile Should call onChange with correct values" time="0.02">
    </testcase>
    <testcase classname="Tile should call onKeyDown" name="Tile should call onKeyDown" time="0.02">
    </testcase>
    <testcase classname="Tile should toggle the expanded state when the expanded prop changes dynamically" name="Tile should toggle the expanded state when the expanded prop changes dynamically" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="TextArea" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:47" time="0.496" tests="30">
    <testcase classname="TextArea renders as expected - Component API should spread extra props onto outermost element" name="TextArea renders as expected - Component API should spread extra props onto outermost element" time="0.01">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should support a custom `className` prop on the outermost element" name="TextArea renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.003">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should have default cols settings as expected" name="TextArea renders as expected - Component API should have default cols settings as expected" time="0.008">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should set cols as expected" name="TextArea renders as expected - Component API should set cols as expected" time="0.001">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should set defaultValue as expected" name="TextArea renders as expected - Component API should set defaultValue as expected" time="0.002">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should not be disabled by default" name="TextArea renders as expected - Component API should not be disabled by default" time="0.003">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should be disabled as expected" name="TextArea renders as expected - Component API should be disabled as expected" time="0.004">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect hideLabel prop" name="TextArea renders as expected - Component API should respect hideLabel prop" time="0.004">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect id prop" name="TextArea renders as expected - Component API should respect id prop" time="0.004">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect invalid and invalidText prop" name="TextArea renders as expected - Component API should respect invalid and invalidText prop" time="0.006">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should respect placeholder prop" name="TextArea renders as expected - Component API should respect placeholder prop" time="0.002">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should have the default rows as expected" name="TextArea renders as expected - Component API should have the default rows as expected" time="0.011">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should set rows as expected" name="TextArea renders as expected - Component API should set rows as expected" time="0.009">
    </testcase>
    <testcase classname="TextArea renders as expected - Component API should set value as expected" name="TextArea renders as expected - Component API should set value as expected" time="0.002">
    </testcase>
    <testcase classname="TextArea label renders a label with the expected text" name="TextArea label renders a label with the expected text" time="0.003">
    </testcase>
    <testcase classname="TextArea label has the expected classes" name="TextArea label has the expected classes" time="0.004">
    </testcase>
    <testcase classname="TextArea helper renders a helper" name="TextArea helper renders a helper" time="0.004">
    </testcase>
    <testcase classname="TextArea helper renders children as expected" name="TextArea helper renders children as expected" time="0.006">
    </testcase>
    <testcase classname="TextArea counter should set enableCounter and maxCount as expected" name="TextArea counter should set enableCounter and maxCount as expected" time="0.001">
    </testcase>
    <testcase classname="TextArea counter should not render counter with only enableCounter prop passed in" name="TextArea counter should not render counter with only enableCounter prop passed in" time="0.002">
    </testcase>
    <testcase classname="TextArea counter should not render counter with only maxCount prop passed in" name="TextArea counter should not render counter with only maxCount prop passed in" time="0">
    </testcase>
    <testcase classname="TextArea counter word counter should not render element with only counterMode prop passed in" name="TextArea counter word counter should not render element with only counterMode prop passed in" time="0.001">
    </testcase>
    <testcase classname="TextArea should have label and counter disabled" name="TextArea should have label and counter disabled" time="0.001">
    </testcase>
    <testcase classname="events disabled textarea should not invoke onClick when textarea is clicked" name="events disabled textarea should not invoke onClick when textarea is clicked" time="0.018">
    </testcase>
    <testcase classname="events disabled textarea should not invoke onChange" name="events disabled textarea should not invoke onChange" time="0.036">
    </testcase>
    <testcase classname="events events disabled textarea should not invoke onClick when textarea is clicked" name="events events disabled textarea should not invoke onClick when textarea is clicked" time="0.014">
    </testcase>
    <testcase classname="events events disabled textarea should not invoke onChange" name="events events disabled textarea should not invoke onChange" time="0.029">
    </testcase>
    <testcase classname="events events enabled textarea should invoke onClick when textarea is clicked" name="events events enabled textarea should invoke onClick when textarea is clicked" time="0.016">
    </testcase>
    <testcase classname="events events enabled textarea should invoke onChange when textarea value is changed" name="events events enabled textarea should invoke onChange when textarea value is changed" time="0.042">
    </testcase>
    <testcase classname="events events enabled textarea should invoke onKeyDown when textarea is keyed" name="events events enabled textarea should invoke onKeyDown when textarea is keyed" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="Accordion" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:45" time="2.402" tests="12">
    <testcase classname="Accordion should render" name="Accordion should render" time="0.019">
    </testcase>
    <testcase classname="Accordion automated verification testing should have no Axe violations" name="Accordion automated verification testing should have no Axe violations" time="0.123">
    </testcase>
    <testcase classname="Accordion automated verification testing should have no Accessibility Checker violations" name="Accordion automated verification testing should have no Accessibility Checker violations" time="1.936">
    </testcase>
    <testcase classname="Accordion basic keyboard accessibility testing should receive focus" name="Accordion basic keyboard accessibility testing should receive focus" time="0.03">
    </testcase>
    <testcase classname="Accordion basic keyboard accessibility testing should open with enter" name="Accordion basic keyboard accessibility testing should open with enter" time="0.016">
    </testcase>
    <testcase classname="Accordion basic keyboard accessibility testing should open with spacebar" name="Accordion basic keyboard accessibility testing should open with spacebar" time="0.009">
    </testcase>
    <testcase classname="Accordion Flush align should align to the left if prop isFlush is passed" name="Accordion Flush align should align to the left if prop isFlush is passed" time="0.002">
    </testcase>
    <testcase classname="Accordion Flush align should not align to left if align=&quot;start&quot;" name="Accordion Flush align should not align to left if align=&quot;start&quot;" time="0.004">
    </testcase>
    <testcase classname="Accordion Expand/Collapse All should expand All on click to button" name="Accordion Expand/Collapse All should expand All on click to button" time="0.032">
    </testcase>
    <testcase classname="Accordion Expand/Collapse All should Collapse All on click to button" name="Accordion Expand/Collapse All should Collapse All on click to button" time="0.042">
    </testcase>
    <testcase classname="Accordion Ordered List should be an ol if prop ordered is passed as true" name="Accordion Ordered List should be an ol if prop ordered is passed as true" time="0.003">
    </testcase>
    <testcase classname="Accordion Ordered List should be a ul if prop ordered is passed as false" name="Accordion Ordered List should be a ul if prop ordered is passed as false" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="SecondaryButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.272" tests="4">
    <testcase classname="SecondaryButton Renders as expected Renders children as expected" name="SecondaryButton Renders as expected Renders children as expected" time="0.004">
    </testcase>
    <testcase classname="SecondaryButton Renders as expected Has the expected kind set to &quot;secondary&quot;" name="SecondaryButton Renders as expected Has the expected kind set to &quot;secondary&quot;" time="0.008">
    </testcase>
    <testcase classname="SecondaryButton Renders as expected Should add extra classes that are passed via className" name="SecondaryButton Renders as expected Should add extra classes that are passed via className" time="0.027">
    </testcase>
    <testcase classname="SecondaryButton Renders as expected Renders icon buttons should have the appropriate icon" name="SecondaryButton Renders as expected Renders icon buttons should have the appropriate icon" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Search" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.565" tests="21">
    <testcase classname="Search renders as expected - Component API should spread extra props onto the input element" name="Search renders as expected - Component API should spread extra props onto the input element" time="0.019">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect autoComplete prop" name="Search renders as expected - Component API should respect autoComplete prop" time="0.066">
    </testcase>
    <testcase classname="Search renders as expected - Component API should support a custom `className` prop on the outermost element" name="Search renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.038">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect closeButtonLabelText prop" name="Search renders as expected - Component API should respect closeButtonLabelText prop" time="0.034">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect defaultValue prop" name="Search renders as expected - Component API should respect defaultValue prop" time="0.018">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect disabled prop" name="Search renders as expected - Component API should respect disabled prop" time="0.013">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect id prop" name="Search renders as expected - Component API should respect id prop" time="0.004">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect labelText prop" name="Search renders as expected - Component API should respect labelText prop" time="0.006">
    </testcase>
    <testcase classname="Search renders as expected - Component API should call onChange when expected" name="Search renders as expected - Component API should call onChange when expected" time="0.034">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect onClear prop" name="Search renders as expected - Component API should respect onClear prop" time="0.015">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect onExpand prop" name="Search renders as expected - Component API should respect onExpand prop" time="0.043">
    </testcase>
    <testcase classname="Search renders as expected - Component API should call onKeyDown when expected" name="Search renders as expected - Component API should call onKeyDown when expected" time="0.029">
    </testcase>
    <testcase classname="Search renders as expected - Component API should call focus expand button on Escape when expanded" name="Search renders as expected - Component API should call focus expand button on Escape when expanded" time="0.017">
    </testcase>
    <testcase classname="Search renders as expected - Component API should have tabbable button and untabbable input if expandable and not expanded" name="Search renders as expected - Component API should have tabbable button and untabbable input if expandable and not expanded" time="0.012">
    </testcase>
    <testcase classname="Search renders as expected - Component API should have tabbable input and untabbable button if not expandable" name="Search renders as expected - Component API should have tabbable input and untabbable button if not expandable" time="0.011">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect placeholder prop" name="Search renders as expected - Component API should respect placeholder prop" time="0.003">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect renderIcon prop" name="Search renders as expected - Component API should respect renderIcon prop" time="0.009">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect role prop" name="Search renders as expected - Component API should respect role prop" time="0.007">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect size prop" name="Search renders as expected - Component API should respect size prop" time="0.006">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect type prop" name="Search renders as expected - Component API should respect type prop" time="0.017">
    </testcase>
    <testcase classname="Search renders as expected - Component API should respect value prop" name="Search renders as expected - Component API should respect value prop" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="RadioTile" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.482" tests="14">
    <testcase classname="RadioTile renders as expected - Component API should spread extra props onto outermost element" name="RadioTile renders as expected - Component API should spread extra props onto outermost element" time="0.022">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should respect checked prop" name="RadioTile renders as expected - Component API should respect checked prop" time="0.037">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should support a custom `className` prop on the outermost element" name="RadioTile renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.004">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should respect disabled prop" name="RadioTile renders as expected - Component API should respect disabled prop" time="0.008">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should respect id prop" name="RadioTile renders as expected - Component API should respect id prop" time="0.009">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should add name to input" name="RadioTile renders as expected - Component API should add name to input" time="0.004">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should call onChange when expected" name="RadioTile renders as expected - Component API should call onChange when expected" time="0.027">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should respect tabIndex prop" name="RadioTile renders as expected - Component API should respect tabIndex prop" time="0.008">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should respect value prop" name="RadioTile renders as expected - Component API should respect value prop" time="0.005">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should pass a given ref to the input element" name="RadioTile renders as expected - Component API should pass a given ref to the input element" time="0.006">
    </testcase>
    <testcase classname="RadioTile renders as expected - Component API should pass &quot;required&quot; prop to the input element" name="RadioTile renders as expected - Component API should pass &quot;required&quot; prop to the input element" time="0.009">
    </testcase>
    <testcase classname="RadioTile should check decorator prop and if AILabel exists on radio tile and is xs" name="RadioTile should check decorator prop and if AILabel exists on radio tile and is xs" time="0.014">
    </testcase>
    <testcase classname="RadioTile should check deprecated slug prop and if AILabel exists on radio tile and is xs" name="RadioTile should check deprecated slug prop and if AILabel exists on radio tile and is xs" time="0.028">
    </testcase>
    <testcase classname="RadioTile should have a checked attribute if the prop checked is provided" name="RadioTile should have a checked attribute if the prop checked is provided" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="RadioButtonGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.378" tests="17">
    <testcase classname="RadioButtonGroup should render `legendText` in a &lt;label&gt;" name="RadioButtonGroup should render `legendText` in a &lt;label&gt;" time="0.01">
    </testcase>
    <testcase classname="RadioButtonGroup should render `legendText` in a &lt;fieldset&gt;" name="RadioButtonGroup should render `legendText` in a &lt;fieldset&gt;" time="0.001">
    </testcase>
    <testcase classname="RadioButtonGroup should render &lt;RadioButton&gt; as children" name="RadioButtonGroup should render &lt;RadioButton&gt; as children" time="0.002">
    </testcase>
    <testcase classname="RadioButtonGroup should ignore null children" name="RadioButtonGroup should ignore null children" time="0.003">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support a custom className on the outermost element" name="RadioButtonGroup Component API should support a custom className on the outermost element" time="0.003">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support passing in disabled to disable the &lt;fieldset&gt;" name="RadioButtonGroup Component API should support passing in disabled to disable the &lt;fieldset&gt;" time="0.003">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support readonly to prevent changes" name="RadioButtonGroup Component API should support readonly to prevent changes" time="0.02">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support `defaultSelected` as a way to select a radio button" name="RadioButtonGroup Component API should support `defaultSelected` as a way to select a radio button" time="0.014">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support `valueSelected` as a way to select a radio button" name="RadioButtonGroup Component API should support `valueSelected` as a way to select a radio button" time="0.015">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support `checked` prop in RadioButton when there is no `defaultSelected` or `valueSelected`" name="RadioButtonGroup Component API should support `checked` prop in RadioButton when there is no `defaultSelected` or `valueSelected`" time="0.012">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should support a 0 value for `valueSelected` (#9041)" name="RadioButtonGroup Component API should support a 0 value for `valueSelected` (#9041)" time="0.007">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should respect decorator prop" name="RadioButtonGroup Component API should respect decorator prop" time="0.007">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should respect deprecated slug prop" name="RadioButtonGroup Component API should respect deprecated slug prop" time="0.003">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should call `onChange` when the value of the group changes" name="RadioButtonGroup Component API should call `onChange` when the value of the group changes" time="0.019">
    </testcase>
    <testcase classname="RadioButtonGroup Component API Getting derived state from props should change the current selection upon change in props" name="RadioButtonGroup Component API Getting derived state from props should change the current selection upon change in props" time="0.003">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should place required on every child &lt;RadioButton&gt;" name="RadioButtonGroup Component API should place required on every child &lt;RadioButton&gt;" time="0.001">
    </testcase>
    <testcase classname="RadioButtonGroup Component API should override required on every child &lt;RadioButton&gt;" name="RadioButtonGroup Component API should override required on every child &lt;RadioButton&gt;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ProgressBar" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.213" tests="11">
    <testcase classname="ProgressBar renders as expected progress bar and label ids match" name="ProgressBar renders as expected progress bar and label ids match" time="0.007">
    </testcase>
    <testcase classname="ProgressBar renders as expected renders helper text when passed" name="ProgressBar renders as expected renders helper text when passed" time="0.003">
    </testcase>
    <testcase classname="ProgressBar renders as expected still renders accessible label when hideLabel is passed" name="ProgressBar renders as expected still renders accessible label when hideLabel is passed" time="0.003">
    </testcase>
    <testcase classname="ProgressBar renders as expected renders as indeterminate when no value is passed" name="ProgressBar renders as expected renders as indeterminate when no value is passed" time="0.009">
    </testcase>
    <testcase classname="ProgressBar renders as expected sets aria-valuenow correctly" name="ProgressBar renders as expected sets aria-valuenow correctly" time="0.014">
    </testcase>
    <testcase classname="ProgressBar renders as expected sets aria-valuemax correctly" name="ProgressBar renders as expected sets aria-valuemax correctly" time="0.002">
    </testcase>
    <testcase classname="ProgressBar renders as expected supports additional css class names" name="ProgressBar renders as expected supports additional css class names" time="0.001">
    </testcase>
    <testcase classname="ProgressBar renders as expected supports finished status" name="ProgressBar renders as expected supports finished status" time="0.002">
    </testcase>
    <testcase classname="ProgressBar renders as expected supports error status" name="ProgressBar renders as expected supports error status" time="0.005">
    </testcase>
    <testcase classname="ProgressBar behaves as expected limits value to max" name="ProgressBar behaves as expected limits value to max" time="0.004">
    </testcase>
    <testcase classname="ProgressBar behaves as expected ensures a positive value" name="ProgressBar behaves as expected ensures a positive value" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="PrimaryButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.191" tests="3">
    <testcase classname="PrimaryButton renders as expected - Component API should spread extra props onto outermost element" name="PrimaryButton renders as expected - Component API should spread extra props onto outermost element" time="0.004">
    </testcase>
    <testcase classname="PrimaryButton renders as expected - Component API should support a custom `className` prop on the outermost element" name="PrimaryButton renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.001">
    </testcase>
    <testcase classname="PrimaryButton renders as expected - Component API should be of kind primary" name="PrimaryButton renders as expected - Component API should be of kind primary" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Tag" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:47" time="1.602" tests="29">
    <testcase classname="Tag automated accessibility testing should have no Axe violations" name="Tag automated accessibility testing should have no Axe violations" time="0.028">
    </testcase>
    <testcase classname="Tag automated accessibility testing should have no AC violations" name="Tag automated accessibility testing should have no AC violations" time="1.171">
    </testcase>
    <testcase classname="Tag Dismissible Tag should render a Dismissible Tag state" name="Tag Dismissible Tag should render a Dismissible Tag state" time="0.01">
    </testcase>
    <testcase classname="Tag Dismissible Tag should support onClose event" name="Tag Dismissible Tag should support onClose event" time="0.042">
    </testcase>
    <testcase classname="Tag Dismissible Tag should have an appropriate aria-label when (filterable)" name="Tag Dismissible Tag should have an appropriate aria-label when (filterable)" time="0.007">
    </testcase>
    <testcase classname="Tag Dismissible Tag should respect decorator prop" name="Tag Dismissible Tag should respect decorator prop" time="0.01">
    </testcase>
    <testcase classname="Tag Dismissible Tag should respect deprecated slug prop" name="Tag Dismissible Tag should respect deprecated slug prop" time="0.006">
    </testcase>
    <testcase classname="Tag should allow for a custom label" name="Tag should allow for a custom label" time="0.001">
    </testcase>
    <testcase classname="Tag should allow for a custom icon" name="Tag should allow for a custom icon" time="0.003">
    </testcase>
    <testcase classname="Tag should respect decorator prop" name="Tag should respect decorator prop" time="0.008">
    </testcase>
    <testcase classname="Tag should respect deprecated slug prop" name="Tag should respect deprecated slug prop" time="0.003">
    </testcase>
    <testcase classname="Tag Selectable Tag should render a selectable tag" name="Tag Selectable Tag should render a selectable tag" time="0.001">
    </testcase>
    <testcase classname="Tag Selectable Tag should select the selectable tag" name="Tag Selectable Tag should select the selectable tag" time="0.015">
    </testcase>
    <testcase classname="Tag Selectable Tag should call onChange" name="Tag Selectable Tag should call onChange" time="0.015">
    </testcase>
    <testcase classname="Tag Selectable Tag should call onClick" name="Tag Selectable Tag should call onClick" time="0.015">
    </testcase>
    <testcase classname="Tag Skeleton Tag should render a skeleton state" name="Tag Skeleton Tag should render a skeleton state" time="0.002">
    </testcase>
    <testcase classname="Tag Skeleton Tag should render a skeleton state with a small size" name="Tag Skeleton Tag should render a skeleton state with a small size" time="0.002">
    </testcase>
    <testcase classname="Tag Operational Tag should render a operational state" name="Tag Operational Tag should render a operational state" time="0.002">
    </testcase>
    <testcase classname="Tag Operational Tag should accept other props such as onClick" name="Tag Operational Tag should accept other props such as onClick" time="0.021">
    </testcase>
    <testcase classname="Tag should render with different types" name="Tag should render with different types" time="0.006">
    </testcase>
    <testcase classname="Tag should render with custom className" name="Tag should render with custom className" time="0.002">
    </testcase>
    <testcase classname="Tag should render with icon" name="Tag should render with icon" time="0.005">
    </testcase>
    <testcase classname="Tag should render as a filter tag" name="Tag should render as a filter tag" time="0.006">
    </testcase>
    <testcase classname="Tag should render with different sizes" name="Tag should render with different sizes" time="0.001">
    </testcase>
    <testcase classname="Tag should render as disabled" name="Tag should render as disabled" time="0.001">
    </testcase>
    <testcase classname="Tag should handle close button click" name="Tag should handle close button click" time="0.001">
    </testcase>
    <testcase classname="Tag OperationalTag to supports a ref on the underlying button element" name="Tag OperationalTag to supports a ref on the underlying button element" time="0">
    </testcase>
    <testcase classname="Tag DismissibleTag to supports a ref on the underlying button element" name="Tag DismissibleTag to supports a ref on the underlying button element" time="0.003">
    </testcase>
    <testcase classname="Tag SelectableTag to supports a ref on the underlying Div element" name="Tag SelectableTag to supports a ref on the underlying Div element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PaginationNav" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.922" tests="16">
    <testcase classname="PaginationNav renders as expected - Component API should spread extra props onto outermost element" name="PaginationNav renders as expected - Component API should spread extra props onto outermost element" time="0.024">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should support a custom `className` prop on the outermost element" name="PaginationNav renders as expected - Component API should support a custom `className` prop on the outermost element" time="0.025">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should respect itemsShown prop" name="PaginationNav renders as expected - Component API should respect itemsShown prop" time="0.019">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should respect loop prop" name="PaginationNav renders as expected - Component API should respect loop prop" time="0.118">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should respect onChange prop" name="PaginationNav renders as expected - Component API should respect onChange prop" time="0.039">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should respect page prop" name="PaginationNav renders as expected - Component API should respect page prop" time="0.013">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should respect totalItems prop" name="PaginationNav renders as expected - Component API should respect totalItems prop" time="0.007">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should disable &quot;Previous&quot; button when on first page and loop is false" name="PaginationNav renders as expected - Component API should disable &quot;Previous&quot; button when on first page and loop is false" time="0.008">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should disable &quot;Next&quot; button when on last page and loop is false" name="PaginationNav renders as expected - Component API should disable &quot;Next&quot; button when on last page and loop is false" time="0.012">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should render in small size and let user render 4 pages" name="PaginationNav renders as expected - Component API should render in small size and let user render 4 pages" time="0.008">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should render in medium size and let user render 4 pages" name="PaginationNav renders as expected - Component API should render in medium size and let user render 4 pages" time="0.023">
    </testcase>
    <testcase classname="PaginationNav renders as expected - Component API should render in default (large) size and let user render 4 pages" name="PaginationNav renders as expected - Component API should render in default (large) size and let user render 4 pages" time="0.013">
    </testcase>
    <testcase classname="PaginationNav behaves as expected should move to next page when &quot;Next&quot; is pressed" name="PaginationNav behaves as expected should move to next page when &quot;Next&quot; is pressed" time="0.048">
    </testcase>
    <testcase classname="PaginationNav behaves as expected should move to previous page when &quot;Previous&quot; is pressed" name="PaginationNav behaves as expected should move to previous page when &quot;Previous&quot; is pressed" time="0.075">
    </testcase>
    <testcase classname="PaginationNav behaves as expected should move to page that is pressed" name="PaginationNav behaves as expected should move to page that is pressed" time="0.029">
    </testcase>
    <testcase classname="PaginationNav behaves as expected should render PaginationNav correctly and navigate through different page ranges using select elements" name="PaginationNav behaves as expected should render PaginationNav correctly and navigate through different page ranges using select elements" time="0.183">
    </testcase>
  </testsuite>
  <testsuite name="PageHeader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.384" tests="19">
    <testcase classname="PageHeader export configuration supports dot notation component namespacing from the main entrypoint" name="PageHeader export configuration supports dot notation component namespacing from the main entrypoint" time="0.002">
    </testcase>
    <testcase classname="PageHeader export configuration supports direct component imports from the PageHeader path" name="PageHeader export configuration supports direct component imports from the PageHeader path" time="0">
    </testcase>
    <testcase classname="PageHeader PageHeader.Root component api should render" name="PageHeader PageHeader.Root component api should render" time="0.006">
    </testcase>
    <testcase classname="PageHeader PageHeader.Root component api should place className on the outermost element" name="PageHeader PageHeader.Root component api should place className on the outermost element" time="0.004">
    </testcase>
    <testcase classname="PageHeader PageHeader.BreadcrumbBar component api should render" name="PageHeader PageHeader.BreadcrumbBar component api should render" time="0.003">
    </testcase>
    <testcase classname="PageHeader PageHeader.BreadcrumbBar component api should place className on the outermost element" name="PageHeader PageHeader.BreadcrumbBar component api should place className on the outermost element" time="0.001">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render" name="PageHeader PageHeader.Content component api should render" time="0.001">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should place className on the outermost element" name="PageHeader PageHeader.Content component api should place className on the outermost element" time="0.004">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render a title" name="PageHeader PageHeader.Content component api should render a title" time="0.003">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render an icon" name="PageHeader PageHeader.Content component api should render an icon" time="0.004">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render a subtitle" name="PageHeader PageHeader.Content component api should render a subtitle" time="0.002">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render children" name="PageHeader PageHeader.Content component api should render children" time="0">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render contextual actions" name="PageHeader PageHeader.Content component api should render contextual actions" time="0.001">
    </testcase>
    <testcase classname="PageHeader PageHeader.Content component api should render page actions" name="PageHeader PageHeader.Content component api should render page actions" time="0.006">
    </testcase>
    <testcase classname="PageHeader PageHeader.HeroImage component api should place className on the outermost element" name="PageHeader PageHeader.HeroImage component api should place className on the outermost element" time="0.009">
    </testcase>
    <testcase classname="PageHeader PageHeader.HeroImage component api should use a 2x1 ratio on large screens" name="PageHeader PageHeader.HeroImage component api should use a 2x1 ratio on large screens" time="0.018">
    </testcase>
    <testcase classname="PageHeader PageHeader.HeroImage component api should use a 3x2 ratio on small screens" name="PageHeader PageHeader.HeroImage component api should use a 3x2 ratio on small screens" time="0.001">
    </testcase>
    <testcase classname="PageHeader PageHeader.TabBar component api should render" name="PageHeader PageHeader.TabBar component api should render" time="0.002">
    </testcase>
    <testcase classname="PageHeader PageHeader.TabBar component api should place className on the outermost element" name="PageHeader PageHeader.TabBar component api should place className on the outermost element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ModalWrapper" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:48" time="0.926" tests="11">
    <testcase classname="ModalWrapper should default to primary button" name="ModalWrapper should default to primary button" time="0.026">
    </testcase>
    <testcase classname="ModalWrapper should render danger button when danger is passed" name="ModalWrapper should render danger button when danger is passed" time="0.008">
    </testcase>
    <testcase classname="ModalWrapper should render a secondary button by default" name="ModalWrapper should render a secondary button by default" time="0.02">
    </testcase>
    <testcase classname="ModalWrapper should not render a secondary button if text is explicitly null" name="ModalWrapper should not render a secondary button if text is explicitly null" time="0.021">
    </testcase>
    <testcase classname="ModalWrapper should set state to open when trigger button is clicked" name="ModalWrapper should set state to open when trigger button is clicked" time="0.039">
    </testcase>
    <testcase classname="ModalWrapper should set open state to false when escape is pressed" name="ModalWrapper should set open state to false when escape is pressed" time="0.037">
    </testcase>
    <testcase classname="ModalWrapper should call onKeyDown with escape" name="ModalWrapper should call onKeyDown with escape" time="0.044">
    </testcase>
    <testcase classname="ModalWrapper should set open state to false when close button is clicked" name="ModalWrapper should set open state to false when close button is clicked" time="0.179">
    </testcase>
    <testcase classname="ModalWrapper should set open state to false when secondary button is clicked" name="ModalWrapper should set open state to false when secondary button is clicked" time="0.043">
    </testcase>
    <testcase classname="ModalWrapper should close after a successful submit action" name="ModalWrapper should close after a successful submit action" time="0.029">
    </testcase>
    <testcase classname="ModalWrapper should return focus to the trigger button after closing" name="ModalWrapper should return focus to the trigger button after closing" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OverflowMenuV2 /&gt;" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:49" time="0.451" tests="4">
    <testcase classname="&lt;OverflowMenuV2 /&gt; should log the deprecation warning when rendering OverflowMenuV2" name="&lt;OverflowMenuV2 /&gt; should log the deprecation warning when rendering OverflowMenuV2" time="0.009">
    </testcase>
    <testcase classname="&lt;OverflowMenuV2 /&gt; should render correctly with feature flag enabled" name="&lt;OverflowMenuV2 /&gt; should render correctly with feature flag enabled" time="0.069">
    </testcase>
    <testcase classname="&lt;OverflowMenuV2 /&gt; should respect align prop" name="&lt;OverflowMenuV2 /&gt; should respect align prop" time="0.004">
    </testcase>
    <testcase classname="&lt;OverflowMenuV2 /&gt; should render OverflowMenu with MenuItem children" name="&lt;OverflowMenuV2 /&gt; should render OverflowMenu with MenuItem children" time="0.094">
    </testcase>
  </testsuite>
  <testsuite name="OverflowMenu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:49" time="1.062" tests="21">
    <testcase classname="OverflowMenu Renders as expected should support a custom `className` prop on the button element" name="OverflowMenu Renders as expected should support a custom `className` prop on the button element" time="0.065">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should spread extra props on the button element" name="OverflowMenu Renders as expected should spread extra props on the button element" time="0.005">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should always use button kind=ghost" name="OverflowMenu Renders as expected should always use button kind=ghost" time="0.022">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should flip menu alignment" name="OverflowMenu Renders as expected should flip menu alignment" time="0.055">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should call onClick" name="OverflowMenu Renders as expected should call onClick" time="0.049">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should call onClose" name="OverflowMenu Renders as expected should call onClose" time="0.066">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should call onFocus" name="OverflowMenu Renders as expected should call onFocus" time="0.036">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should render open if open is true" name="OverflowMenu Renders as expected should render open if open is true" time="0.013">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should render icon from renderIcon" name="OverflowMenu Renders as expected should render icon from renderIcon" time="0.014">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should change size based on size prop" name="OverflowMenu Renders as expected should change size based on size prop" time="0.01">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should open on click" name="OverflowMenu Renders as expected should open on click" time="0.044">
    </testcase>
    <testcase classname="OverflowMenu Renders as expected should call onClick handler only once per click" name="OverflowMenu Renders as expected should call onClick handler only once per click" time="0.041">
    </testcase>
    <testcase classname="OverflowMenu should not open menu when disabled" name="OverflowMenu should not open menu when disabled" time="0.057">
    </testcase>
    <testcase classname="OverflowMenu should close the menu when clicking outside" name="OverflowMenu should close the menu when clicking outside" time="0.055">
    </testcase>
    <testcase classname="OverflowMenu should set aria-label for the icon using iconDescription prop" name="OverflowMenu should set aria-label for the icon using iconDescription prop" time="0.014">
    </testcase>
    <testcase classname="OverflowMenu should align menu based on direction prop" name="OverflowMenu should align menu based on direction prop" time="0.039">
    </testcase>
    <testcase classname="OverflowMenu focuses the next enabled menu item when pressing ArrowDown" name="OverflowMenu focuses the next enabled menu item when pressing ArrowDown" time="0.024">
    </testcase>
    <testcase classname="OverflowMenu focuses the next enabled menu item when pressing ArrowUp" name="OverflowMenu focuses the next enabled menu item when pressing ArrowUp" time="0.021">
    </testcase>
    <testcase classname="OverflowMenu focuses the last enabled item when moving backwards from the first enabled item (case -1)" name="OverflowMenu focuses the last enabled item when moving backwards from the first enabled item (case -1)" time="0.061">
    </testcase>
    <testcase classname="OverflowMenu focuses the first enabled item when moving forward from the last enabled item (case enabledIndices.length)" name="OverflowMenu focuses the first enabled item when moving forward from the last enabled item (case enabledIndices.length)" time="0.04">
    </testcase>
    <testcase classname="OverflowMenu closes the menu on Escape key press" name="OverflowMenu closes the menu on Escape key press" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="InlineLoading" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:50" time="0.212" tests="10">
    <testcase classname="InlineLoading should pass in extra classes that are passed via className" name="InlineLoading should pass in extra classes that are passed via className" time="0.009">
    </testcase>
    <testcase classname="InlineLoading should render a loader by default" name="InlineLoading should render a loader by default" time="0.002">
    </testcase>
    <testcase classname="InlineLoading should render a loader if the status is inactive" name="InlineLoading should render a loader if the status is inactive" time="0">
    </testcase>
    <testcase classname="InlineLoading should render the success state if status is finished" name="InlineLoading should render the success state if status is finished" time="0.001">
    </testcase>
    <testcase classname="InlineLoading should render the error state if status is error" name="InlineLoading should render the error state if status is error" time="0.001">
    </testcase>
    <testcase classname="InlineLoading should not render any text by default" name="InlineLoading should not render any text by default" time="0.002">
    </testcase>
    <testcase classname="InlineLoading should render text when the description prop is passed" name="InlineLoading should render text when the description prop is passed" time="0.005">
    </testcase>
    <testcase classname="InlineLoading should call the onSuccess prop after a delay" name="InlineLoading should call the onSuccess prop after a delay" time="0.003">
    </testcase>
    <testcase classname="InlineLoading should allow users to override the onSuccess timeout" name="InlineLoading should allow users to override the onSuccess timeout" time="0.003">
    </testcase>
    <testcase classname="InlineLoading should cancel the onSuccess timeout if the component unmounts" name="InlineLoading should cancel the onSuccess timeout if the component unmounts" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="MenuButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:49" time="0.822" tests="17">
    <testcase classname="MenuButton renders as expected - Component API supports a ref on the outermost element" name="MenuButton renders as expected - Component API supports a ref on the outermost element" time="0.006">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports a custom class name on the outermost element" name="MenuButton renders as expected - Component API supports a custom class name on the outermost element" time="0.003">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API forwards additional props on the outermost element" name="MenuButton renders as expected - Component API forwards additional props on the outermost element" time="0.004">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API renders props.label on the trigger button" name="MenuButton renders as expected - Component API renders props.label on the trigger button" time="0.012">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.disabled" name="MenuButton renders as expected - Component API supports props.disabled" time="0.01">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.size size=&quot;sm&quot;" name="MenuButton renders as expected - Component API supports props.size size=&quot;sm&quot;" time="0.013">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.size size=&quot;md&quot;" name="MenuButton renders as expected - Component API supports props.size size=&quot;md&quot;" time="0.01">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.kind kind=&quot;primary&quot;" name="MenuButton renders as expected - Component API supports props.kind kind=&quot;primary&quot;" time="0.006">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.kind kind=&quot;tertiary&quot;" name="MenuButton renders as expected - Component API supports props.kind kind=&quot;tertiary&quot;" time="0.019">
    </testcase>
    <testcase classname="MenuButton renders as expected - Component API supports props.kind kind=&quot;ghost&quot;" name="MenuButton renders as expected - Component API supports props.kind kind=&quot;ghost&quot;" time="0.027">
    </testcase>
    <testcase classname="MenuButton behaves as expected opens a menu on click" name="MenuButton behaves as expected opens a menu on click" time="0.179">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;top&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;top&quot;" time="0.083">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;top-start&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;top-start&quot;" time="0.041">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;top-end&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;top-end&quot;" time="0.058">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom&quot;" time="0.052">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" time="0.053">
    </testcase>
    <testcase classname="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" name="MenuButton supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="Modal" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:49" time="0.898" tests="31">
    <testcase classname="Modal should add extra classes that are passed via className" name="Modal should add extra classes that are passed via className" time="0.036">
    </testcase>
    <testcase classname="Modal should set label if one is passed via props" name="Modal should set label if one is passed via props" time="0.009">
    </testcase>
    <testcase classname="Modal should set modal heading if one is passed via props" name="Modal should set modal heading if one is passed via props" time="0.005">
    </testcase>
    <testcase classname="Modal should not be a passive modal by default" name="Modal should not be a passive modal by default" time="0.008">
    </testcase>
    <testcase classname="Modal should be a passive modal when passiveModal is passed" name="Modal should be a passive modal when passiveModal is passed" time="0.015">
    </testcase>
    <testcase classname="Modal should set id if one is passed via props" name="Modal should set id if one is passed via props" time="0.019">
    </testcase>
    <testcase classname="Modal should not place the svg icon in the accessibility tree" name="Modal should not place the svg icon in the accessibility tree" time="0.013">
    </testcase>
    <testcase classname="Modal should not make the icon tabbable" name="Modal should not make the icon tabbable" time="0.003">
    </testcase>
    <testcase classname="Modal enables primary button by default" name="Modal enables primary button by default" time="0.013">
    </testcase>
    <testcase classname="Modal disables primary button is disablePrimaryButton prop is passed" name="Modal disables primary button is disablePrimaryButton prop is passed" time="0.008">
    </testcase>
    <testcase classname="Modal should set button text when passed via props" name="Modal should set button text when passed via props" time="0.006">
    </testcase>
    <testcase classname="Modal should allow you to pass a node for the primary and secondary buttons" name="Modal should allow you to pass a node for the primary and secondary buttons" time="0.012">
    </testcase>
    <testcase classname="Modal should support 2 secondary buttons" name="Modal should support 2 secondary buttons" time="0.016">
    </testcase>
    <testcase classname="Modal has the expected attributes when alert prop is passed" name="Modal has the expected attributes when alert prop is passed" time="0.02">
    </testcase>
    <testcase classname="Modal renders a danger button and appropriate classes when danger prop is passed" name="Modal renders a danger button and appropriate classes when danger prop is passed" time="0.008">
    </testcase>
    <testcase classname="Modal disables buttons when inline loading status is active" name="Modal disables buttons when inline loading status is active" time="0.152">
    </testcase>
    <testcase classname="Modal should respect decorator prop" name="Modal should respect decorator prop" time="0.014">
    </testcase>
    <testcase classname="Modal should respect slug prop" name="Modal should respect slug prop" time="0.019">
    </testcase>
    <testcase classname="Modal should set correct focus if data-modal-primary-focus is used" name="Modal should set correct focus if data-modal-primary-focus is used" time="0.014">
    </testcase>
    <testcase classname="Modal should set correct focus on a danger modal if data-modal-primary-focus is used" name="Modal should set correct focus on a danger modal if data-modal-primary-focus is used" time="0.017">
    </testcase>
    <testcase classname="Modal should set focus on secondary button if danger modal is used" name="Modal should set focus on secondary button if danger modal is used" time="0.009">
    </testcase>
    <testcase classname="events should set expected class when state is open" name="events should set expected class when state is open" time="0.009">
    </testcase>
    <testcase classname="events should handle close when outside of modal is clicked" name="events should handle close when outside of modal is clicked" time="0.049">
    </testcase>
    <testcase classname="events should not handle close when inner content is clicked" name="events should not handle close when inner content is clicked" time="0.05">
    </testcase>
    <testcase classname="events should not handle close when outside of modal is clicked and preventCloseOnClickOutside is passed" name="events should not handle close when outside of modal is clicked and preventCloseOnClickOutside is passed" time="0.039">
    </testcase>
    <testcase classname="events should handle close keyDown events" name="events should handle close keyDown events" time="0.012">
    </testcase>
    <testcase classname="events should handle onClick events" name="events should handle onClick events" time="0.026">
    </testcase>
    <testcase classname="events should handle submit keyDown events with shouldSubmitOnEnter enabled" name="events should handle submit keyDown events with shouldSubmitOnEnter enabled" time="0.018">
    </testcase>
    <testcase classname="events should not handle submit keyDown events if shouldSubmitOnEnter is not enabled" name="events should not handle submit keyDown events if shouldSubmitOnEnter is not enabled" time="0.019">
    </testcase>
    <testcase classname="events should close by default on secondary button click" name="events should close by default on secondary button click" time="0.032">
    </testcase>
    <testcase classname="events should handle custom secondary button events" name="events should handle custom secondary button events" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="DangerButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:50" time="0.253" tests="5">
    <testcase classname="DangerButton should render children as expected" name="DangerButton should render children as expected" time="0.006">
    </testcase>
    <testcase classname="DangerButton should add extra classes passed via className prop" name="DangerButton should add extra classes passed via className prop" time="0.001">
    </testcase>
    <testcase classname="DangerButton should be kind danger" name="DangerButton should be kind danger" time="0.001">
    </testcase>
    <testcase classname="DangerButton should render an icon if an icon is passed in via prop" name="DangerButton should render an icon if an icon is passed in via prop" time="0.004">
    </testcase>
    <testcase classname="DangerButton should call onClick when button is clicked" name="DangerButton should call onClick when button is clicked" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Menu" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:50" time="0.937" tests="17">
    <testcase classname="Menu renders as expected should place a className on the outermost element" name="Menu renders as expected should place a className on the outermost element" time="0.003">
    </testcase>
    <testcase classname="Menu renders as expected should spread props onto ul" name="Menu renders as expected should spread props onto ul" time="0.005">
    </testcase>
    <testcase classname="Menu renders as expected have an id when one is provided" name="Menu renders as expected have an id when one is provided" time="0.002">
    </testcase>
    <testcase classname="Menu renders as expected should call onClose on key down" name="Menu renders as expected should call onClose on key down" time="0.075">
    </testcase>
    <testcase classname="Menu renders as expected should call onClose on click" name="Menu renders as expected should call onClose on click" time="0.076">
    </testcase>
    <testcase classname="Menu renders as expected should be open if open is supplied" name="Menu renders as expected should be open if open is supplied" time="0.005">
    </testcase>
    <testcase classname="Menu renders as expected should change size based on size prop" name="Menu renders as expected should change size based on size prop" time="0.003">
    </testcase>
    <testcase classname="Menu renders as expected should append to target element" name="Menu renders as expected should append to target element" time="0.004">
    </testcase>
    <testcase classname="Menu Submenu behavior should only show parent and not then submenu when not hovered" name="Menu Submenu behavior should only show parent and not then submenu when not hovered" time="0.034">
    </testcase>
    <testcase classname="Menu Submenu behavior should show sub menu when hovered for hoverIntentDelay" name="Menu Submenu behavior should show sub menu when hovered for hoverIntentDelay" time="0.104">
    </testcase>
    <testcase classname="Menu Submenu behavior should close sub menu on leave after leaveIntentDelay" name="Menu Submenu behavior should close sub menu on leave after leaveIntentDelay" time="0.127">
    </testcase>
    <testcase classname="Menu Submenu behavior should cancel close sub menu on leave and reenter before leaveIntentDelay" name="Menu Submenu behavior should cancel close sub menu on leave and reenter before leaveIntentDelay" time="0.121">
    </testcase>
    <testcase classname="MenuItem renders as expected should be disabled" name="MenuItem renders as expected should be disabled" time="0.059">
    </testcase>
    <testcase classname="MenuItem renders as expected should change kind based on prop" name="MenuItem renders as expected should change kind based on prop" time="0.014">
    </testcase>
    <testcase classname="MenuItem renders as expected should render label" name="MenuItem renders as expected should render label" time="0.007">
    </testcase>
    <testcase classname="MenuItem should call MenuItemRadioGroup onChange once" name="MenuItem should call MenuItemRadioGroup onChange once" time="0.08">
    </testcase>
    <testcase classname="MenuItem should call MenuItemSelectable onChange once with correct value" name="MenuItem should call MenuItemSelectable onChange once with correct value" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="ExpandableSearch" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:50" time="0.633" tests="11">
    <testcase classname="ExpandableSearch behaves as expected is not expanded by default" name="ExpandableSearch behaves as expected is not expanded by default" time="0.005">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected is expanded by default if expanded prop is set" name="ExpandableSearch behaves as expected is expanded by default if expanded prop is set" time="0.001">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected is renders a defaultValue" name="ExpandableSearch behaves as expected is renders a defaultValue" time="0.053">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected expands on click" name="ExpandableSearch behaves as expected expands on click" time="0.025">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected expands on enter" name="ExpandableSearch behaves as expected expands on enter" time="0.018">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected expands on space" name="ExpandableSearch behaves as expected expands on space" time="0.017">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected places focus on the input after expansion" name="ExpandableSearch behaves as expected places focus on the input after expansion" time="0.025">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected supports a ref on the underlying input element" name="ExpandableSearch behaves as expected supports a ref on the underlying input element" time="0.003">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected closes on blur when the input is empty" name="ExpandableSearch behaves as expected closes on blur when the input is empty" time="0.044">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected does not close on blur when the input has a value" name="ExpandableSearch behaves as expected does not close on blur when the input has a value" time="0.073">
    </testcase>
    <testcase classname="ExpandableSearch behaves as expected closes and clears value on escape" name="ExpandableSearch behaves as expected closes and clears value on escape" time="0.106">
    </testcase>
  </testsuite>
  <testsuite name="CopyButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="0.346" tests="7">
    <testcase classname="CopyButton should set tabIndex if one is passed via props" name="CopyButton should set tabIndex if one is passed via props" time="0.013">
    </testcase>
    <testcase classname="CopyButton should add extra classes passed via className" name="CopyButton should add extra classes passed via className" time="0.005">
    </testcase>
    <testcase classname="Button props should disable button if disabled prop is passed" name="Button props should disable button if disabled prop is passed" time="0.002">
    </testcase>
    <testcase classname="Button props should call the click handler" name="Button props should call the click handler" time="0.036">
    </testcase>
    <testcase classname="Feedback should make the feedback visible for a limited amount of time" name="Feedback should make the feedback visible for a limited amount of time" time="0.026">
    </testcase>
    <testcase classname="Feedback should be able to specify the feedback message" name="Feedback should be able to specify the feedback message" time="0.059">
    </testcase>
    <testcase classname="Feedback should allow users to override default feedback timeout via prop" name="Feedback should allow users to override default feedback timeout via prop" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/react/scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="83.55" tests="207">
    <testcase classname="@carbon/react/scss  should be importable" name="@carbon/react/scss  should be importable" time="7.881">
    </testcase>
    <testcase classname="@carbon/react/scss scss/breakpoint should be importable" name="@carbon/react/scss scss/breakpoint should be importable" time="0.008">
    </testcase>
    <testcase classname="@carbon/react/scss scss/colors should be importable" name="@carbon/react/scss scss/colors should be importable" time="0.021">
    </testcase>
    <testcase classname="@carbon/react/scss scss/config should be importable" name="@carbon/react/scss scss/config should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/feature-flags should be importable" name="@carbon/react/scss scss/feature-flags should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layer should be importable" name="@carbon/react/scss scss/layer should be importable" time="0.161">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layout should be importable" name="@carbon/react/scss scss/layout should be importable" time="0.037">
    </testcase>
    <testcase classname="@carbon/react/scss scss/motion should be importable" name="@carbon/react/scss scss/motion should be importable" time="0.012">
    </testcase>
    <testcase classname="@carbon/react/scss scss/reset should be importable" name="@carbon/react/scss scss/reset should be importable" time="0.095">
    </testcase>
    <testcase classname="@carbon/react/scss scss/spacing should be importable" name="@carbon/react/scss scss/spacing should be importable" time="0.008">
    </testcase>
    <testcase classname="@carbon/react/scss scss/theme should be importable" name="@carbon/react/scss scss/theme should be importable" time="0.128">
    </testcase>
    <testcase classname="@carbon/react/scss scss/themes should be importable" name="@carbon/react/scss scss/themes should be importable" time="0.072">
    </testcase>
    <testcase classname="@carbon/react/scss scss/zone should be importable" name="@carbon/react/scss scss/zone should be importable" time="3.418">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/theme should be importable" name="@carbon/react/scss scss/compat/theme should be importable" time="0.093">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/themes should be importable" name="@carbon/react/scss scss/compat/themes should be importable" time="0.069">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components should be importable" name="@carbon/react/scss scss/components should be importable" time="3.052">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion/accordion should be importable" name="@carbon/react/scss scss/components/accordion/accordion should be importable" time="0.155">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion should be importable" name="@carbon/react/scss scss/components/accordion should be importable" time="0.219">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label/ai-label should be importable" time="0.759">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label should be importable" time="0.546">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" time="0.212">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator should be importable" time="0.268">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" time="0.628">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb should be importable" time="0.552">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/button should be importable" name="@carbon/react/scss scss/components/button/button should be importable" time="0.354">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button should be importable" name="@carbon/react/scss scss/components/button should be importable" time="0.472">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/tokens should be importable" name="@carbon/react/scss scss/components/button/tokens should be importable" time="0.288">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button/chat-button should be importable" time="0.449">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button should be importable" time="0.425">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox/checkbox should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox should be importable" time="0.184">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" time="0.449">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet should be importable" time="0.483">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box/combo-box should be importable" time="0.543">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box should be importable" time="0.666">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list/contained-list should be importable" time="0.392">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list should be importable" time="0.822">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" time="0.453">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher should be importable" time="0.587">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button/copy-button should be importable" time="0.651">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button should be importable" time="0.47">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/data-table should be importable" name="@carbon/react/scss scss/components/data-table/data-table should be importable" time="0.3">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table should be importable" name="@carbon/react/scss scss/components/data-table should be importable" time="0.414">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" name="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" time="0.551">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action should be importable" name="@carbon/react/scss scss/components/data-table/action should be importable" time="0.537">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" time="0.72">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable should be importable" time="0.753">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" time="0.136">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" name="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" time="0.136">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort should be importable" name="@carbon/react/scss scss/components/data-table/sort should be importable" time="0.138">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker/date-picker should be importable" time="0.32">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker should be importable" time="0.266">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown/dropdown should be importable" time="0.939">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown should be importable" time="0.883">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" time="0.582">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader should be importable" time="0.607">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form/form should be importable" name="@carbon/react/scss scss/components/form/form should be importable" time="0.12">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form should be importable" name="@carbon/react/scss scss/components/form should be importable" time="0.136">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" time="1.278">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box should be importable" time="0.999">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" time="0.541">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker should be importable" time="0.369">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" time="0.799">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown should be importable" time="1.202">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" time="0.106">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box should be importable" time="0.144">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" time="1.06">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect should be importable" time="1.136">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" time="0.225">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input should be importable" time="0.253">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" time="0.507">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search should be importable" time="0.46">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" time="0.259">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select should be importable" time="0.336">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" time="0.304">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area should be importable" time="0.493">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" time="0.321">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input should be importable" time="0.191">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" time="0.318">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker should be importable" time="0.46">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" time="0.249">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator should be importable" time="0.177">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading should be importable" time="0.398">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" time="0.242">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link should be importable" name="@carbon/react/scss scss/components/link should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link/link should be importable" name="@carbon/react/scss scss/components/link/link should be importable" time="0.142">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list should be importable" name="@carbon/react/scss scss/components/list should be importable" time="0.173">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list/list should be importable" name="@carbon/react/scss scss/components/list/list should be importable" time="0.098">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box should be importable" name="@carbon/react/scss scss/components/list-box should be importable" time="1.009">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box/list-box should be importable" name="@carbon/react/scss scss/components/list-box/list-box should be importable" time="0.755">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading should be importable" name="@carbon/react/scss scss/components/loading should be importable" time="0.166">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading/loading should be importable" name="@carbon/react/scss scss/components/loading/loading should be importable" time="0.112">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu should be importable" name="@carbon/react/scss scss/components/menu should be importable" time="0.324">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu/menu should be importable" name="@carbon/react/scss scss/components/menu/menu should be importable" time="0.675">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal should be importable" name="@carbon/react/scss scss/components/modal should be importable" time="1.092">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal/modal should be importable" name="@carbon/react/scss scss/components/modal/modal should be importable" time="0.609">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect should be importable" time="0.896">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect/multiselect should be importable" time="0.854">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/actionable-notification should be importable" name="@carbon/react/scss scss/components/notification/actionable-notification should be importable" time="0.615">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification should be importable" name="@carbon/react/scss scss/components/notification should be importable" time="0.704">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/inline-notification should be importable" name="@carbon/react/scss scss/components/notification/inline-notification should be importable" time="0.433">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/toast-notification should be importable" name="@carbon/react/scss scss/components/notification/toast-notification should be importable" time="0.31">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/tokens should be importable" name="@carbon/react/scss scss/components/notification/tokens should be importable" time="0.294">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input should be importable" name="@carbon/react/scss scss/components/number-input should be importable" time="0.294">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input/number-input should be importable" name="@carbon/react/scss scss/components/number-input/number-input should be importable" time="0.197">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu should be importable" time="0.484">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" time="0.598">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination should be importable" name="@carbon/react/scss scss/components/pagination should be importable" time="1.053">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/pagination should be importable" name="@carbon/react/scss scss/components/pagination/pagination should be importable" time="0.758">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" name="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" time="0.475">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav should be importable" time="0.632">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" time="0.82">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover should be importable" name="@carbon/react/scss scss/components/popover should be importable" time="0.449">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover/popover should be importable" name="@carbon/react/scss scss/components/popover/popover should be importable" time="0.158">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar should be importable" time="0.109">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator should be importable" time="0.421">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" time="0.458">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button should be importable" time="0.269">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button/radio-button should be importable" time="0.309">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search should be importable" name="@carbon/react/scss scss/components/search should be importable" time="0.381">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search/search should be importable" name="@carbon/react/scss scss/components/search/search should be importable" time="0.249">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select should be importable" name="@carbon/react/scss scss/components/select should be importable" time="0.254">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select/select should be importable" name="@carbon/react/scss scss/components/select/select should be importable" time="0.221">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles should be importable" time="0.232">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" time="0.156">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" time="0.212">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider should be importable" name="@carbon/react/scss scss/components/slider should be importable" time="0.338">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider/slider should be importable" name="@carbon/react/scss scss/components/slider/slider should be importable" time="0.555">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug should be importable" name="@carbon/react/scss scss/components/slug should be importable" time="1.041">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug/slug should be importable" name="@carbon/react/scss scss/components/slug/slug should be importable" time="0.782">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack should be importable" name="@carbon/react/scss scss/components/stack should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack/stack should be importable" name="@carbon/react/scss scss/components/stack/stack should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list should be importable" time="0.177">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list/structured-list should be importable" time="0.152">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs should be importable" name="@carbon/react/scss scss/components/tabs should be importable" time="0.606">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs/tabs should be importable" name="@carbon/react/scss scss/components/tabs/tabs should be importable" time="0.493">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag should be importable" name="@carbon/react/scss scss/components/tag should be importable" time="0.714">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tag should be importable" name="@carbon/react/scss scss/components/tag/tag should be importable" time="0.58">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tokens should be importable" name="@carbon/react/scss scss/components/tag/tokens should be importable" time="0.397">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area should be importable" name="@carbon/react/scss scss/components/text-area should be importable" time="0.23">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area/text-area should be importable" name="@carbon/react/scss scss/components/text-area/text-area should be importable" time="0.188">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input should be importable" name="@carbon/react/scss scss/components/text-input should be importable" time="0.635">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input/text-input should be importable" name="@carbon/react/scss scss/components/text-input/text-input should be importable" time="0.41">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile should be importable" name="@carbon/react/scss scss/components/tile should be importable" time="0.661">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile/tile should be importable" name="@carbon/react/scss scss/components/tile/tile should be importable" time="0.315">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker should be importable" time="0.299">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker/time-picker should be importable" time="0.519">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle should be importable" name="@carbon/react/scss scss/components/toggle should be importable" time="0.325">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle/toggle should be importable" name="@carbon/react/scss scss/components/toggle/toggle should be importable" time="0.291">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip should be importable" time="0.466">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip/toggletip should be importable" time="0.45">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip should be importable" time="0.278">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip/tooltip should be importable" time="0.225">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview should be importable" name="@carbon/react/scss scss/components/treeview should be importable" time="0.244">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview/treeview should be importable" name="@carbon/react/scss scss/components/treeview/treeview should be importable" time="0.245">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell should be importable" time="0.77">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" time="0.602">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content/content should be importable" time="0.104">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content should be importable" time="0.087">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header/header should be importable" time="0.565">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header should be importable" time="0.521">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" time="0.138">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" time="0.104">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" time="0.172">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" time="0.196">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher should be importable" time="0.158">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" time="0.093">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts should be importable" name="@carbon/react/scss scss/fonts should be importable" time="0.082">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/mono should be importable" name="@carbon/react/scss scss/fonts/mono should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-arabic should be importable" name="@carbon/react/scss scss/fonts/sans-arabic should be importable" time="0.017">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-devanagari should be importable" name="@carbon/react/scss scss/fonts/sans-devanagari should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-hebrew should be importable" name="@carbon/react/scss scss/fonts/sans-hebrew should be importable" time="0.007">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" name="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai should be importable" name="@carbon/react/scss scss/fonts/sans-thai should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans should be importable" name="@carbon/react/scss scss/fonts/sans should be importable" time="0.024">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/serif should be importable" name="@carbon/react/scss scss/fonts/serif should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/src should be importable" name="@carbon/react/scss scss/fonts/src should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/css-grid should be importable" name="@carbon/react/scss scss/grid/css-grid should be importable" time="0.052">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/flexbox should be importable" name="@carbon/react/scss scss/grid/flexbox should be importable" time="0.071">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/mixins should be importable" name="@carbon/react/scss scss/grid/mixins should be importable" time="0.024">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid should be importable" name="@carbon/react/scss scss/grid should be importable" time="0.055">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type should be importable" name="@carbon/react/scss scss/type should be importable" time="0.14">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type/reset should be importable" name="@carbon/react/scss scss/type/reset should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/ai-gradient should be importable" name="@carbon/react/scss scss/utilities/ai-gradient should be importable" time="0.119">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/box-shadow should be importable" name="@carbon/react/scss scss/utilities/box-shadow should be importable" time="0.19">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/button-reset should be importable" name="@carbon/react/scss scss/utilities/button-reset should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-reset should be importable" name="@carbon/react/scss scss/utilities/component-reset should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-tokens should be importable" name="@carbon/react/scss scss/utilities/component-tokens should be importable" time="0.116">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/convert should be importable" name="@carbon/react/scss scss/utilities/convert should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/custom-property should be importable" name="@carbon/react/scss scss/utilities/custom-property should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/focus-outline should be importable" name="@carbon/react/scss scss/utilities/focus-outline should be importable" time="0.163">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" name="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" time="0.014">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" name="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities should be importable" name="@carbon/react/scss scss/utilities should be importable" time="0.2">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/keyframes should be importable" name="@carbon/react/scss scss/utilities/keyframes should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/layout should be importable" name="@carbon/react/scss scss/utilities/layout should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/placeholder-colors should be importable" name="@carbon/react/scss scss/utilities/placeholder-colors should be importable" time="0.12">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/rotate should be importable" name="@carbon/react/scss scss/utilities/rotate should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/skeleton should be importable" name="@carbon/react/scss scss/utilities/skeleton should be importable" time="0.157">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-overflow should be importable" name="@carbon/react/scss scss/utilities/text-overflow should be importable" time="0.001">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-truncate should be importable" name="@carbon/react/scss scss/utilities/text-truncate should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/visually-hidden should be importable" name="@carbon/react/scss scss/utilities/visually-hidden should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/z-index should be importable" name="@carbon/react/scss scss/utilities/z-index should be importable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Copy" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="0.357" tests="7">
    <testcase classname="Copy should set tabIndex if one is passed via props" name="Copy should set tabIndex if one is passed via props" time="0.021">
    </testcase>
    <testcase classname="Copy should add extra classes passed via className" name="Copy should add extra classes passed via className" time="0.012">
    </testcase>
    <testcase classname="Button props should disable button if disabled prop is passed" name="Button props should disable button if disabled prop is passed" time="0.015">
    </testcase>
    <testcase classname="Button props should call the click handler" name="Button props should call the click handler" time="0.014">
    </testcase>
    <testcase classname="Feedback should make the feedback visible for a limited amount of time" name="Feedback should make the feedback visible for a limited amount of time" time="0.018">
    </testcase>
    <testcase classname="Feedback should be able to specify the feedback message" name="Feedback should be able to specify the feedback message" time="0.043">
    </testcase>
    <testcase classname="Feedback should allow users to override default feedback timeout via prop" name="Feedback should allow users to override default feedback timeout via prop" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="ModalHeader" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="0.187" tests="3">
    <testcase classname="ModalHeader should render title if has title text" name="ModalHeader should render title if has title text" time="0.008">
    </testcase>
    <testcase classname="ModalHeader should label if has label text" name="ModalHeader should label if has label text" time="0.004">
    </testcase>
    <testcase classname="ModalHeader should render with a ref" name="ModalHeader should render with a ref" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ContentSwitcher - RTL" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="0.424" tests="7">
    <testcase classname="ContentSwitcher - RTL renders API as expected should support a custom `className` prop on the outermost element" name="ContentSwitcher - RTL renders API as expected should support a custom `className` prop on the outermost element" time="0.006">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should spread extra props on the outermost element" name="ContentSwitcher - RTL renders API as expected should spread extra props on the outermost element" time="0.003">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should render with first item selected by default" name="ContentSwitcher - RTL renders API as expected should render with first item selected by default" time="0.065">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should call onChange when selected item changes through mouse click" name="ContentSwitcher - RTL renders API as expected should call onChange when selected item changes through mouse click" time="0.025">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should call onChange when selected item changes through keydown" name="ContentSwitcher - RTL renders API as expected should call onChange when selected item changes through keydown" time="0.033">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should selected initially selected index based on prop" name="ContentSwitcher - RTL renders API as expected should selected initially selected index based on prop" time="0.043">
    </testcase>
    <testcase classname="ContentSwitcher - RTL renders API as expected should change sizes based on prop" name="ContentSwitcher - RTL renders API as expected should change sizes based on prop" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/react/scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="84.509" tests="207">
    <testcase classname="@carbon/react/scss  should be importable" name="@carbon/react/scss  should be importable" time="7.978">
    </testcase>
    <testcase classname="@carbon/react/scss scss/breakpoint should be importable" name="@carbon/react/scss scss/breakpoint should be importable" time="0.022">
    </testcase>
    <testcase classname="@carbon/react/scss scss/colors should be importable" name="@carbon/react/scss scss/colors should be importable" time="0.019">
    </testcase>
    <testcase classname="@carbon/react/scss scss/config should be importable" name="@carbon/react/scss scss/config should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/feature-flags should be importable" name="@carbon/react/scss scss/feature-flags should be importable" time="0.017">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layer should be importable" name="@carbon/react/scss scss/layer should be importable" time="0.153">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layout should be importable" name="@carbon/react/scss scss/layout should be importable" time="0.013">
    </testcase>
    <testcase classname="@carbon/react/scss scss/motion should be importable" name="@carbon/react/scss scss/motion should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/reset should be importable" name="@carbon/react/scss scss/reset should be importable" time="0.063">
    </testcase>
    <testcase classname="@carbon/react/scss scss/spacing should be importable" name="@carbon/react/scss scss/spacing should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/theme should be importable" name="@carbon/react/scss scss/theme should be importable" time="0.131">
    </testcase>
    <testcase classname="@carbon/react/scss scss/themes should be importable" name="@carbon/react/scss scss/themes should be importable" time="0.091">
    </testcase>
    <testcase classname="@carbon/react/scss scss/zone should be importable" name="@carbon/react/scss scss/zone should be importable" time="4.069">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/theme should be importable" name="@carbon/react/scss scss/compat/theme should be importable" time="0.092">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/themes should be importable" name="@carbon/react/scss scss/compat/themes should be importable" time="0.077">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components should be importable" name="@carbon/react/scss scss/components should be importable" time="3.048">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion/accordion should be importable" name="@carbon/react/scss scss/components/accordion/accordion should be importable" time="0.282">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion should be importable" name="@carbon/react/scss scss/components/accordion should be importable" time="0.271">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label/ai-label should be importable" time="0.618">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label should be importable" time="0.797">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" time="0.183">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" time="0.453">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb should be importable" time="0.705">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/button should be importable" name="@carbon/react/scss scss/components/button/button should be importable" time="0.407">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button should be importable" name="@carbon/react/scss scss/components/button should be importable" time="0.492">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/tokens should be importable" name="@carbon/react/scss scss/components/button/tokens should be importable" time="0.172">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button/chat-button should be importable" time="0.397">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button should be importable" time="0.348">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox/checkbox should be importable" time="0.156">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox should be importable" time="0.133">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" time="0.468">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet should be importable" time="0.419">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box/combo-box should be importable" time="0.839">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box should be importable" time="1.043">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list/contained-list should be importable" time="0.422">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list should be importable" time="0.512">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" time="0.535">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher should be importable" time="0.606">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button/copy-button should be importable" time="0.384">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button should be importable" time="0.36">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/data-table should be importable" name="@carbon/react/scss scss/components/data-table/data-table should be importable" time="0.449">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table should be importable" name="@carbon/react/scss scss/components/data-table should be importable" time="0.377">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" name="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" time="0.638">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action should be importable" name="@carbon/react/scss scss/components/data-table/action should be importable" time="0.732">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" time="0.729">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable should be importable" time="0.58">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" time="0.183">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton should be importable" time="0.183">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" name="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" time="0.241">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort should be importable" name="@carbon/react/scss scss/components/data-table/sort should be importable" time="0.134">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker/date-picker should be importable" time="0.351">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker should be importable" time="0.368">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown/dropdown should be importable" time="0.884">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown should be importable" time="1.029">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" time="0.616">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader should be importable" time="0.789">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form/form should be importable" name="@carbon/react/scss scss/components/form/form should be importable" time="0.177">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form should be importable" name="@carbon/react/scss scss/components/form should be importable" time="0.134">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" time="1.107">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box should be importable" time="1">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" time="0.248">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker should be importable" time="0.344">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" time="1.156">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown should be importable" time="0.975">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" time="0.134">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box should be importable" time="0.11">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" time="1.166">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect should be importable" time="1.49">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" time="0.325">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input should be importable" time="0.313">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" time="0.372">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search should be importable" time="0.498">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" time="0.219">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select should be importable" time="0.238">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" time="0.254">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area should be importable" time="0.228">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" time="0.297">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input should be importable" time="0.242">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" time="0.683">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker should be importable" time="0.49">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" time="0.203">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator should be importable" time="0.209">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading should be importable" time="0.258">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" time="0.152">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link should be importable" name="@carbon/react/scss scss/components/link should be importable" time="0.141">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link/link should be importable" name="@carbon/react/scss scss/components/link/link should be importable" time="0.144">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list should be importable" name="@carbon/react/scss scss/components/list should be importable" time="0.17">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list/list should be importable" name="@carbon/react/scss scss/components/list/list should be importable" time="0.143">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box should be importable" name="@carbon/react/scss scss/components/list-box should be importable" time="0.856">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box/list-box should be importable" name="@carbon/react/scss scss/components/list-box/list-box should be importable" time="1.495">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading should be importable" name="@carbon/react/scss scss/components/loading should be importable" time="0.219">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading/loading should be importable" name="@carbon/react/scss scss/components/loading/loading should be importable" time="0.19">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu should be importable" name="@carbon/react/scss scss/components/menu should be importable" time="0.368">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu/menu should be importable" name="@carbon/react/scss scss/components/menu/menu should be importable" time="0.353">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal should be importable" name="@carbon/react/scss scss/components/modal should be importable" time="0.537">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal/modal should be importable" name="@carbon/react/scss scss/components/modal/modal should be importable" time="0.369">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect should be importable" time="0.825">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect/multiselect should be importable" time="1.023">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/actionable-notification should be importable" name="@carbon/react/scss scss/components/notification/actionable-notification should be importable" time="0.581">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification should be importable" name="@carbon/react/scss scss/components/notification should be importable" time="0.604">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/inline-notification should be importable" name="@carbon/react/scss scss/components/notification/inline-notification should be importable" time="0.367">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/toast-notification should be importable" name="@carbon/react/scss scss/components/notification/toast-notification should be importable" time="0.415">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/tokens should be importable" name="@carbon/react/scss scss/components/notification/tokens should be importable" time="0.398">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input should be importable" name="@carbon/react/scss scss/components/number-input should be importable" time="0.189">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input/number-input should be importable" name="@carbon/react/scss scss/components/number-input/number-input should be importable" time="0.214">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu should be importable" time="0.945">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" time="0.646">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination should be importable" name="@carbon/react/scss scss/components/pagination should be importable" time="0.858">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/pagination should be importable" name="@carbon/react/scss scss/components/pagination/pagination should be importable" time="0.942">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" name="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" time="0.338">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav should be importable" time="0.576">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" time="0.418">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover should be importable" name="@carbon/react/scss scss/components/popover should be importable" time="0.253">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover/popover should be importable" name="@carbon/react/scss scss/components/popover/popover should be importable" time="0.16">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar should be importable" time="0.185">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" time="0.126">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator should be importable" time="0.421">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" time="0.606">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button should be importable" time="0.247">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button/radio-button should be importable" time="0.374">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search should be importable" name="@carbon/react/scss scss/components/search should be importable" time="0.398">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search/search should be importable" name="@carbon/react/scss scss/components/search/search should be importable" time="0.418">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select should be importable" name="@carbon/react/scss scss/components/select should be importable" time="0.209">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select/select should be importable" name="@carbon/react/scss scss/components/select/select should be importable" time="0.412">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles should be importable" time="0.367">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" time="0.143">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider should be importable" name="@carbon/react/scss scss/components/slider should be importable" time="0.479">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider/slider should be importable" name="@carbon/react/scss scss/components/slider/slider should be importable" time="0.386">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug should be importable" name="@carbon/react/scss scss/components/slug should be importable" time="0.893">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug/slug should be importable" name="@carbon/react/scss scss/components/slug/slug should be importable" time="0.495">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack should be importable" name="@carbon/react/scss scss/components/stack should be importable" time="0.023">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack/stack should be importable" name="@carbon/react/scss scss/components/stack/stack should be importable" time="0.015">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list/structured-list should be importable" time="0.254">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs should be importable" name="@carbon/react/scss scss/components/tabs should be importable" time="0.766">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs/tabs should be importable" name="@carbon/react/scss scss/components/tabs/tabs should be importable" time="0.548">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag should be importable" name="@carbon/react/scss scss/components/tag should be importable" time="0.565">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tag should be importable" name="@carbon/react/scss scss/components/tag/tag should be importable" time="0.566">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tokens should be importable" name="@carbon/react/scss scss/components/tag/tokens should be importable" time="0.716">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area should be importable" name="@carbon/react/scss scss/components/text-area should be importable" time="0.35">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area/text-area should be importable" name="@carbon/react/scss scss/components/text-area/text-area should be importable" time="0.248">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input should be importable" name="@carbon/react/scss scss/components/text-input should be importable" time="0.252">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input/text-input should be importable" name="@carbon/react/scss scss/components/text-input/text-input should be importable" time="0.307">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile should be importable" name="@carbon/react/scss scss/components/tile should be importable" time="0.318">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile/tile should be importable" name="@carbon/react/scss scss/components/tile/tile should be importable" time="0.358">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker should be importable" time="0.361">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker/time-picker should be importable" time="0.365">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle should be importable" name="@carbon/react/scss scss/components/toggle should be importable" time="0.268">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle/toggle should be importable" name="@carbon/react/scss scss/components/toggle/toggle should be importable" time="0.243">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip should be importable" time="0.497">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip/toggletip should be importable" time="0.386">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip should be importable" time="0.366">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip/tooltip should be importable" time="0.421">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview should be importable" name="@carbon/react/scss scss/components/treeview should be importable" time="0.22">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview/treeview should be importable" name="@carbon/react/scss scss/components/treeview/treeview should be importable" time="0.196">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell should be importable" time="0.526">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" time="0.583">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content/content should be importable" time="0.19">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header/header should be importable" time="0.457">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header should be importable" time="0.373">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" time="0.238">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" time="0.1">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" time="0.156">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" time="0.172">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher should be importable" time="0.153">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" time="0.163">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts should be importable" name="@carbon/react/scss scss/fonts should be importable" time="0.155">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/mono should be importable" name="@carbon/react/scss scss/fonts/mono should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-arabic should be importable" name="@carbon/react/scss scss/fonts/sans-arabic should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-devanagari should be importable" name="@carbon/react/scss scss/fonts/sans-devanagari should be importable" time="0.015">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-hebrew should be importable" name="@carbon/react/scss scss/fonts/sans-hebrew should be importable" time="0.041">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" name="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" time="0.016">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai should be importable" name="@carbon/react/scss scss/fonts/sans-thai should be importable" time="0.036">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans should be importable" name="@carbon/react/scss scss/fonts/sans should be importable" time="0.016">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/serif should be importable" name="@carbon/react/scss scss/fonts/serif should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/src should be importable" name="@carbon/react/scss scss/fonts/src should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/css-grid should be importable" name="@carbon/react/scss scss/grid/css-grid should be importable" time="0.104">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/flexbox should be importable" name="@carbon/react/scss scss/grid/flexbox should be importable" time="0.078">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/mixins should be importable" name="@carbon/react/scss scss/grid/mixins should be importable" time="0.029">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid should be importable" name="@carbon/react/scss scss/grid should be importable" time="0.12">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type should be importable" name="@carbon/react/scss scss/type should be importable" time="0.06">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type/reset should be importable" name="@carbon/react/scss scss/type/reset should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/ai-gradient should be importable" name="@carbon/react/scss scss/utilities/ai-gradient should be importable" time="0.144">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/box-shadow should be importable" name="@carbon/react/scss scss/utilities/box-shadow should be importable" time="0.159">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/button-reset should be importable" name="@carbon/react/scss scss/utilities/button-reset should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-reset should be importable" name="@carbon/react/scss scss/utilities/component-reset should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-tokens should be importable" name="@carbon/react/scss scss/utilities/component-tokens should be importable" time="0.098">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/convert should be importable" name="@carbon/react/scss scss/utilities/convert should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/custom-property should be importable" name="@carbon/react/scss scss/utilities/custom-property should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/focus-outline should be importable" name="@carbon/react/scss scss/utilities/focus-outline should be importable" time="0.245">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" name="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" time="0.009">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" name="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities should be importable" name="@carbon/react/scss scss/utilities should be importable" time="0.203">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/keyframes should be importable" name="@carbon/react/scss scss/utilities/keyframes should be importable" time="0.007">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/layout should be importable" name="@carbon/react/scss scss/utilities/layout should be importable" time="0.078">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/placeholder-colors should be importable" name="@carbon/react/scss scss/utilities/placeholder-colors should be importable" time="0.133">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/rotate should be importable" name="@carbon/react/scss scss/utilities/rotate should be importable" time="0.008">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/skeleton should be importable" name="@carbon/react/scss scss/utilities/skeleton should be importable" time="0.173">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-overflow should be importable" name="@carbon/react/scss scss/utilities/text-overflow should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-truncate should be importable" name="@carbon/react/scss scss/utilities/text-truncate should be importable" time="0.001">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/visually-hidden should be importable" name="@carbon/react/scss scss/utilities/visually-hidden should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/z-index should be importable" name="@carbon/react/scss scss/utilities/z-index should be importable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ComboButton" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="1.427" tests="26">
    <testcase classname="ComboButton renders as expected - Component API supports a ref on the outermost element" name="ComboButton renders as expected - Component API supports a ref on the outermost element" time="0.045">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports a custom class name on the outermost element" name="ComboButton renders as expected - Component API supports a custom class name on the outermost element" time="0.006">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API forwards additional props on the outermost element" name="ComboButton renders as expected - Component API forwards additional props on the outermost element" time="0.007">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API renders props.label on the trigger button" name="ComboButton renders as expected - Component API renders props.label on the trigger button" time="0.049">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.disabled" name="ComboButton renders as expected - Component API supports props.disabled" time="0.056">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.size size=&quot;sm&quot;" name="ComboButton renders as expected - Component API supports props.size size=&quot;sm&quot;" time="0.008">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.size size=&quot;md&quot;" name="ComboButton renders as expected - Component API supports props.size size=&quot;md&quot;" time="0.007">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.size size=&quot;lg&quot;" name="ComboButton renders as expected - Component API supports props.size size=&quot;lg&quot;" time="0.011">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top&quot;" time="0.014">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top-start&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top-start&quot;" time="0.012">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top-end&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;top-end&quot;" time="0.003">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom&quot;" time="0.015">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom-start&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom-start&quot;" time="0.007">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom-end&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;bottom-end&quot;" time="0.007">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;left&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;left&quot;" time="0.002">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;right&quot;" name="ComboButton renders as expected - Component API supports props.tooltipAlignment tooltipAlignment=&quot;right&quot;" time="0.012">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top&quot;" time="0.088">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top-start&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top-start&quot;" time="0.057">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top-end&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;top-end&quot;" time="0.114">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom&quot;" time="0.364">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom-start&quot;" time="0.065">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" name="ComboButton renders as expected - Component API supports props.menuAlignment menuAlignment=&quot;bottom-end&quot;" time="0.047">
    </testcase>
    <testcase classname="ComboButton renders as expected - Component API supports props.translateWithId" name="ComboButton renders as expected - Component API supports props.translateWithId" time="0.013">
    </testcase>
    <testcase classname="ComboButton behaves as expected emits props.onClick on primary action click" name="ComboButton behaves as expected emits props.onClick on primary action click" time="0.047">
    </testcase>
    <testcase classname="ComboButton behaves as expected opens a menu on click on the trigger button" name="ComboButton behaves as expected opens a menu on click on the trigger button" time="0.082">
    </testcase>
    <testcase classname="ComboButton behaves as expected supports ellipsis in ComboButton by checking the className" name="ComboButton behaves as expected supports ellipsis in ComboButton by checking the className" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="fluid" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.277" tests="3">
    <testcase classname="fluid should return back a token if no breakpoints available" name="fluid should return back a token if no breakpoints available" time="0.001">
    </testcase>
    <testcase classname="fluid should include the default styles for each breakpoint as a media key" name="fluid should include the default styles for each breakpoint as a media key" time="0.001">
    </testcase>
    <testcase classname="fluid should compute the fluid styles for a token" name="fluid should compute the fluid styles for a token" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ModalFooter" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:52" time="1.375" tests="12">
    <testcase classname="ModalFooter should pass a classname to the container" name="ModalFooter should pass a classname to the container" time="0.01">
    </testcase>
    <testcase classname="ModalFooter should spread extra props onto outermost element" name="ModalFooter should spread extra props onto outermost element" time="0.003">
    </testcase>
    <testcase classname="ModalFooter should render primary button text" name="ModalFooter should render primary button text" time="0.069">
    </testcase>
    <testcase classname="ModalFooter should render secondary button text" name="ModalFooter should render secondary button text" time="0.016">
    </testcase>
    <testcase classname="ModalFooter should disable the primary button" name="ModalFooter should disable the primary button" time="0.006">
    </testcase>
    <testcase classname="ModalFooter should pass classes to primary button" name="ModalFooter should pass classes to primary button" time="0.003">
    </testcase>
    <testcase classname="ModalFooter should pass classes to secondary button" name="ModalFooter should pass classes to secondary button" time="0.006">
    </testcase>
    <testcase classname="ModalFooter should call closeModal when the modal is closed" name="ModalFooter should call closeModal when the modal is closed" time="0.12">
    </testcase>
    <testcase classname="ModalFooter should render primary button as danger" name="ModalFooter should render primary button as danger" time="0.008">
    </testcase>
    <testcase classname="ModalFooter should call onRequestClose when close requested" name="ModalFooter should call onRequestClose when close requested" time="0.056">
    </testcase>
    <testcase classname="ModalFooter should call onRequestSubmit when submit requested" name="ModalFooter should call onRequestSubmit when submit requested" time="0.021">
    </testcase>
    <testcase classname="ModalFooter should render provided secondary buttons" name="ModalFooter should render provided secondary buttons" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="styles" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.146" tests="58">
    <testcase classname="styles body01 should be printable" name="styles body01 should be printable" time="0.002">
    </testcase>
    <testcase classname="styles body02 should be printable" name="styles body02 should be printable" time="0">
    </testcase>
    <testcase classname="styles bodyCompact01 should be printable" name="styles bodyCompact01 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles bodyCompact02 should be printable" name="styles bodyCompact02 should be printable" time="0">
    </testcase>
    <testcase classname="styles bodyLong01 should be printable" name="styles bodyLong01 should be printable" time="0">
    </testcase>
    <testcase classname="styles bodyLong02 should be printable" name="styles bodyLong02 should be printable" time="0">
    </testcase>
    <testcase classname="styles bodyShort01 should be printable" name="styles bodyShort01 should be printable" time="0">
    </testcase>
    <testcase classname="styles bodyShort02 should be printable" name="styles bodyShort02 should be printable" time="0">
    </testcase>
    <testcase classname="styles caption01 should be printable" name="styles caption01 should be printable" time="0">
    </testcase>
    <testcase classname="styles caption02 should be printable" name="styles caption02 should be printable" time="0">
    </testcase>
    <testcase classname="styles code01 should be printable" name="styles code01 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles code02 should be printable" name="styles code02 should be printable" time="0">
    </testcase>
    <testcase classname="styles display01 should be printable" name="styles display01 should be printable" time="0">
    </testcase>
    <testcase classname="styles display02 should be printable" name="styles display02 should be printable" time="0">
    </testcase>
    <testcase classname="styles display03 should be printable" name="styles display03 should be printable" time="0">
    </testcase>
    <testcase classname="styles display04 should be printable" name="styles display04 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveHeading01 should be printable" name="styles expressiveHeading01 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveHeading02 should be printable" name="styles expressiveHeading02 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveHeading03 should be printable" name="styles expressiveHeading03 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveHeading04 should be printable" name="styles expressiveHeading04 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles expressiveHeading05 should be printable" name="styles expressiveHeading05 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveHeading06 should be printable" name="styles expressiveHeading06 should be printable" time="0">
    </testcase>
    <testcase classname="styles expressiveParagraph01 should be printable" name="styles expressiveParagraph01 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidDisplay01 should be printable" name="styles fluidDisplay01 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidDisplay02 should be printable" name="styles fluidDisplay02 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidDisplay03 should be printable" name="styles fluidDisplay03 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidDisplay04 should be printable" name="styles fluidDisplay04 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidHeading03 should be printable" name="styles fluidHeading03 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidHeading04 should be printable" name="styles fluidHeading04 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidHeading05 should be printable" name="styles fluidHeading05 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles fluidHeading06 should be printable" name="styles fluidHeading06 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidParagraph01 should be printable" name="styles fluidParagraph01 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles fluidQuotation01 should be printable" name="styles fluidQuotation01 should be printable" time="0">
    </testcase>
    <testcase classname="styles fluidQuotation02 should be printable" name="styles fluidQuotation02 should be printable" time="0">
    </testcase>
    <testcase classname="styles heading01 should be printable" name="styles heading01 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles heading02 should be printable" name="styles heading02 should be printable" time="0">
    </testcase>
    <testcase classname="styles heading03 should be printable" name="styles heading03 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles heading04 should be printable" name="styles heading04 should be printable" time="0">
    </testcase>
    <testcase classname="styles heading05 should be printable" name="styles heading05 should be printable" time="0">
    </testcase>
    <testcase classname="styles heading06 should be printable" name="styles heading06 should be printable" time="0">
    </testcase>
    <testcase classname="styles heading07 should be printable" name="styles heading07 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles headingCompact01 should be printable" name="styles headingCompact01 should be printable" time="0">
    </testcase>
    <testcase classname="styles headingCompact02 should be printable" name="styles headingCompact02 should be printable" time="0">
    </testcase>
    <testcase classname="styles helperText01 should be printable" name="styles helperText01 should be printable" time="0">
    </testcase>
    <testcase classname="styles helperText02 should be printable" name="styles helperText02 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles label01 should be printable" name="styles label01 should be printable" time="0">
    </testcase>
    <testcase classname="styles label02 should be printable" name="styles label02 should be printable" time="0">
    </testcase>
    <testcase classname="styles legal01 should be printable" name="styles legal01 should be printable" time="0">
    </testcase>
    <testcase classname="styles legal02 should be printable" name="styles legal02 should be printable" time="0">
    </testcase>
    <testcase classname="styles productiveHeading01 should be printable" name="styles productiveHeading01 should be printable" time="0">
    </testcase>
    <testcase classname="styles productiveHeading02 should be printable" name="styles productiveHeading02 should be printable" time="0.002">
    </testcase>
    <testcase classname="styles productiveHeading03 should be printable" name="styles productiveHeading03 should be printable" time="0">
    </testcase>
    <testcase classname="styles productiveHeading04 should be printable" name="styles productiveHeading04 should be printable" time="0">
    </testcase>
    <testcase classname="styles productiveHeading05 should be printable" name="styles productiveHeading05 should be printable" time="0.001">
    </testcase>
    <testcase classname="styles productiveHeading06 should be printable" name="styles productiveHeading06 should be printable" time="0">
    </testcase>
    <testcase classname="styles productiveHeading07 should be printable" name="styles productiveHeading07 should be printable" time="0">
    </testcase>
    <testcase classname="styles quotation01 should be printable" name="styles quotation01 should be printable" time="0">
    </testcase>
    <testcase classname="styles quotation02 should be printable" name="styles quotation02 should be printable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="type tokens" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.214" tests="116">
    <testcase classname="type tokens caption01 should be defined in styles" name="type tokens caption01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens caption02 should be defined in styles" name="type tokens caption02 should be defined in styles" time="0.001">
    </testcase>
    <testcase classname="type tokens label01 should be defined in styles" name="type tokens label01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens label02 should be defined in styles" name="type tokens label02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens helperText01 should be defined in styles" name="type tokens helperText01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens helperText02 should be defined in styles" name="type tokens helperText02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyShort01 should be defined in styles" name="type tokens bodyShort01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyLong01 should be defined in styles" name="type tokens bodyLong01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyShort02 should be defined in styles" name="type tokens bodyShort02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyLong02 should be defined in styles" name="type tokens bodyLong02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens code01 should be defined in styles" name="type tokens code01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens code02 should be defined in styles" name="type tokens code02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading01 should be defined in styles" name="type tokens heading01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading01 should be defined in styles" name="type tokens productiveHeading01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading02 should be defined in styles" name="type tokens heading02 should be defined in styles" time="0.001">
    </testcase>
    <testcase classname="type tokens productiveHeading02 should be defined in styles" name="type tokens productiveHeading02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading03 should be defined in styles" name="type tokens productiveHeading03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading04 should be defined in styles" name="type tokens productiveHeading04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading05 should be defined in styles" name="type tokens productiveHeading05 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading06 should be defined in styles" name="type tokens productiveHeading06 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading07 should be defined in styles" name="type tokens productiveHeading07 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading01 should be defined in styles" name="type tokens expressiveHeading01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading02 should be defined in styles" name="type tokens expressiveHeading02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading03 should be defined in styles" name="type tokens expressiveHeading03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading04 should be defined in styles" name="type tokens expressiveHeading04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading05 should be defined in styles" name="type tokens expressiveHeading05 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading06 should be defined in styles" name="type tokens expressiveHeading06 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens expressiveParagraph01 should be defined in styles" name="type tokens expressiveParagraph01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens quotation01 should be defined in styles" name="type tokens quotation01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens quotation02 should be defined in styles" name="type tokens quotation02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens display01 should be defined in styles" name="type tokens display01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens display02 should be defined in styles" name="type tokens display02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens display03 should be defined in styles" name="type tokens display03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens display04 should be defined in styles" name="type tokens display04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens legal01 should be defined in styles" name="type tokens legal01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens legal02 should be defined in styles" name="type tokens legal02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyCompact01 should be defined in styles" name="type tokens bodyCompact01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens bodyCompact02 should be defined in styles" name="type tokens bodyCompact02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens body01 should be defined in styles" name="type tokens body01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens body02 should be defined in styles" name="type tokens body02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens headingCompact01 should be defined in styles" name="type tokens headingCompact01 should be defined in styles" time="0.001">
    </testcase>
    <testcase classname="type tokens headingCompact02 should be defined in styles" name="type tokens headingCompact02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading03 should be defined in styles" name="type tokens heading03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading04 should be defined in styles" name="type tokens heading04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading05 should be defined in styles" name="type tokens heading05 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading06 should be defined in styles" name="type tokens heading06 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens heading07 should be defined in styles" name="type tokens heading07 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading03 should be defined in styles" name="type tokens fluidHeading03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading04 should be defined in styles" name="type tokens fluidHeading04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading05 should be defined in styles" name="type tokens fluidHeading05 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading06 should be defined in styles" name="type tokens fluidHeading06 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidParagraph01 should be defined in styles" name="type tokens fluidParagraph01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidQuotation01 should be defined in styles" name="type tokens fluidQuotation01 should be defined in styles" time="0.001">
    </testcase>
    <testcase classname="type tokens fluidQuotation02 should be defined in styles" name="type tokens fluidQuotation02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay01 should be defined in styles" name="type tokens fluidDisplay01 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay02 should be defined in styles" name="type tokens fluidDisplay02 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay03 should be defined in styles" name="type tokens fluidDisplay03 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay04 should be defined in styles" name="type tokens fluidDisplay04 should be defined in styles" time="0">
    </testcase>
    <testcase classname="type tokens body01 should be defined in tokens" name="type tokens body01 should be defined in tokens" time="0.001">
    </testcase>
    <testcase classname="type tokens body02 should be defined in tokens" name="type tokens body02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyCompact01 should be defined in tokens" name="type tokens bodyCompact01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyCompact02 should be defined in tokens" name="type tokens bodyCompact02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyLong01 should be defined in tokens" name="type tokens bodyLong01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyLong02 should be defined in tokens" name="type tokens bodyLong02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyShort01 should be defined in tokens" name="type tokens bodyShort01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens bodyShort02 should be defined in tokens" name="type tokens bodyShort02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens caption01 should be defined in tokens" name="type tokens caption01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens caption02 should be defined in tokens" name="type tokens caption02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens code01 should be defined in tokens" name="type tokens code01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens code02 should be defined in tokens" name="type tokens code02 should be defined in tokens" time="0.001">
    </testcase>
    <testcase classname="type tokens display01 should be defined in tokens" name="type tokens display01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens display02 should be defined in tokens" name="type tokens display02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens display03 should be defined in tokens" name="type tokens display03 should be defined in tokens" time="0.008">
    </testcase>
    <testcase classname="type tokens display04 should be defined in tokens" name="type tokens display04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading01 should be defined in tokens" name="type tokens expressiveHeading01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading02 should be defined in tokens" name="type tokens expressiveHeading02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading03 should be defined in tokens" name="type tokens expressiveHeading03 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading04 should be defined in tokens" name="type tokens expressiveHeading04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading05 should be defined in tokens" name="type tokens expressiveHeading05 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveHeading06 should be defined in tokens" name="type tokens expressiveHeading06 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens expressiveParagraph01 should be defined in tokens" name="type tokens expressiveParagraph01 should be defined in tokens" time="0.001">
    </testcase>
    <testcase classname="type tokens fluidDisplay01 should be defined in tokens" name="type tokens fluidDisplay01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay02 should be defined in tokens" name="type tokens fluidDisplay02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay03 should be defined in tokens" name="type tokens fluidDisplay03 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidDisplay04 should be defined in tokens" name="type tokens fluidDisplay04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading03 should be defined in tokens" name="type tokens fluidHeading03 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading04 should be defined in tokens" name="type tokens fluidHeading04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading05 should be defined in tokens" name="type tokens fluidHeading05 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidHeading06 should be defined in tokens" name="type tokens fluidHeading06 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidParagraph01 should be defined in tokens" name="type tokens fluidParagraph01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidQuotation01 should be defined in tokens" name="type tokens fluidQuotation01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens fluidQuotation02 should be defined in tokens" name="type tokens fluidQuotation02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading01 should be defined in tokens" name="type tokens heading01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading02 should be defined in tokens" name="type tokens heading02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading03 should be defined in tokens" name="type tokens heading03 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading04 should be defined in tokens" name="type tokens heading04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading05 should be defined in tokens" name="type tokens heading05 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens heading06 should be defined in tokens" name="type tokens heading06 should be defined in tokens" time="0.001">
    </testcase>
    <testcase classname="type tokens heading07 should be defined in tokens" name="type tokens heading07 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens headingCompact01 should be defined in tokens" name="type tokens headingCompact01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens headingCompact02 should be defined in tokens" name="type tokens headingCompact02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens helperText01 should be defined in tokens" name="type tokens helperText01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens helperText02 should be defined in tokens" name="type tokens helperText02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens label01 should be defined in tokens" name="type tokens label01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens label02 should be defined in tokens" name="type tokens label02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens legal01 should be defined in tokens" name="type tokens legal01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens legal02 should be defined in tokens" name="type tokens legal02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading01 should be defined in tokens" name="type tokens productiveHeading01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading02 should be defined in tokens" name="type tokens productiveHeading02 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading03 should be defined in tokens" name="type tokens productiveHeading03 should be defined in tokens" time="0.002">
    </testcase>
    <testcase classname="type tokens productiveHeading04 should be defined in tokens" name="type tokens productiveHeading04 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading05 should be defined in tokens" name="type tokens productiveHeading05 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading06 should be defined in tokens" name="type tokens productiveHeading06 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens productiveHeading07 should be defined in tokens" name="type tokens productiveHeading07 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens quotation01 should be defined in tokens" name="type tokens quotation01 should be defined in tokens" time="0">
    </testcase>
    <testcase classname="type tokens quotation02 should be defined in tokens" name="type tokens quotation02 should be defined in tokens" time="0">
    </testcase>
  </testsuite>
  <testsuite name="reset" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.091" tests="2">
    <testcase classname="reset should set styles for `html` and `body`" name="reset should set styles for `html` and `body`" time="0.001">
    </testcase>
    <testcase classname="reset should be printable" name="reset should be printable" time="0">
    </testcase>
  </testsuite>
  <testsuite name="type" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.141" tests="1">
    <testcase classname="type should export type helpers" name="type should export type helpers" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="tools" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="0.14" tests="2">
    <testcase classname="tools adjustLightness should increase lightness by a specified amount" name="tools adjustLightness should increase lightness by a specified amount" time="0.002">
    </testcase>
    <testcase classname="tools adjustLightness should decrease lightness by a specified amount when given a negative shift" name="tools adjustLightness should decrease lightness by a specified amount when given a negative shift" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxGroup" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="1.131" tests="12">
    <testcase classname="CheckboxGroup should support a custom `className` prop on the outermost element" name="CheckboxGroup should support a custom `className` prop on the outermost element" time="0.017">
    </testcase>
    <testcase classname="CheckboxGroup should render helperText" name="CheckboxGroup should render helperText" time="0.016">
    </testcase>
    <testcase classname="CheckboxGroup should set data-invalid when invalid prop is true" name="CheckboxGroup should set data-invalid when invalid prop is true" time="0.017">
    </testcase>
    <testcase classname="CheckboxGroup should display invalidText if invalid prop is true" name="CheckboxGroup should display invalidText if invalid prop is true" time="0.007">
    </testcase>
    <testcase classname="CheckboxGroup should render legendText" name="CheckboxGroup should render legendText" time="0.01">
    </testcase>
    <testcase classname="CheckboxGroup should set the id for legend based on legendId" name="CheckboxGroup should set the id for legend based on legendId" time="0.003">
    </testcase>
    <testcase classname="CheckboxGroup should respect readOnly prop" name="CheckboxGroup should respect readOnly prop" time="0.006">
    </testcase>
    <testcase classname="CheckboxGroup should respect warn prop" name="CheckboxGroup should respect warn prop" time="0.003">
    </testcase>
    <testcase classname="CheckboxGroup should display warnText if warn prop is true" name="CheckboxGroup should display warnText if warn prop is true" time="0.005">
    </testcase>
    <testcase classname="CheckboxGroup should respect deprecated slug prop" name="CheckboxGroup should respect deprecated slug prop" time="0.096">
    </testcase>
    <testcase classname="CheckboxGroup should respect decorator prop" name="CheckboxGroup should respect decorator prop" time="0.02">
    </testcase>
    <testcase classname="CheckboxGroup should render checkboxes horizontally" name="CheckboxGroup should render checkboxes horizontally" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DatePicker" errors="0" failures="0" skipped="1" timestamp="2025-04-09T19:51:50" time="3.948" tests="29">
    <testcase classname="DatePicker should add extra classes that are passed via className" name="DatePicker should add extra classes that are passed via className" time="0.011">
    </testcase>
    <testcase classname="DatePicker should add the correct class when type &quot;simple&quot; is passed as a prop" name="DatePicker should add the correct class when type &quot;simple&quot; is passed as a prop" time="0.002">
    </testcase>
    <testcase classname="DatePicker should add the correct class when type &quot;single&quot; is passed as a prop" name="DatePicker should add the correct class when type &quot;single&quot; is passed as a prop" time="0.119">
    </testcase>
    <testcase classname="DatePicker should add the correct class when type &quot;range&quot; is passed as a prop" name="DatePicker should add the correct class when type &quot;range&quot; is passed as a prop" time="0.093">
    </testcase>
    <testcase classname="DatePicker should not fire onChange handler when clicking outside the datepicker in range mode" name="DatePicker should not fire onChange handler when clicking outside the datepicker in range mode" time="0.055">
    </testcase>
    <testcase classname="DatePicker should render the children as expected" name="DatePicker should render the children as expected" time="0.114">
    </testcase>
    <testcase classname="DatePicker should add the date format as expected" name="DatePicker should add the date format as expected" time="0.076">
    </testcase>
    <testcase classname="DatePicker has the value as expected" name="DatePicker has the value as expected" time="0.051">
    </testcase>
    <testcase classname="DatePicker should accept a `ref` for the outermost element" name="DatePicker should accept a `ref` for the outermost element" time="0.001">
    </testcase>
    <testcase classname="DatePicker should respect decorator prop" name="DatePicker should respect decorator prop" time="0.038">
    </testcase>
    <testcase classname="DatePicker should respect deprecated slug prop" name="DatePicker should respect deprecated slug prop" time="0.016">
    </testcase>
    <testcase classname="DatePicker should respect parseDate prop" name="DatePicker should respect parseDate prop" time="0.107">
    </testcase>
    <testcase classname="DatePicker invalid date month/day is correctly parsed when using the default format" name="DatePicker invalid date month/day is correctly parsed when using the default format" time="0.295">
    </testcase>
    <testcase classname="DatePicker invalid date month/day is parsed by flatpickr when using a custom format" name="DatePicker invalid date month/day is parsed by flatpickr when using a custom format" time="0.207">
    </testcase>
    <testcase classname="DatePicker the input is cleared when given a completely invalid date" name="DatePicker the input is cleared when given a completely invalid date" time="0.152">
    </testcase>
    <testcase classname="Simple date picker should not initialize a calendar" name="Simple date picker should not initialize a calendar" time="0.009">
    </testcase>
    <testcase classname="Simple date picker react.lazy should initialize a calendar when using react.lazy" name="Simple date picker react.lazy should initialize a calendar when using react.lazy" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Single date picker should initialize a calendar" name="Single date picker should initialize a calendar" time="0.176">
    </testcase>
    <testcase classname="Single date picker should update the calendar classnames when open" name="Single date picker should update the calendar classnames when open" time="0.235">
    </testcase>
    <testcase classname="Single date picker should support controlled value" name="Single date picker should support controlled value" time="0.219">
    </testcase>
    <testcase classname="Single date picker should respect closeOnSelect prop" name="Single date picker should respect closeOnSelect prop" time="0.184">
    </testcase>
    <testcase classname="Date picker with locale sets the locale when it is passed as a prop" name="Date picker with locale sets the locale when it is passed as a prop" time="0.134">
    </testcase>
    <testcase classname="Date picker with locale should use default locale if one is not passed as a prop" name="Date picker with locale should use default locale if one is not passed as a prop" time="0.116">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate should respect minDate" name="Date picker with minDate and maxDate should respect minDate" time="0.161">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate should respect maxDate" name="Date picker with minDate and maxDate should respect maxDate" time="0.091">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate should not have &quot;console.error&quot; being created" name="Date picker with minDate and maxDate should not have &quot;console.error&quot; being created" time="0.087">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate should respect readOnly prop" name="Date picker with minDate and maxDate should respect readOnly prop" time="0.168">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate should work with ISO 8601 format or others" name="Date picker with minDate and maxDate should work with ISO 8601 format or others" time="0.31">
    </testcase>
    <testcase classname="Date picker with minDate and maxDate clearing end date should not cause console warnings" name="Date picker with minDate and maxDate clearing end date should not cause console warnings" time="0.451">
    </testcase>
  </testsuite>
  <testsuite name="ComposedModal" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="2.515" tests="22">
    <testcase classname="ComposedModal it renders as expected supports a custom class on the outermost div" name="ComposedModal it renders as expected supports a custom class on the outermost div" time="0.014">
    </testcase>
    <testcase classname="ComposedModal it renders as expected supports a custom class on the container div" name="ComposedModal it renders as expected supports a custom class on the container div" time="0.001">
    </testcase>
    <testcase classname="ComposedModal it renders as expected supports a custom class on the modal body" name="ComposedModal it renders as expected supports a custom class on the modal body" time="0.002">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should spread props onto the outermost div" name="ComposedModal it renders as expected should spread props onto the outermost div" time="0.002">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should be labelled by a provided aria-label" name="ComposedModal it renders as expected should be labelled by a provided aria-label" time="0.002">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should be labelled by a provided aria-labelledby" name="ComposedModal it renders as expected should be labelled by a provided aria-labelledby" time="0.017">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should change submit to danger button" name="ComposedModal it renders as expected should change submit to danger button" time="0.005">
    </testcase>
    <testcase classname="ComposedModal it renders as expected calls onClose when close button is clicked" name="ComposedModal it renders as expected calls onClose when close button is clicked" time="0.145">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should not close when onClose returns false" name="ComposedModal it renders as expected should not close when onClose returns false" time="0.13">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should be open if specified" name="ComposedModal it renders as expected should be open if specified" time="0.17">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should prevent close on click outside" name="ComposedModal it renders as expected should prevent close on click outside" time="0.062">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should focus selector on open" name="ComposedModal it renders as expected should focus selector on open" time="0.051">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should focus on the primary button" name="ComposedModal it renders as expected should focus on the primary button" time="0.104">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should focus on the secondary button if danger is true" name="ComposedModal it renders as expected should focus on the secondary button if danger is true" time="0.062">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should focus on the close button if there is no focusable element" name="ComposedModal it renders as expected should focus on the close button if there is no focusable element" time="0.076">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should change size based on size prop" name="ComposedModal it renders as expected should change size based on size prop" time="0.016">
    </testcase>
    <testcase classname="ComposedModal it renders as expected disables buttons when inline loading status is active" name="ComposedModal it renders as expected disables buttons when inline loading status is active" time="0.136">
    </testcase>
    <testcase classname="ComposedModal it renders as expected should respect decorator prop" name="ComposedModal it renders as expected should respect decorator prop" time="0.021">
    </testcase>
    <testcase classname="ComposedModal should respect the deprecated slug prop" name="ComposedModal should respect the deprecated slug prop" time="0.056">
    </testcase>
    <testcase classname="ComposedModal should handle onClick events" name="ComposedModal should handle onClick events" time="0.028">
    </testcase>
    <testcase classname="ComposedModal should close when clicked on outside background layer" name="ComposedModal should close when clicked on outside background layer" time="0.023">
    </testcase>
    <testcase classname="ComposedModal should NOT close when clicked inside dialog window, dragged outside and released mouse button" name="ComposedModal should NOT close when clicked inside dialog window, dragged outside and released mouse button" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="themes" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="1.468" tests="556">
    <testcase classname="themes white background should be defined" name="themes white background should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundActive should be defined" name="themes white backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelected should be defined" name="themes white backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundSelectedHover should be defined" name="themes white backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundHover should be defined" name="themes white backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundBrand should be defined" name="themes white backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverse should be defined" name="themes white backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white backgroundInverseHover should be defined" name="themes white backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white layer01 should be defined" name="themes white layer01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerActive01 should be defined" name="themes white layerActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerHover01 should be defined" name="themes white layerHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelected01 should be defined" name="themes white layerSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedHover01 should be defined" name="themes white layerSelectedHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layer02 should be defined" name="themes white layer02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerActive02 should be defined" name="themes white layerActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerHover02 should be defined" name="themes white layerHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelected02 should be defined" name="themes white layerSelected02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedHover02 should be defined" name="themes white layerSelectedHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layer03 should be defined" name="themes white layer03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerActive03 should be defined" name="themes white layerActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerHover03 should be defined" name="themes white layerHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelected03 should be defined" name="themes white layerSelected03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white layerSelectedHover03 should be defined" name="themes white layerSelectedHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedInverse should be defined" name="themes white layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerSelectedDisabled should be defined" name="themes white layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccent01 should be defined" name="themes white layerAccent01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentActive01 should be defined" name="themes white layerAccentActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentHover01 should be defined" name="themes white layerAccentHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccent02 should be defined" name="themes white layerAccent02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentActive02 should be defined" name="themes white layerAccentActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentHover02 should be defined" name="themes white layerAccentHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccent03 should be defined" name="themes white layerAccent03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white layerAccentActive03 should be defined" name="themes white layerAccentActive03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white layerAccentHover03 should be defined" name="themes white layerAccentHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white field01 should be defined" name="themes white field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fieldHover01 should be defined" name="themes white fieldHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white field02 should be defined" name="themes white field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fieldHover02 should be defined" name="themes white fieldHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white field03 should be defined" name="themes white field03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white fieldHover03 should be defined" name="themes white fieldHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white interactive should be defined" name="themes white interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtle00 should be defined" name="themes white borderSubtle00 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtle01 should be defined" name="themes white borderSubtle01 should be defined" time="0.005">
    </testcase>
    <testcase classname="themes white borderSubtleSelected01 should be defined" name="themes white borderSubtleSelected01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white borderSubtle02 should be defined" name="themes white borderSubtle02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtleSelected02 should be defined" name="themes white borderSubtleSelected02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtle03 should be defined" name="themes white borderSubtle03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderSubtleSelected03 should be defined" name="themes white borderSubtleSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderStrong01 should be defined" name="themes white borderStrong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderStrong02 should be defined" name="themes white borderStrong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderStrong03 should be defined" name="themes white borderStrong03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderTile01 should be defined" name="themes white borderTile01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderTile02 should be defined" name="themes white borderTile02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white borderTile03 should be defined" name="themes white borderTile03 should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderInverse should be defined" name="themes white borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderInteractive should be defined" name="themes white borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes white borderDisabled should be defined" name="themes white borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white textPrimary should be defined" name="themes white textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white textSecondary should be defined" name="themes white textSecondary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white textPlaceholder should be defined" name="themes white textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes white textHelper should be defined" name="themes white textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes white textError should be defined" name="themes white textError should be defined" time="0">
    </testcase>
    <testcase classname="themes white textInverse should be defined" name="themes white textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white textOnColor should be defined" name="themes white textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes white textOnColorDisabled should be defined" name="themes white textOnColorDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white textDisabled should be defined" name="themes white textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkPrimary should be defined" name="themes white linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkPrimaryHover should be defined" name="themes white linkPrimaryHover should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white linkSecondary should be defined" name="themes white linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkInverseVisited should be defined" name="themes white linkInverseVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkVisited should be defined" name="themes white linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkInverse should be defined" name="themes white linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkInverseActive should be defined" name="themes white linkInverseActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white linkInverseHover should be defined" name="themes white linkInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconPrimary should be defined" name="themes white iconPrimary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white iconSecondary should be defined" name="themes white iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconInverse should be defined" name="themes white iconInverse should be defined" time="0.006">
    </testcase>
    <testcase classname="themes white iconOnColor should be defined" name="themes white iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconOnColorDisabled should be defined" name="themes white iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes white iconDisabled should be defined" name="themes white iconDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white iconInteractive should be defined" name="themes white iconInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportError should be defined" name="themes white supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportSuccess should be defined" name="themes white supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportWarning should be defined" name="themes white supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportInfo should be defined" name="themes white supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportErrorInverse should be defined" name="themes white supportErrorInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white supportSuccessInverse should be defined" name="themes white supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportWarningInverse should be defined" name="themes white supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportInfoInverse should be defined" name="themes white supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportCautionMajor should be defined" name="themes white supportCautionMajor should be defined" time="0">
    </testcase>
    <testcase classname="themes white supportCautionMinor should be defined" name="themes white supportCautionMinor should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white supportCautionUndefined should be defined" name="themes white supportCautionUndefined should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverBackground should be defined" name="themes white aiPopoverBackground should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white aiPopoverShadowOuter01 should be defined" name="themes white aiPopoverShadowOuter01 should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverShadowOuter02 should be defined" name="themes white aiPopoverShadowOuter02 should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiInnerShadow should be defined" name="themes white aiInnerShadow should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiAuraStartSm should be defined" name="themes white aiAuraStartSm should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiAuraStart should be defined" name="themes white aiAuraStart should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiAuraEnd should be defined" name="themes white aiAuraEnd should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white aiAuraHoverBackground should be defined" name="themes white aiAuraHoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiAuraHoverStart should be defined" name="themes white aiAuraHoverStart should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiAuraHoverEnd should be defined" name="themes white aiAuraHoverEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiBorderStrong should be defined" name="themes white aiBorderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiBorderStart should be defined" name="themes white aiBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiBorderEnd should be defined" name="themes white aiBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiDropShadow should be defined" name="themes white aiDropShadow should be defined" time="0.003">
    </testcase>
    <testcase classname="themes white aiSkeletonBackground should be defined" name="themes white aiSkeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiSkeletonElementBackground should be defined" name="themes white aiSkeletonElementBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiOverlay should be defined" name="themes white aiOverlay should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverCaretCenter should be defined" name="themes white aiPopoverCaretCenter should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverCaretBottom should be defined" name="themes white aiPopoverCaretBottom should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverCaretBottomBackground should be defined" name="themes white aiPopoverCaretBottomBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white aiPopoverCaretBottomBackgroundActions should be defined" name="themes white aiPopoverCaretBottomBackgroundActions should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatPromptBackground should be defined" name="themes white chatPromptBackground should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white chatPromptBorderStart should be defined" name="themes white chatPromptBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatPromptBorderEnd should be defined" name="themes white chatPromptBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatBubbleUser should be defined" name="themes white chatBubbleUser should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatBubbleAgent should be defined" name="themes white chatBubbleAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatBubbleBorder should be defined" name="themes white chatBubbleBorder should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatAvatarBot should be defined" name="themes white chatAvatarBot should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatAvatarAgent should be defined" name="themes white chatAvatarAgent should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white chatAvatarUser should be defined" name="themes white chatAvatarUser should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatShellBackground should be defined" name="themes white chatShellBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatHeaderBackground should be defined" name="themes white chatHeaderBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatButton should be defined" name="themes white chatButton should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatButtonHover should be defined" name="themes white chatButtonHover should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white chatButtonTextHover should be defined" name="themes white chatButtonTextHover should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatButtonActive should be defined" name="themes white chatButtonActive should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatButtonSelected should be defined" name="themes white chatButtonSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white chatButtonTextSelected should be defined" name="themes white chatButtonTextSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes white highlight should be defined" name="themes white highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes white overlay should be defined" name="themes white overlay should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white toggleOff should be defined" name="themes white toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes white shadow should be defined" name="themes white shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes white focus should be defined" name="themes white focus should be defined" time="0.006">
    </testcase>
    <testcase classname="themes white focusInset should be defined" name="themes white focusInset should be defined" time="0.003">
    </testcase>
    <testcase classname="themes white focusInverse should be defined" name="themes white focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes white skeletonBackground should be defined" name="themes white skeletonBackground should be defined" time="0.001">
    </testcase>
    <testcase classname="themes white skeletonElement should be defined" name="themes white skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 background should be defined" name="themes g10 background should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundActive should be defined" name="themes g10 backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelected should be defined" name="themes g10 backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundSelectedHover should be defined" name="themes g10 backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundHover should be defined" name="themes g10 backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundBrand should be defined" name="themes g10 backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundInverse should be defined" name="themes g10 backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 backgroundInverseHover should be defined" name="themes g10 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layer01 should be defined" name="themes g10 layer01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerActive01 should be defined" name="themes g10 layerActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerHover01 should be defined" name="themes g10 layerHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelected01 should be defined" name="themes g10 layerSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedHover01 should be defined" name="themes g10 layerSelectedHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layer02 should be defined" name="themes g10 layer02 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g10 layerActive02 should be defined" name="themes g10 layerActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerHover02 should be defined" name="themes g10 layerHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelected02 should be defined" name="themes g10 layerSelected02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedHover02 should be defined" name="themes g10 layerSelectedHover02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layer03 should be defined" name="themes g10 layer03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerActive03 should be defined" name="themes g10 layerActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerHover03 should be defined" name="themes g10 layerHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelected03 should be defined" name="themes g10 layerSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedHover03 should be defined" name="themes g10 layerSelectedHover03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layerSelectedInverse should be defined" name="themes g10 layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerSelectedDisabled should be defined" name="themes g10 layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccent01 should be defined" name="themes g10 layerAccent01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentActive01 should be defined" name="themes g10 layerAccentActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentHover01 should be defined" name="themes g10 layerAccentHover01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layerAccent02 should be defined" name="themes g10 layerAccent02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentActive02 should be defined" name="themes g10 layerAccentActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentHover02 should be defined" name="themes g10 layerAccentHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccent03 should be defined" name="themes g10 layerAccent03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 layerAccentActive03 should be defined" name="themes g10 layerAccentActive03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 layerAccentHover03 should be defined" name="themes g10 layerAccentHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field01 should be defined" name="themes g10 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fieldHover01 should be defined" name="themes g10 fieldHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field02 should be defined" name="themes g10 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 fieldHover02 should be defined" name="themes g10 fieldHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 field03 should be defined" name="themes g10 field03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 fieldHover03 should be defined" name="themes g10 fieldHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 interactive should be defined" name="themes g10 interactive should be defined" time="0.004">
    </testcase>
    <testcase classname="themes g10 borderSubtle00 should be defined" name="themes g10 borderSubtle00 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtle01 should be defined" name="themes g10 borderSubtle01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 borderSubtleSelected01 should be defined" name="themes g10 borderSubtleSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtle02 should be defined" name="themes g10 borderSubtle02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtleSelected02 should be defined" name="themes g10 borderSubtleSelected02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 borderSubtle03 should be defined" name="themes g10 borderSubtle03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderSubtleSelected03 should be defined" name="themes g10 borderSubtleSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderStrong01 should be defined" name="themes g10 borderStrong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderStrong02 should be defined" name="themes g10 borderStrong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderStrong03 should be defined" name="themes g10 borderStrong03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderTile01 should be defined" name="themes g10 borderTile01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderTile02 should be defined" name="themes g10 borderTile02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderTile03 should be defined" name="themes g10 borderTile03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderInverse should be defined" name="themes g10 borderInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 borderInteractive should be defined" name="themes g10 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 borderDisabled should be defined" name="themes g10 borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textPrimary should be defined" name="themes g10 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textSecondary should be defined" name="themes g10 textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textPlaceholder should be defined" name="themes g10 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textHelper should be defined" name="themes g10 textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textError should be defined" name="themes g10 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textInverse should be defined" name="themes g10 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textOnColor should be defined" name="themes g10 textOnColor should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 textOnColorDisabled should be defined" name="themes g10 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 textDisabled should be defined" name="themes g10 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkPrimary should be defined" name="themes g10 linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkPrimaryHover should be defined" name="themes g10 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkSecondary should be defined" name="themes g10 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverseVisited should be defined" name="themes g10 linkInverseVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkVisited should be defined" name="themes g10 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverse should be defined" name="themes g10 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverseActive should be defined" name="themes g10 linkInverseActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 linkInverseHover should be defined" name="themes g10 linkInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconPrimary should be defined" name="themes g10 iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconSecondary should be defined" name="themes g10 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconInverse should be defined" name="themes g10 iconInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 iconOnColor should be defined" name="themes g10 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconOnColorDisabled should be defined" name="themes g10 iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconDisabled should be defined" name="themes g10 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 iconInteractive should be defined" name="themes g10 iconInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportError should be defined" name="themes g10 supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccess should be defined" name="themes g10 supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarning should be defined" name="themes g10 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfo should be defined" name="themes g10 supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportErrorInverse should be defined" name="themes g10 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportSuccessInverse should be defined" name="themes g10 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportWarningInverse should be defined" name="themes g10 supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportInfoInverse should be defined" name="themes g10 supportInfoInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 supportCautionMajor should be defined" name="themes g10 supportCautionMajor should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportCautionMinor should be defined" name="themes g10 supportCautionMinor should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 supportCautionUndefined should be defined" name="themes g10 supportCautionUndefined should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverBackground should be defined" name="themes g10 aiPopoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverShadowOuter01 should be defined" name="themes g10 aiPopoverShadowOuter01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverShadowOuter02 should be defined" name="themes g10 aiPopoverShadowOuter02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiInnerShadow should be defined" name="themes g10 aiInnerShadow should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 aiAuraStartSm should be defined" name="themes g10 aiAuraStartSm should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiAuraStart should be defined" name="themes g10 aiAuraStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiAuraEnd should be defined" name="themes g10 aiAuraEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiAuraHoverBackground should be defined" name="themes g10 aiAuraHoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiAuraHoverStart should be defined" name="themes g10 aiAuraHoverStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiAuraHoverEnd should be defined" name="themes g10 aiAuraHoverEnd should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 aiBorderStrong should be defined" name="themes g10 aiBorderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiBorderStart should be defined" name="themes g10 aiBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiBorderEnd should be defined" name="themes g10 aiBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiDropShadow should be defined" name="themes g10 aiDropShadow should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 aiSkeletonBackground should be defined" name="themes g10 aiSkeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiSkeletonElementBackground should be defined" name="themes g10 aiSkeletonElementBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiOverlay should be defined" name="themes g10 aiOverlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverCaretCenter should be defined" name="themes g10 aiPopoverCaretCenter should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverCaretBottom should be defined" name="themes g10 aiPopoverCaretBottom should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverCaretBottomBackground should be defined" name="themes g10 aiPopoverCaretBottomBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 aiPopoverCaretBottomBackgroundActions should be defined" name="themes g10 aiPopoverCaretBottomBackgroundActions should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatPromptBackground should be defined" name="themes g10 chatPromptBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatPromptBorderStart should be defined" name="themes g10 chatPromptBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatPromptBorderEnd should be defined" name="themes g10 chatPromptBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatBubbleUser should be defined" name="themes g10 chatBubbleUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatBubbleAgent should be defined" name="themes g10 chatBubbleAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatBubbleBorder should be defined" name="themes g10 chatBubbleBorder should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatAvatarBot should be defined" name="themes g10 chatAvatarBot should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatAvatarAgent should be defined" name="themes g10 chatAvatarAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatAvatarUser should be defined" name="themes g10 chatAvatarUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatShellBackground should be defined" name="themes g10 chatShellBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatHeaderBackground should be defined" name="themes g10 chatHeaderBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatButton should be defined" name="themes g10 chatButton should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatButtonHover should be defined" name="themes g10 chatButtonHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatButtonTextHover should be defined" name="themes g10 chatButtonTextHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatButtonActive should be defined" name="themes g10 chatButtonActive should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 chatButtonSelected should be defined" name="themes g10 chatButtonSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 chatButtonTextSelected should be defined" name="themes g10 chatButtonTextSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 highlight should be defined" name="themes g10 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 overlay should be defined" name="themes g10 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 toggleOff should be defined" name="themes g10 toggleOff should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 shadow should be defined" name="themes g10 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 focus should be defined" name="themes g10 focus should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 focusInset should be defined" name="themes g10 focusInset should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g10 focusInverse should be defined" name="themes g10 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonBackground should be defined" name="themes g10 skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g10 skeletonElement should be defined" name="themes g10 skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 background should be defined" name="themes g90 background should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundActive should be defined" name="themes g90 backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelected should be defined" name="themes g90 backgroundSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundSelectedHover should be defined" name="themes g90 backgroundSelectedHover should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 backgroundHover should be defined" name="themes g90 backgroundHover should be defined" time="0.003">
    </testcase>
    <testcase classname="themes g90 backgroundBrand should be defined" name="themes g90 backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverse should be defined" name="themes g90 backgroundInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 backgroundInverseHover should be defined" name="themes g90 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layer01 should be defined" name="themes g90 layer01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerActive01 should be defined" name="themes g90 layerActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerHover01 should be defined" name="themes g90 layerHover01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 layerSelected01 should be defined" name="themes g90 layerSelected01 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g90 layerSelectedHover01 should be defined" name="themes g90 layerSelectedHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layer02 should be defined" name="themes g90 layer02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerActive02 should be defined" name="themes g90 layerActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerHover02 should be defined" name="themes g90 layerHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelected02 should be defined" name="themes g90 layerSelected02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedHover02 should be defined" name="themes g90 layerSelectedHover02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 layer03 should be defined" name="themes g90 layer03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerActive03 should be defined" name="themes g90 layerActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerHover03 should be defined" name="themes g90 layerHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelected03 should be defined" name="themes g90 layerSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedHover03 should be defined" name="themes g90 layerSelectedHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedInverse should be defined" name="themes g90 layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerSelectedDisabled should be defined" name="themes g90 layerSelectedDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccent01 should be defined" name="themes g90 layerAccent01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentActive01 should be defined" name="themes g90 layerAccentActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentHover01 should be defined" name="themes g90 layerAccentHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccent02 should be defined" name="themes g90 layerAccent02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentActive02 should be defined" name="themes g90 layerAccentActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentHover02 should be defined" name="themes g90 layerAccentHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccent03 should be defined" name="themes g90 layerAccent03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentActive03 should be defined" name="themes g90 layerAccentActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 layerAccentHover03 should be defined" name="themes g90 layerAccentHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 field01 should be defined" name="themes g90 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fieldHover01 should be defined" name="themes g90 fieldHover01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 field02 should be defined" name="themes g90 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 fieldHover02 should be defined" name="themes g90 fieldHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 field03 should be defined" name="themes g90 field03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 fieldHover03 should be defined" name="themes g90 fieldHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 interactive should be defined" name="themes g90 interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtle00 should be defined" name="themes g90 borderSubtle00 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtle01 should be defined" name="themes g90 borderSubtle01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 borderSubtleSelected01 should be defined" name="themes g90 borderSubtleSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtle02 should be defined" name="themes g90 borderSubtle02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtleSelected02 should be defined" name="themes g90 borderSubtleSelected02 should be defined" time="0.003">
    </testcase>
    <testcase classname="themes g90 borderSubtle03 should be defined" name="themes g90 borderSubtle03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderSubtleSelected03 should be defined" name="themes g90 borderSubtleSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderStrong01 should be defined" name="themes g90 borderStrong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderStrong02 should be defined" name="themes g90 borderStrong02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderStrong03 should be defined" name="themes g90 borderStrong03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderTile01 should be defined" name="themes g90 borderTile01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderTile02 should be defined" name="themes g90 borderTile02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderTile03 should be defined" name="themes g90 borderTile03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderInverse should be defined" name="themes g90 borderInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderInteractive should be defined" name="themes g90 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 borderDisabled should be defined" name="themes g90 borderDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textPrimary should be defined" name="themes g90 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textSecondary should be defined" name="themes g90 textSecondary should be defined" time="0.005">
    </testcase>
    <testcase classname="themes g90 textPlaceholder should be defined" name="themes g90 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textHelper should be defined" name="themes g90 textHelper should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 textError should be defined" name="themes g90 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textInverse should be defined" name="themes g90 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColor should be defined" name="themes g90 textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textOnColorDisabled should be defined" name="themes g90 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 textDisabled should be defined" name="themes g90 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkPrimary should be defined" name="themes g90 linkPrimary should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 linkPrimaryHover should be defined" name="themes g90 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkSecondary should be defined" name="themes g90 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverseVisited should be defined" name="themes g90 linkInverseVisited should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 linkVisited should be defined" name="themes g90 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverse should be defined" name="themes g90 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverseActive should be defined" name="themes g90 linkInverseActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 linkInverseHover should be defined" name="themes g90 linkInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconPrimary should be defined" name="themes g90 iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconSecondary should be defined" name="themes g90 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconInverse should be defined" name="themes g90 iconInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColor should be defined" name="themes g90 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconOnColorDisabled should be defined" name="themes g90 iconOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconDisabled should be defined" name="themes g90 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 iconInteractive should be defined" name="themes g90 iconInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportError should be defined" name="themes g90 supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportSuccess should be defined" name="themes g90 supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportWarning should be defined" name="themes g90 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportInfo should be defined" name="themes g90 supportInfo should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportErrorInverse should be defined" name="themes g90 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportSuccessInverse should be defined" name="themes g90 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportWarningInverse should be defined" name="themes g90 supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportInfoInverse should be defined" name="themes g90 supportInfoInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 supportCautionMajor should be defined" name="themes g90 supportCautionMajor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportCautionMinor should be defined" name="themes g90 supportCautionMinor should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 supportCautionUndefined should be defined" name="themes g90 supportCautionUndefined should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverBackground should be defined" name="themes g90 aiPopoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverShadowOuter01 should be defined" name="themes g90 aiPopoverShadowOuter01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverShadowOuter02 should be defined" name="themes g90 aiPopoverShadowOuter02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiInnerShadow should be defined" name="themes g90 aiInnerShadow should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 aiAuraStartSm should be defined" name="themes g90 aiAuraStartSm should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiAuraStart should be defined" name="themes g90 aiAuraStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiAuraEnd should be defined" name="themes g90 aiAuraEnd should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 aiAuraHoverBackground should be defined" name="themes g90 aiAuraHoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiAuraHoverStart should be defined" name="themes g90 aiAuraHoverStart should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g90 aiAuraHoverEnd should be defined" name="themes g90 aiAuraHoverEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiBorderStrong should be defined" name="themes g90 aiBorderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiBorderStart should be defined" name="themes g90 aiBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiBorderEnd should be defined" name="themes g90 aiBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiDropShadow should be defined" name="themes g90 aiDropShadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiSkeletonBackground should be defined" name="themes g90 aiSkeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiSkeletonElementBackground should be defined" name="themes g90 aiSkeletonElementBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiOverlay should be defined" name="themes g90 aiOverlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverCaretCenter should be defined" name="themes g90 aiPopoverCaretCenter should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverCaretBottom should be defined" name="themes g90 aiPopoverCaretBottom should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverCaretBottomBackground should be defined" name="themes g90 aiPopoverCaretBottomBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 aiPopoverCaretBottomBackgroundActions should be defined" name="themes g90 aiPopoverCaretBottomBackgroundActions should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatPromptBackground should be defined" name="themes g90 chatPromptBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatPromptBorderStart should be defined" name="themes g90 chatPromptBorderStart should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 chatPromptBorderEnd should be defined" name="themes g90 chatPromptBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatBubbleUser should be defined" name="themes g90 chatBubbleUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatBubbleAgent should be defined" name="themes g90 chatBubbleAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatBubbleBorder should be defined" name="themes g90 chatBubbleBorder should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatAvatarBot should be defined" name="themes g90 chatAvatarBot should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatAvatarAgent should be defined" name="themes g90 chatAvatarAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatAvatarUser should be defined" name="themes g90 chatAvatarUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatShellBackground should be defined" name="themes g90 chatShellBackground should be defined" time="0.003">
    </testcase>
    <testcase classname="themes g90 chatHeaderBackground should be defined" name="themes g90 chatHeaderBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButton should be defined" name="themes g90 chatButton should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButtonHover should be defined" name="themes g90 chatButtonHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButtonTextHover should be defined" name="themes g90 chatButtonTextHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButtonActive should be defined" name="themes g90 chatButtonActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButtonSelected should be defined" name="themes g90 chatButtonSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 chatButtonTextSelected should be defined" name="themes g90 chatButtonTextSelected should be defined" time="0.003">
    </testcase>
    <testcase classname="themes g90 highlight should be defined" name="themes g90 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 overlay should be defined" name="themes g90 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 toggleOff should be defined" name="themes g90 toggleOff should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 shadow should be defined" name="themes g90 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 focus should be defined" name="themes g90 focus should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 focusInset should be defined" name="themes g90 focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 focusInverse should be defined" name="themes g90 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g90 skeletonBackground should be defined" name="themes g90 skeletonBackground should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g90 skeletonElement should be defined" name="themes g90 skeletonElement should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 background should be defined" name="themes g100 background should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundActive should be defined" name="themes g100 backgroundActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundSelected should be defined" name="themes g100 backgroundSelected should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 backgroundSelectedHover should be defined" name="themes g100 backgroundSelectedHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundHover should be defined" name="themes g100 backgroundHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundBrand should be defined" name="themes g100 backgroundBrand should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 backgroundInverse should be defined" name="themes g100 backgroundInverse should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 backgroundInverseHover should be defined" name="themes g100 backgroundInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layer01 should be defined" name="themes g100 layer01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerActive01 should be defined" name="themes g100 layerActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerHover01 should be defined" name="themes g100 layerHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelected01 should be defined" name="themes g100 layerSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedHover01 should be defined" name="themes g100 layerSelectedHover01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 layer02 should be defined" name="themes g100 layer02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerActive02 should be defined" name="themes g100 layerActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerHover02 should be defined" name="themes g100 layerHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelected02 should be defined" name="themes g100 layerSelected02 should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 layerSelectedHover02 should be defined" name="themes g100 layerSelectedHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layer03 should be defined" name="themes g100 layer03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerActive03 should be defined" name="themes g100 layerActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerHover03 should be defined" name="themes g100 layerHover03 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerSelected03 should be defined" name="themes g100 layerSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedHover03 should be defined" name="themes g100 layerSelectedHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedInverse should be defined" name="themes g100 layerSelectedInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerSelectedDisabled should be defined" name="themes g100 layerSelectedDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 layerAccent01 should be defined" name="themes g100 layerAccent01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentActive01 should be defined" name="themes g100 layerAccentActive01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentHover01 should be defined" name="themes g100 layerAccentHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccent02 should be defined" name="themes g100 layerAccent02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentActive02 should be defined" name="themes g100 layerAccentActive02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentHover02 should be defined" name="themes g100 layerAccentHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccent03 should be defined" name="themes g100 layerAccent03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentActive03 should be defined" name="themes g100 layerAccentActive03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 layerAccentHover03 should be defined" name="themes g100 layerAccentHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field01 should be defined" name="themes g100 field01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fieldHover01 should be defined" name="themes g100 fieldHover01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field02 should be defined" name="themes g100 field02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fieldHover02 should be defined" name="themes g100 fieldHover02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 field03 should be defined" name="themes g100 field03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 fieldHover03 should be defined" name="themes g100 fieldHover03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 interactive should be defined" name="themes g100 interactive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle00 should be defined" name="themes g100 borderSubtle00 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle01 should be defined" name="themes g100 borderSubtle01 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 borderSubtleSelected01 should be defined" name="themes g100 borderSubtleSelected01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle02 should be defined" name="themes g100 borderSubtle02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtleSelected02 should be defined" name="themes g100 borderSubtleSelected02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtle03 should be defined" name="themes g100 borderSubtle03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderSubtleSelected03 should be defined" name="themes g100 borderSubtleSelected03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderStrong01 should be defined" name="themes g100 borderStrong01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderStrong02 should be defined" name="themes g100 borderStrong02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 borderStrong03 should be defined" name="themes g100 borderStrong03 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderTile01 should be defined" name="themes g100 borderTile01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderTile02 should be defined" name="themes g100 borderTile02 should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 borderTile03 should be defined" name="themes g100 borderTile03 should be defined" time="0.004">
    </testcase>
    <testcase classname="themes g100 borderInverse should be defined" name="themes g100 borderInverse should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 borderInteractive should be defined" name="themes g100 borderInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 borderDisabled should be defined" name="themes g100 borderDisabled should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 textPrimary should be defined" name="themes g100 textPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textSecondary should be defined" name="themes g100 textSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textPlaceholder should be defined" name="themes g100 textPlaceholder should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textHelper should be defined" name="themes g100 textHelper should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textError should be defined" name="themes g100 textError should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textInverse should be defined" name="themes g100 textInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColor should be defined" name="themes g100 textOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textOnColorDisabled should be defined" name="themes g100 textOnColorDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 textDisabled should be defined" name="themes g100 textDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimary should be defined" name="themes g100 linkPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkPrimaryHover should be defined" name="themes g100 linkPrimaryHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkSecondary should be defined" name="themes g100 linkSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverseVisited should be defined" name="themes g100 linkInverseVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkVisited should be defined" name="themes g100 linkVisited should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverse should be defined" name="themes g100 linkInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverseActive should be defined" name="themes g100 linkInverseActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 linkInverseHover should be defined" name="themes g100 linkInverseHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconPrimary should be defined" name="themes g100 iconPrimary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconSecondary should be defined" name="themes g100 iconSecondary should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconInverse should be defined" name="themes g100 iconInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconOnColor should be defined" name="themes g100 iconOnColor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconOnColorDisabled should be defined" name="themes g100 iconOnColorDisabled should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 iconDisabled should be defined" name="themes g100 iconDisabled should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 iconInteractive should be defined" name="themes g100 iconInteractive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportError should be defined" name="themes g100 supportError should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportSuccess should be defined" name="themes g100 supportSuccess should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarning should be defined" name="themes g100 supportWarning should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfo should be defined" name="themes g100 supportInfo should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 supportErrorInverse should be defined" name="themes g100 supportErrorInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportSuccessInverse should be defined" name="themes g100 supportSuccessInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportWarningInverse should be defined" name="themes g100 supportWarningInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportInfoInverse should be defined" name="themes g100 supportInfoInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportCautionMajor should be defined" name="themes g100 supportCautionMajor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportCautionMinor should be defined" name="themes g100 supportCautionMinor should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 supportCautionUndefined should be defined" name="themes g100 supportCautionUndefined should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiPopoverBackground should be defined" name="themes g100 aiPopoverBackground should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 aiPopoverShadowOuter01 should be defined" name="themes g100 aiPopoverShadowOuter01 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiPopoverShadowOuter02 should be defined" name="themes g100 aiPopoverShadowOuter02 should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiInnerShadow should be defined" name="themes g100 aiInnerShadow should be defined" time="0.003">
    </testcase>
    <testcase classname="themes g100 aiAuraStartSm should be defined" name="themes g100 aiAuraStartSm should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiAuraStart should be defined" name="themes g100 aiAuraStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiAuraEnd should be defined" name="themes g100 aiAuraEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiAuraHoverBackground should be defined" name="themes g100 aiAuraHoverBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiAuraHoverStart should be defined" name="themes g100 aiAuraHoverStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiAuraHoverEnd should be defined" name="themes g100 aiAuraHoverEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiBorderStrong should be defined" name="themes g100 aiBorderStrong should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiBorderStart should be defined" name="themes g100 aiBorderStart should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 aiBorderEnd should be defined" name="themes g100 aiBorderEnd should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiDropShadow should be defined" name="themes g100 aiDropShadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiSkeletonBackground should be defined" name="themes g100 aiSkeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiSkeletonElementBackground should be defined" name="themes g100 aiSkeletonElementBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiOverlay should be defined" name="themes g100 aiOverlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiPopoverCaretCenter should be defined" name="themes g100 aiPopoverCaretCenter should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiPopoverCaretBottom should be defined" name="themes g100 aiPopoverCaretBottom should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 aiPopoverCaretBottomBackground should be defined" name="themes g100 aiPopoverCaretBottomBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 aiPopoverCaretBottomBackgroundActions should be defined" name="themes g100 aiPopoverCaretBottomBackgroundActions should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatPromptBackground should be defined" name="themes g100 chatPromptBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatPromptBorderStart should be defined" name="themes g100 chatPromptBorderStart should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatPromptBorderEnd should be defined" name="themes g100 chatPromptBorderEnd should be defined" time="0.002">
    </testcase>
    <testcase classname="themes g100 chatBubbleUser should be defined" name="themes g100 chatBubbleUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatBubbleAgent should be defined" name="themes g100 chatBubbleAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatBubbleBorder should be defined" name="themes g100 chatBubbleBorder should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatAvatarBot should be defined" name="themes g100 chatAvatarBot should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatAvatarAgent should be defined" name="themes g100 chatAvatarAgent should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatAvatarUser should be defined" name="themes g100 chatAvatarUser should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatShellBackground should be defined" name="themes g100 chatShellBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatHeaderBackground should be defined" name="themes g100 chatHeaderBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButton should be defined" name="themes g100 chatButton should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButtonHover should be defined" name="themes g100 chatButtonHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButtonTextHover should be defined" name="themes g100 chatButtonTextHover should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButtonActive should be defined" name="themes g100 chatButtonActive should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButtonSelected should be defined" name="themes g100 chatButtonSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 chatButtonTextSelected should be defined" name="themes g100 chatButtonTextSelected should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 highlight should be defined" name="themes g100 highlight should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 overlay should be defined" name="themes g100 overlay should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 toggleOff should be defined" name="themes g100 toggleOff should be defined" time="0.001">
    </testcase>
    <testcase classname="themes g100 shadow should be defined" name="themes g100 shadow should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focus should be defined" name="themes g100 focus should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focusInset should be defined" name="themes g100 focusInset should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 focusInverse should be defined" name="themes g100 focusInverse should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonBackground should be defined" name="themes g100 skeletonBackground should be defined" time="0">
    </testcase>
    <testcase classname="themes g100 skeletonElement should be defined" name="themes g100 skeletonElement should be defined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/type" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:54" time="0.837" tests="2">
    <testcase classname="@carbon/type should emit the CSS properties and values for a type token" name="@carbon/type should emit the CSS properties and values for a type token" time="0.296">
    </testcase>
    <testcase classname="@carbon/type should emit CSS Custom Properties" name="@carbon/type should emit CSS Custom Properties" time="0.237">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:54" time="1.369" tests="1">
    <testcase classname=" Public API should only change with a semver change" name=" Public API should only change with a semver change" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/pictograms-react" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:55" time="0.435" tests="1">
    <testcase classname="@carbon/pictograms-react should not update exports without a semver change" name="@carbon/pictograms-react should not update exports without a semver change" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Carbon Components React" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:53" time="1.741" tests="2">
    <testcase classname="Carbon Components React can be imported using the correct path" name="Carbon Components React can be imported using the correct path" time="0.001">
    </testcase>
    <testcase classname="Carbon Components React should export components" name="Carbon Components React should export components" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons-react" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:55" time="0.218" tests="1">
    <testcase classname="@carbon/icons-react should not update exports without a semver change" name="@carbon/icons-react should not update exports without a semver change" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/react/scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="88.355" tests="207">
    <testcase classname="@carbon/react/scss  should be importable" name="@carbon/react/scss  should be importable" time="8.125">
    </testcase>
    <testcase classname="@carbon/react/scss scss/breakpoint should be importable" name="@carbon/react/scss scss/breakpoint should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/colors should be importable" name="@carbon/react/scss scss/colors should be importable" time="0.023">
    </testcase>
    <testcase classname="@carbon/react/scss scss/config should be importable" name="@carbon/react/scss scss/config should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/feature-flags should be importable" name="@carbon/react/scss scss/feature-flags should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layer should be importable" name="@carbon/react/scss scss/layer should be importable" time="0.151">
    </testcase>
    <testcase classname="@carbon/react/scss scss/layout should be importable" name="@carbon/react/scss scss/layout should be importable" time="0.029">
    </testcase>
    <testcase classname="@carbon/react/scss scss/motion should be importable" name="@carbon/react/scss scss/motion should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/reset should be importable" name="@carbon/react/scss scss/reset should be importable" time="0.061">
    </testcase>
    <testcase classname="@carbon/react/scss scss/spacing should be importable" name="@carbon/react/scss scss/spacing should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/theme should be importable" name="@carbon/react/scss scss/theme should be importable" time="0.134">
    </testcase>
    <testcase classname="@carbon/react/scss scss/themes should be importable" name="@carbon/react/scss scss/themes should be importable" time="0.074">
    </testcase>
    <testcase classname="@carbon/react/scss scss/zone should be importable" name="@carbon/react/scss scss/zone should be importable" time="3.63">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/theme should be importable" name="@carbon/react/scss scss/compat/theme should be importable" time="0.137">
    </testcase>
    <testcase classname="@carbon/react/scss scss/compat/themes should be importable" name="@carbon/react/scss scss/compat/themes should be importable" time="0.086">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components should be importable" name="@carbon/react/scss scss/components should be importable" time="3.454">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion/accordion should be importable" name="@carbon/react/scss scss/components/accordion/accordion should be importable" time="0.172">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/accordion should be importable" name="@carbon/react/scss scss/components/accordion should be importable" time="0.266">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label/ai-label should be importable" time="0.642">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ai-label should be importable" name="@carbon/react/scss scss/components/ai-label should be importable" time="0.884">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio/aspect-ratio should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/aspect-ratio should be importable" name="@carbon/react/scss scss/components/aspect-ratio should be importable" time="0.014">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator/badge-indicator should be importable" time="0.132">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/badge-indicator should be importable" name="@carbon/react/scss scss/components/badge-indicator should be importable" time="0.144">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb/breadcrumb should be importable" time="0.484">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/breadcrumb should be importable" name="@carbon/react/scss scss/components/breadcrumb should be importable" time="0.613">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/button should be importable" name="@carbon/react/scss scss/components/button/button should be importable" time="0.422">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button should be importable" name="@carbon/react/scss scss/components/button should be importable" time="0.593">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/button/tokens should be importable" name="@carbon/react/scss scss/components/button/tokens should be importable" time="0.161">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button/chat-button should be importable" time="0.42">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/chat-button should be importable" name="@carbon/react/scss scss/components/chat-button should be importable" time="0.538">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox/checkbox should be importable" time="0.209">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/checkbox should be importable" name="@carbon/react/scss scss/components/checkbox should be importable" time="0.195">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet/code-snippet should be importable" time="0.575">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/code-snippet should be importable" name="@carbon/react/scss scss/components/code-snippet should be importable" time="0.444">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box/combo-box should be importable" time="0.724">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/combo-box should be importable" name="@carbon/react/scss scss/components/combo-box should be importable" time="1.014">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list/contained-list should be importable" time="0.462">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/contained-list should be importable" name="@carbon/react/scss scss/components/contained-list should be importable" time="0.485">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher/content-switcher should be importable" time="0.602">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/content-switcher should be importable" name="@carbon/react/scss scss/components/content-switcher should be importable" time="0.413">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button/copy-button should be importable" time="0.449">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/copy-button should be importable" name="@carbon/react/scss scss/components/copy-button should be importable" time="0.532">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/data-table should be importable" name="@carbon/react/scss scss/components/data-table/data-table should be importable" time="0.532">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table should be importable" name="@carbon/react/scss scss/components/data-table should be importable" time="0.478">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" name="@carbon/react/scss scss/components/data-table/action/data-table-action should be importable" time="0.742">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/action should be importable" name="@carbon/react/scss scss/components/data-table/action should be importable" time="0.811">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable/data-table-expandable should be importable" time="0.615">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/expandable should be importable" name="@carbon/react/scss scss/components/data-table/expandable should be importable" time="0.861">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton/data-table-skeleton should be importable" time="0.148">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/skeleton should be importable" name="@carbon/react/scss scss/components/data-table/skeleton should be importable" time="0.158">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" name="@carbon/react/scss scss/components/data-table/sort/data-table-sort should be importable" time="0.153">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/data-table/sort should be importable" name="@carbon/react/scss scss/components/data-table/sort should be importable" time="0.092">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker/date-picker should be importable" time="0.392">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/date-picker should be importable" name="@carbon/react/scss scss/components/date-picker should be importable" time="0.459">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown/dropdown should be importable" time="0.667">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/dropdown should be importable" name="@carbon/react/scss scss/components/dropdown should be importable" time="0.952">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader/file-uploader should be importable" time="0.749">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/file-uploader should be importable" name="@carbon/react/scss scss/components/file-uploader should be importable" time="0.647">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form/form should be importable" name="@carbon/react/scss scss/components/form/form should be importable" time="0.13">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/form should be importable" name="@carbon/react/scss scss/components/form should be importable" time="0.13">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box/fluid-combo-box should be importable" time="1.224">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-combo-box should be importable" name="@carbon/react/scss scss/components/fluid-combo-box should be importable" time="0.791">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker/fluid-date-picker should be importable" time="0.645">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-date-picker should be importable" name="@carbon/react/scss scss/components/fluid-date-picker should be importable" time="0.626">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown/fluid-dropdown should be importable" time="1.041">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-dropdown should be importable" name="@carbon/react/scss scss/components/fluid-dropdown should be importable" time="1.111">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box/fluid-list-box should be importable" time="0.127">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-list-box should be importable" name="@carbon/react/scss scss/components/fluid-list-box should be importable" time="0.231">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect/fluid-multiselect should be importable" time="1.389">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-multiselect should be importable" name="@carbon/react/scss scss/components/fluid-multiselect should be importable" time="1.24">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input/fluid-number-input should be importable" time="0.224">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-number-input should be importable" name="@carbon/react/scss scss/components/fluid-number-input should be importable" time="0.241">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search/fluid-search should be importable" time="0.429">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-search should be importable" name="@carbon/react/scss scss/components/fluid-search should be importable" time="0.321">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select/fluid-select should be importable" time="0.217">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-select should be importable" name="@carbon/react/scss scss/components/fluid-select should be importable" time="0.17">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area/fluid-text-area should be importable" time="0.502">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-area should be importable" name="@carbon/react/scss scss/components/fluid-text-area should be importable" time="0.446">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input/fluid-text-input should be importable" time="0.265">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-text-input should be importable" name="@carbon/react/scss scss/components/fluid-text-input should be importable" time="0.287">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker/fluid-time-picker should be importable" time="0.525">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/fluid-time-picker should be importable" name="@carbon/react/scss scss/components/fluid-time-picker should be importable" time="0.397">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator/icon-indicator should be importable" time="0.175">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/icon-indicator should be importable" name="@carbon/react/scss scss/components/icon-indicator should be importable" time="0.207">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading should be importable" time="0.165">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" name="@carbon/react/scss scss/components/inline-loading/inline-loading should be importable" time="0.232">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link should be importable" name="@carbon/react/scss scss/components/link should be importable" time="0.17">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/link/link should be importable" name="@carbon/react/scss scss/components/link/link should be importable" time="0.2">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list should be importable" name="@carbon/react/scss scss/components/list should be importable" time="0.371">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list/list should be importable" name="@carbon/react/scss scss/components/list/list should be importable" time="0.225">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box should be importable" name="@carbon/react/scss scss/components/list-box should be importable" time="1.435">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/list-box/list-box should be importable" name="@carbon/react/scss scss/components/list-box/list-box should be importable" time="0.968">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading should be importable" name="@carbon/react/scss scss/components/loading should be importable" time="0.118">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/loading/loading should be importable" name="@carbon/react/scss scss/components/loading/loading should be importable" time="0.118">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu should be importable" name="@carbon/react/scss scss/components/menu should be importable" time="0.267">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/menu/menu should be importable" name="@carbon/react/scss scss/components/menu/menu should be importable" time="0.265">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal should be importable" name="@carbon/react/scss scss/components/modal should be importable" time="0.511">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/modal/modal should be importable" name="@carbon/react/scss scss/components/modal/modal should be importable" time="0.697">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect should be importable" time="0.953">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/multiselect/multiselect should be importable" name="@carbon/react/scss scss/components/multiselect/multiselect should be importable" time="1.04">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/actionable-notification should be importable" name="@carbon/react/scss scss/components/notification/actionable-notification should be importable" time="0.601">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification should be importable" name="@carbon/react/scss scss/components/notification should be importable" time="0.997">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/inline-notification should be importable" name="@carbon/react/scss scss/components/notification/inline-notification should be importable" time="0.623">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/toast-notification should be importable" name="@carbon/react/scss scss/components/notification/toast-notification should be importable" time="0.499">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/notification/tokens should be importable" name="@carbon/react/scss scss/components/notification/tokens should be importable" time="0.571">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input should be importable" name="@carbon/react/scss scss/components/number-input should be importable" time="0.285">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/number-input/number-input should be importable" name="@carbon/react/scss scss/components/number-input/number-input should be importable" time="0.288">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu should be importable" time="0.912">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" name="@carbon/react/scss scss/components/overflow-menu/overflow-menu should be importable" time="0.64">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination should be importable" name="@carbon/react/scss scss/components/pagination should be importable" time="0.5">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/pagination should be importable" name="@carbon/react/scss scss/components/pagination/pagination should be importable" time="0.437">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" name="@carbon/react/scss scss/components/pagination/unstable_pagination should be importable" time="0.24">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav should be importable" time="0.509">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" name="@carbon/react/scss scss/components/pagination-nav/pagination-nav should be importable" time="0.562">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover should be importable" name="@carbon/react/scss scss/components/popover should be importable" time="0.199">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/popover/popover should be importable" name="@carbon/react/scss scss/components/popover/popover should be importable" time="0.289">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar should be importable" time="0.228">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" name="@carbon/react/scss scss/components/progress-bar/progress-bar should be importable" time="0.269">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator should be importable" time="0.712">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" name="@carbon/react/scss scss/components/progress-indicator/progress-indicator should be importable" time="0.987">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button should be importable" time="0.534">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/radio-button/radio-button should be importable" name="@carbon/react/scss scss/components/radio-button/radio-button should be importable" time="0.405">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search should be importable" name="@carbon/react/scss scss/components/search should be importable" time="0.464">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/search/search should be importable" name="@carbon/react/scss scss/components/search/search should be importable" time="0.333">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select should be importable" name="@carbon/react/scss scss/components/select should be importable" time="0.218">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/select/select should be importable" name="@carbon/react/scss scss/components/select/select should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles should be importable" time="0.158">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/skeleton-styles should be importable" time="0.126">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" name="@carbon/react/scss scss/components/skeleton-styles/ai-skeleton-styles should be importable" time="0.223">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider should be importable" name="@carbon/react/scss scss/components/slider should be importable" time="0.534">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slider/slider should be importable" name="@carbon/react/scss scss/components/slider/slider should be importable" time="0.382">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug should be importable" name="@carbon/react/scss scss/components/slug should be importable" time="0.622">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/slug/slug should be importable" name="@carbon/react/scss scss/components/slug/slug should be importable" time="0.539">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack should be importable" name="@carbon/react/scss scss/components/stack should be importable" time="0.014">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/stack/stack should be importable" name="@carbon/react/scss scss/components/stack/stack should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list should be importable" time="0.215">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/structured-list/structured-list should be importable" name="@carbon/react/scss scss/components/structured-list/structured-list should be importable" time="0.207">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs should be importable" name="@carbon/react/scss scss/components/tabs should be importable" time="0.743">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tabs/tabs should be importable" name="@carbon/react/scss scss/components/tabs/tabs should be importable" time="0.599">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag should be importable" name="@carbon/react/scss scss/components/tag should be importable" time="0.56">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tag should be importable" name="@carbon/react/scss scss/components/tag/tag should be importable" time="0.648">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tag/tokens should be importable" name="@carbon/react/scss scss/components/tag/tokens should be importable" time="0.659">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area should be importable" name="@carbon/react/scss scss/components/text-area should be importable" time="0.239">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-area/text-area should be importable" name="@carbon/react/scss scss/components/text-area/text-area should be importable" time="0.163">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input should be importable" name="@carbon/react/scss scss/components/text-input should be importable" time="0.257">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/text-input/text-input should be importable" name="@carbon/react/scss scss/components/text-input/text-input should be importable" time="0.321">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile should be importable" name="@carbon/react/scss scss/components/tile should be importable" time="0.357">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tile/tile should be importable" name="@carbon/react/scss scss/components/tile/tile should be importable" time="0.307">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker should be importable" time="0.407">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/time-picker/time-picker should be importable" name="@carbon/react/scss scss/components/time-picker/time-picker should be importable" time="0.461">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle should be importable" name="@carbon/react/scss scss/components/toggle should be importable" time="0.369">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggle/toggle should be importable" name="@carbon/react/scss scss/components/toggle/toggle should be importable" time="0.184">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip should be importable" time="0.452">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/toggletip/toggletip should be importable" name="@carbon/react/scss scss/components/toggletip/toggletip should be importable" time="0.634">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip should be importable" time="0.287">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/tooltip/tooltip should be importable" name="@carbon/react/scss scss/components/tooltip/tooltip should be importable" time="0.244">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview should be importable" name="@carbon/react/scss scss/components/treeview should be importable" time="0.214">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/treeview/treeview should be importable" name="@carbon/react/scss scss/components/treeview/treeview should be importable" time="0.271">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell should be importable" time="0.573">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" name="@carbon/react/scss scss/components/ui-shell/ui-shell should be importable" time="0.658">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content/content should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/content should be importable" name="@carbon/react/scss scss/components/ui-shell/content should be importable" time="0.097">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header/header should be importable" time="0.515">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header should be importable" name="@carbon/react/scss scss/components/ui-shell/header should be importable" time="0.74">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel/header-panel should be importable" time="0.331">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" name="@carbon/react/scss scss/components/ui-shell/header-panel should be importable" time="0.21">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav should be importable" time="0.312">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" name="@carbon/react/scss scss/components/ui-shell/side-nav/side-nav should be importable" time="0.258">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher should be importable" time="0.143">
    </testcase>
    <testcase classname="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" name="@carbon/react/scss scss/components/ui-shell/switcher/switcher should be importable" time="0.128">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts should be importable" name="@carbon/react/scss scss/fonts should be importable" time="0.125">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/mono should be importable" name="@carbon/react/scss scss/fonts/mono should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-arabic should be importable" name="@carbon/react/scss scss/fonts/sans-arabic should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-devanagari should be importable" name="@carbon/react/scss scss/fonts/sans-devanagari should be importable" time="0.009">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-hebrew should be importable" name="@carbon/react/scss scss/fonts/sans-hebrew should be importable" time="0.009">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" name="@carbon/react/scss scss/fonts/sans-thai-looped should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans-thai should be importable" name="@carbon/react/scss scss/fonts/sans-thai should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/sans should be importable" name="@carbon/react/scss scss/fonts/sans should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/serif should be importable" name="@carbon/react/scss scss/fonts/serif should be importable" time="0.02">
    </testcase>
    <testcase classname="@carbon/react/scss scss/fonts/src should be importable" name="@carbon/react/scss scss/fonts/src should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/css-grid should be importable" name="@carbon/react/scss scss/grid/css-grid should be importable" time="0.273">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/flexbox should be importable" name="@carbon/react/scss scss/grid/flexbox should be importable" time="0.167">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid/mixins should be importable" name="@carbon/react/scss scss/grid/mixins should be importable" time="0.031">
    </testcase>
    <testcase classname="@carbon/react/scss scss/grid should be importable" name="@carbon/react/scss scss/grid should be importable" time="0.132">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type should be importable" name="@carbon/react/scss scss/type should be importable" time="0.114">
    </testcase>
    <testcase classname="@carbon/react/scss scss/type/reset should be importable" name="@carbon/react/scss scss/type/reset should be importable" time="0.013">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/ai-gradient should be importable" name="@carbon/react/scss scss/utilities/ai-gradient should be importable" time="0.098">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/box-shadow should be importable" name="@carbon/react/scss scss/utilities/box-shadow should be importable" time="0.19">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/button-reset should be importable" name="@carbon/react/scss scss/utilities/button-reset should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-reset should be importable" name="@carbon/react/scss scss/utilities/component-reset should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/component-tokens should be importable" name="@carbon/react/scss scss/utilities/component-tokens should be importable" time="0.192">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/convert should be importable" name="@carbon/react/scss scss/utilities/convert should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/custom-property should be importable" name="@carbon/react/scss scss/utilities/custom-property should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/focus-outline should be importable" name="@carbon/react/scss scss/utilities/focus-outline should be importable" time="0.309">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" name="@carbon/react/scss scss/utilities/hide-at-breakpoint should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" name="@carbon/react/scss scss/utilities/high-contrast-mode should be importable" time="0.001">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities should be importable" name="@carbon/react/scss scss/utilities should be importable" time="0.258">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/keyframes should be importable" name="@carbon/react/scss scss/utilities/keyframes should be importable" time="0.006">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/layout should be importable" name="@carbon/react/scss scss/utilities/layout should be importable" time="0.025">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/placeholder-colors should be importable" name="@carbon/react/scss scss/utilities/placeholder-colors should be importable" time="0.207">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/rotate should be importable" name="@carbon/react/scss scss/utilities/rotate should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/skeleton should be importable" name="@carbon/react/scss scss/utilities/skeleton should be importable" time="0.148">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-overflow should be importable" name="@carbon/react/scss scss/utilities/text-overflow should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/text-truncate should be importable" name="@carbon/react/scss scss/utilities/text-truncate should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/visually-hidden should be importable" name="@carbon/react/scss scss/utilities/visually-hidden should be importable" time="0.012">
    </testcase>
    <testcase classname="@carbon/react/scss scss/utilities/z-index should be importable" name="@carbon/react/scss scss/utilities/z-index should be importable" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/styles" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="88.475" tests="210">
    <testcase classname="@carbon/styles index.scss should be importable" name="@carbon/styles index.scss should be importable" time="7.324">
    </testcase>
    <testcase classname="@carbon/styles scss/_breakpoint.scss should be importable" name="@carbon/styles scss/_breakpoint.scss should be importable" time="0.016">
    </testcase>
    <testcase classname="@carbon/styles scss/_colors.scss should be importable" name="@carbon/styles scss/_colors.scss should be importable" time="0.007">
    </testcase>
    <testcase classname="@carbon/styles scss/_config.scss should be importable" name="@carbon/styles scss/_config.scss should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/styles scss/_feature-flags.scss should be importable" name="@carbon/styles scss/_feature-flags.scss should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/styles scss/_layer.scss should be importable" name="@carbon/styles scss/_layer.scss should be importable" time="0.23">
    </testcase>
    <testcase classname="@carbon/styles scss/_layout.scss should be importable" name="@carbon/styles scss/_layout.scss should be importable" time="0.018">
    </testcase>
    <testcase classname="@carbon/styles scss/_motion.scss should be importable" name="@carbon/styles scss/_motion.scss should be importable" time="0.034">
    </testcase>
    <testcase classname="@carbon/styles scss/_reset.scss should be importable" name="@carbon/styles scss/_reset.scss should be importable" time="0.124">
    </testcase>
    <testcase classname="@carbon/styles scss/_spacing.scss should be importable" name="@carbon/styles scss/_spacing.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/_theme.scss should be importable" name="@carbon/styles scss/_theme.scss should be importable" time="0.175">
    </testcase>
    <testcase classname="@carbon/styles scss/_themes.scss should be importable" name="@carbon/styles scss/_themes.scss should be importable" time="0.132">
    </testcase>
    <testcase classname="@carbon/styles scss/_zone.scss should be importable" name="@carbon/styles scss/_zone.scss should be importable" time="3.392">
    </testcase>
    <testcase classname="@carbon/styles scss/compat/_theme.scss should be importable" name="@carbon/styles scss/compat/_theme.scss should be importable" time="0.135">
    </testcase>
    <testcase classname="@carbon/styles scss/compat/_themes.scss should be importable" name="@carbon/styles scss/compat/_themes.scss should be importable" time="0.096">
    </testcase>
    <testcase classname="@carbon/styles scss/components/_index.scss should be importable" name="@carbon/styles scss/components/_index.scss should be importable" time="2.868">
    </testcase>
    <testcase classname="@carbon/styles scss/components/accordion/_accordion.scss should be importable" name="@carbon/styles scss/components/accordion/_accordion.scss should be importable" time="0.161">
    </testcase>
    <testcase classname="@carbon/styles scss/components/accordion/_index.scss should be importable" name="@carbon/styles scss/components/accordion/_index.scss should be importable" time="0.229">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ai-label/_ai-label.scss should be importable" name="@carbon/styles scss/components/ai-label/_ai-label.scss should be importable" time="0.652">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ai-label/_index.scss should be importable" name="@carbon/styles scss/components/ai-label/_index.scss should be importable" time="0.716">
    </testcase>
    <testcase classname="@carbon/styles scss/components/aspect-ratio/_aspect-ratio.scss should be importable" name="@carbon/styles scss/components/aspect-ratio/_aspect-ratio.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/components/aspect-ratio/_index.scss should be importable" name="@carbon/styles scss/components/aspect-ratio/_index.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/components/badge-indicator/_badge-indicator.scss should be importable" name="@carbon/styles scss/components/badge-indicator/_badge-indicator.scss should be importable" time="0.128">
    </testcase>
    <testcase classname="@carbon/styles scss/components/badge-indicator/_index.scss should be importable" name="@carbon/styles scss/components/badge-indicator/_index.scss should be importable" time="0.102">
    </testcase>
    <testcase classname="@carbon/styles scss/components/breadcrumb/_breadcrumb.scss should be importable" name="@carbon/styles scss/components/breadcrumb/_breadcrumb.scss should be importable" time="0.56">
    </testcase>
    <testcase classname="@carbon/styles scss/components/breadcrumb/_index.scss should be importable" name="@carbon/styles scss/components/breadcrumb/_index.scss should be importable" time="0.774">
    </testcase>
    <testcase classname="@carbon/styles scss/components/button/_button.scss should be importable" name="@carbon/styles scss/components/button/_button.scss should be importable" time="0.546">
    </testcase>
    <testcase classname="@carbon/styles scss/components/button/_index.scss should be importable" name="@carbon/styles scss/components/button/_index.scss should be importable" time="0.437">
    </testcase>
    <testcase classname="@carbon/styles scss/components/button/_tokens.scss should be importable" name="@carbon/styles scss/components/button/_tokens.scss should be importable" time="0.237">
    </testcase>
    <testcase classname="@carbon/styles scss/components/chat-button/_chat-button.scss should be importable" name="@carbon/styles scss/components/chat-button/_chat-button.scss should be importable" time="0.469">
    </testcase>
    <testcase classname="@carbon/styles scss/components/chat-button/_index.scss should be importable" name="@carbon/styles scss/components/chat-button/_index.scss should be importable" time="0.357">
    </testcase>
    <testcase classname="@carbon/styles scss/components/checkbox/_checkbox.scss should be importable" name="@carbon/styles scss/components/checkbox/_checkbox.scss should be importable" time="0.179">
    </testcase>
    <testcase classname="@carbon/styles scss/components/checkbox/_index.scss should be importable" name="@carbon/styles scss/components/checkbox/_index.scss should be importable" time="0.24">
    </testcase>
    <testcase classname="@carbon/styles scss/components/code-snippet/_code-snippet.scss should be importable" name="@carbon/styles scss/components/code-snippet/_code-snippet.scss should be importable" time="0.445">
    </testcase>
    <testcase classname="@carbon/styles scss/components/code-snippet/_index.scss should be importable" name="@carbon/styles scss/components/code-snippet/_index.scss should be importable" time="0.39">
    </testcase>
    <testcase classname="@carbon/styles scss/components/combo-box/_combo-box.scss should be importable" name="@carbon/styles scss/components/combo-box/_combo-box.scss should be importable" time="0.743">
    </testcase>
    <testcase classname="@carbon/styles scss/components/combo-box/_index.scss should be importable" name="@carbon/styles scss/components/combo-box/_index.scss should be importable" time="0.677">
    </testcase>
    <testcase classname="@carbon/styles scss/components/contained-list/_contained-list.scss should be importable" name="@carbon/styles scss/components/contained-list/_contained-list.scss should be importable" time="0.487">
    </testcase>
    <testcase classname="@carbon/styles scss/components/contained-list/_index.scss should be importable" name="@carbon/styles scss/components/contained-list/_index.scss should be importable" time="0.464">
    </testcase>
    <testcase classname="@carbon/styles scss/components/content-switcher/_content-switcher.scss should be importable" name="@carbon/styles scss/components/content-switcher/_content-switcher.scss should be importable" time="0.712">
    </testcase>
    <testcase classname="@carbon/styles scss/components/content-switcher/_index.scss should be importable" name="@carbon/styles scss/components/content-switcher/_index.scss should be importable" time="0.57">
    </testcase>
    <testcase classname="@carbon/styles scss/components/copy-button/_copy-button.scss should be importable" name="@carbon/styles scss/components/copy-button/_copy-button.scss should be importable" time="0.458">
    </testcase>
    <testcase classname="@carbon/styles scss/components/copy-button/_index.scss should be importable" name="@carbon/styles scss/components/copy-button/_index.scss should be importable" time="0.636">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/_data-table.scss should be importable" name="@carbon/styles scss/components/data-table/_data-table.scss should be importable" time="0.417">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/_index.scss should be importable" name="@carbon/styles scss/components/data-table/_index.scss should be importable" time="0.326">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/action/_data-table-action.scss should be importable" name="@carbon/styles scss/components/data-table/action/_data-table-action.scss should be importable" time="0.591">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/action/_index.scss should be importable" name="@carbon/styles scss/components/data-table/action/_index.scss should be importable" time="0.742">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/expandable/_data-table-expandable.scss should be importable" name="@carbon/styles scss/components/data-table/expandable/_data-table-expandable.scss should be importable" time="0.65">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/expandable/_index.scss should be importable" name="@carbon/styles scss/components/data-table/expandable/_index.scss should be importable" time="0.832">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/skeleton/_data-table-skeleton.scss should be importable" name="@carbon/styles scss/components/data-table/skeleton/_data-table-skeleton.scss should be importable" time="0.164">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/skeleton/_index.scss should be importable" name="@carbon/styles scss/components/data-table/skeleton/_index.scss should be importable" time="0.202">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/sort/_data-table-sort.scss should be importable" name="@carbon/styles scss/components/data-table/sort/_data-table-sort.scss should be importable" time="0.076">
    </testcase>
    <testcase classname="@carbon/styles scss/components/data-table/sort/_index.scss should be importable" name="@carbon/styles scss/components/data-table/sort/_index.scss should be importable" time="0.107">
    </testcase>
    <testcase classname="@carbon/styles scss/components/date-picker/_date-picker.scss should be importable" name="@carbon/styles scss/components/date-picker/_date-picker.scss should be importable" time="0.376">
    </testcase>
    <testcase classname="@carbon/styles scss/components/date-picker/_index.scss should be importable" name="@carbon/styles scss/components/date-picker/_index.scss should be importable" time="0.311">
    </testcase>
    <testcase classname="@carbon/styles scss/components/dropdown/_dropdown.scss should be importable" name="@carbon/styles scss/components/dropdown/_dropdown.scss should be importable" time="0.932">
    </testcase>
    <testcase classname="@carbon/styles scss/components/dropdown/_index.scss should be importable" name="@carbon/styles scss/components/dropdown/_index.scss should be importable" time="0.933">
    </testcase>
    <testcase classname="@carbon/styles scss/components/file-uploader/_file-uploader.scss should be importable" name="@carbon/styles scss/components/file-uploader/_file-uploader.scss should be importable" time="0.749">
    </testcase>
    <testcase classname="@carbon/styles scss/components/file-uploader/_index.scss should be importable" name="@carbon/styles scss/components/file-uploader/_index.scss should be importable" time="0.49">
    </testcase>
    <testcase classname="@carbon/styles scss/components/form/_form.scss should be importable" name="@carbon/styles scss/components/form/_form.scss should be importable" time="0.157">
    </testcase>
    <testcase classname="@carbon/styles scss/components/form/_index.scss should be importable" name="@carbon/styles scss/components/form/_index.scss should be importable" time="0.136">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-combo-box/_fluid-combo-box.scss should be importable" name="@carbon/styles scss/components/fluid-combo-box/_fluid-combo-box.scss should be importable" time="1.434">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-combo-box/_index.scss should be importable" name="@carbon/styles scss/components/fluid-combo-box/_index.scss should be importable" time="0.991">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-date-picker/_fluid-date-picker.scss should be importable" name="@carbon/styles scss/components/fluid-date-picker/_fluid-date-picker.scss should be importable" time="0.513">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-date-picker/_index.scss should be importable" name="@carbon/styles scss/components/fluid-date-picker/_index.scss should be importable" time="0.421">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-dropdown/_fluid-dropdown.scss should be importable" name="@carbon/styles scss/components/fluid-dropdown/_fluid-dropdown.scss should be importable" time="0.854">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-dropdown/_index.scss should be importable" name="@carbon/styles scss/components/fluid-dropdown/_index.scss should be importable" time="1.139">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-list-box/_fluid-list-box.scss should be importable" name="@carbon/styles scss/components/fluid-list-box/_fluid-list-box.scss should be importable" time="0.208">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-list-box/_index.scss should be importable" name="@carbon/styles scss/components/fluid-list-box/_index.scss should be importable" time="0.172">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-multiselect/_fluid-multiselect.scss should be importable" name="@carbon/styles scss/components/fluid-multiselect/_fluid-multiselect.scss should be importable" time="0.978">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-multiselect/_index.scss should be importable" name="@carbon/styles scss/components/fluid-multiselect/_index.scss should be importable" time="1.192">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-number-input/_fluid-number-input.scss should be importable" name="@carbon/styles scss/components/fluid-number-input/_fluid-number-input.scss should be importable" time="0.392">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-number-input/_index.scss should be importable" name="@carbon/styles scss/components/fluid-number-input/_index.scss should be importable" time="0.479">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-search/_fluid-search.scss should be importable" name="@carbon/styles scss/components/fluid-search/_fluid-search.scss should be importable" time="0.406">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-search/_index.scss should be importable" name="@carbon/styles scss/components/fluid-search/_index.scss should be importable" time="0.344">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-select/_fluid-select.scss should be importable" name="@carbon/styles scss/components/fluid-select/_fluid-select.scss should be importable" time="0.278">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-select/_index.scss should be importable" name="@carbon/styles scss/components/fluid-select/_index.scss should be importable" time="0.255">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-text-area/_fluid-text-area.scss should be importable" name="@carbon/styles scss/components/fluid-text-area/_fluid-text-area.scss should be importable" time="0.236">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-text-area/_index.scss should be importable" name="@carbon/styles scss/components/fluid-text-area/_index.scss should be importable" time="0.458">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-text-input/_fluid-text-input.scss should be importable" name="@carbon/styles scss/components/fluid-text-input/_fluid-text-input.scss should be importable" time="0.203">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-text-input/_index.scss should be importable" name="@carbon/styles scss/components/fluid-text-input/_index.scss should be importable" time="0.315">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-time-picker/_fluid-time-picker.scss should be importable" name="@carbon/styles scss/components/fluid-time-picker/_fluid-time-picker.scss should be importable" time="0.371">
    </testcase>
    <testcase classname="@carbon/styles scss/components/fluid-time-picker/_index.scss should be importable" name="@carbon/styles scss/components/fluid-time-picker/_index.scss should be importable" time="0.346">
    </testcase>
    <testcase classname="@carbon/styles scss/components/icon-indicator/_icon-indicator.scss should be importable" name="@carbon/styles scss/components/icon-indicator/_icon-indicator.scss should be importable" time="0.169">
    </testcase>
    <testcase classname="@carbon/styles scss/components/icon-indicator/_index.scss should be importable" name="@carbon/styles scss/components/icon-indicator/_index.scss should be importable" time="0.55">
    </testcase>
    <testcase classname="@carbon/styles scss/components/inline-loading/_index.scss should be importable" name="@carbon/styles scss/components/inline-loading/_index.scss should be importable" time="0.196">
    </testcase>
    <testcase classname="@carbon/styles scss/components/inline-loading/_inline-loading.scss should be importable" name="@carbon/styles scss/components/inline-loading/_inline-loading.scss should be importable" time="0.271">
    </testcase>
    <testcase classname="@carbon/styles scss/components/link/_index.scss should be importable" name="@carbon/styles scss/components/link/_index.scss should be importable" time="0.145">
    </testcase>
    <testcase classname="@carbon/styles scss/components/link/_link.scss should be importable" name="@carbon/styles scss/components/link/_link.scss should be importable" time="0.1">
    </testcase>
    <testcase classname="@carbon/styles scss/components/list/_index.scss should be importable" name="@carbon/styles scss/components/list/_index.scss should be importable" time="0.165">
    </testcase>
    <testcase classname="@carbon/styles scss/components/list/_list.scss should be importable" name="@carbon/styles scss/components/list/_list.scss should be importable" time="0.159">
    </testcase>
    <testcase classname="@carbon/styles scss/components/list-box/_index.scss should be importable" name="@carbon/styles scss/components/list-box/_index.scss should be importable" time="0.953">
    </testcase>
    <testcase classname="@carbon/styles scss/components/list-box/_list-box.scss should be importable" name="@carbon/styles scss/components/list-box/_list-box.scss should be importable" time="0.722">
    </testcase>
    <testcase classname="@carbon/styles scss/components/loading/_index.scss should be importable" name="@carbon/styles scss/components/loading/_index.scss should be importable" time="0.188">
    </testcase>
    <testcase classname="@carbon/styles scss/components/loading/_loading.scss should be importable" name="@carbon/styles scss/components/loading/_loading.scss should be importable" time="0.126">
    </testcase>
    <testcase classname="@carbon/styles scss/components/menu/_index.scss should be importable" name="@carbon/styles scss/components/menu/_index.scss should be importable" time="0.571">
    </testcase>
    <testcase classname="@carbon/styles scss/components/menu/_menu.scss should be importable" name="@carbon/styles scss/components/menu/_menu.scss should be importable" time="0.623">
    </testcase>
    <testcase classname="@carbon/styles scss/components/modal/_index.scss should be importable" name="@carbon/styles scss/components/modal/_index.scss should be importable" time="0.787">
    </testcase>
    <testcase classname="@carbon/styles scss/components/modal/_modal.scss should be importable" name="@carbon/styles scss/components/modal/_modal.scss should be importable" time="0.588">
    </testcase>
    <testcase classname="@carbon/styles scss/components/multiselect/_index.scss should be importable" name="@carbon/styles scss/components/multiselect/_index.scss should be importable" time="0.871">
    </testcase>
    <testcase classname="@carbon/styles scss/components/multiselect/_multiselect.scss should be importable" name="@carbon/styles scss/components/multiselect/_multiselect.scss should be importable" time="0.875">
    </testcase>
    <testcase classname="@carbon/styles scss/components/notification/_actionable-notification.scss should be importable" name="@carbon/styles scss/components/notification/_actionable-notification.scss should be importable" time="0.759">
    </testcase>
    <testcase classname="@carbon/styles scss/components/notification/_index.scss should be importable" name="@carbon/styles scss/components/notification/_index.scss should be importable" time="0.597">
    </testcase>
    <testcase classname="@carbon/styles scss/components/notification/_inline-notification.scss should be importable" name="@carbon/styles scss/components/notification/_inline-notification.scss should be importable" time="0.377">
    </testcase>
    <testcase classname="@carbon/styles scss/components/notification/_toast-notification.scss should be importable" name="@carbon/styles scss/components/notification/_toast-notification.scss should be importable" time="0.373">
    </testcase>
    <testcase classname="@carbon/styles scss/components/notification/_tokens.scss should be importable" name="@carbon/styles scss/components/notification/_tokens.scss should be importable" time="0.357">
    </testcase>
    <testcase classname="@carbon/styles scss/components/number-input/_index.scss should be importable" name="@carbon/styles scss/components/number-input/_index.scss should be importable" time="0.227">
    </testcase>
    <testcase classname="@carbon/styles scss/components/number-input/_number-input.scss should be importable" name="@carbon/styles scss/components/number-input/_number-input.scss should be importable" time="0.173">
    </testcase>
    <testcase classname="@carbon/styles scss/components/overflow-menu/_index.scss should be importable" name="@carbon/styles scss/components/overflow-menu/_index.scss should be importable" time="0.623">
    </testcase>
    <testcase classname="@carbon/styles scss/components/overflow-menu/_overflow-menu.scss should be importable" name="@carbon/styles scss/components/overflow-menu/_overflow-menu.scss should be importable" time="0.662">
    </testcase>
    <testcase classname="@carbon/styles scss/components/pagination/_index.scss should be importable" name="@carbon/styles scss/components/pagination/_index.scss should be importable" time="0.917">
    </testcase>
    <testcase classname="@carbon/styles scss/components/pagination/_pagination.scss should be importable" name="@carbon/styles scss/components/pagination/_pagination.scss should be importable" time="0.832">
    </testcase>
    <testcase classname="@carbon/styles scss/components/pagination/_unstable_pagination.scss should be importable" name="@carbon/styles scss/components/pagination/_unstable_pagination.scss should be importable" time="0.313">
    </testcase>
    <testcase classname="@carbon/styles scss/components/pagination-nav/_index.scss should be importable" name="@carbon/styles scss/components/pagination-nav/_index.scss should be importable" time="0.848">
    </testcase>
    <testcase classname="@carbon/styles scss/components/pagination-nav/_pagination-nav.scss should be importable" name="@carbon/styles scss/components/pagination-nav/_pagination-nav.scss should be importable" time="0.669">
    </testcase>
    <testcase classname="@carbon/styles scss/components/popover/_index.scss should be importable" name="@carbon/styles scss/components/popover/_index.scss should be importable" time="0.318">
    </testcase>
    <testcase classname="@carbon/styles scss/components/popover/_popover.scss should be importable" name="@carbon/styles scss/components/popover/_popover.scss should be importable" time="0.115">
    </testcase>
    <testcase classname="@carbon/styles scss/components/progress-bar/_index.scss should be importable" name="@carbon/styles scss/components/progress-bar/_index.scss should be importable" time="0.102">
    </testcase>
    <testcase classname="@carbon/styles scss/components/progress-bar/_progress-bar.scss should be importable" name="@carbon/styles scss/components/progress-bar/_progress-bar.scss should be importable" time="0.227">
    </testcase>
    <testcase classname="@carbon/styles scss/components/progress-indicator/_index.scss should be importable" name="@carbon/styles scss/components/progress-indicator/_index.scss should be importable" time="0.457">
    </testcase>
    <testcase classname="@carbon/styles scss/components/progress-indicator/_progress-indicator.scss should be importable" name="@carbon/styles scss/components/progress-indicator/_progress-indicator.scss should be importable" time="0.433">
    </testcase>
    <testcase classname="@carbon/styles scss/components/radio-button/_index.scss should be importable" name="@carbon/styles scss/components/radio-button/_index.scss should be importable" time="0.271">
    </testcase>
    <testcase classname="@carbon/styles scss/components/radio-button/_radio-button.scss should be importable" name="@carbon/styles scss/components/radio-button/_radio-button.scss should be importable" time="0.432">
    </testcase>
    <testcase classname="@carbon/styles scss/components/search/_index.scss should be importable" name="@carbon/styles scss/components/search/_index.scss should be importable" time="0.237">
    </testcase>
    <testcase classname="@carbon/styles scss/components/search/_search.scss should be importable" name="@carbon/styles scss/components/search/_search.scss should be importable" time="0.262">
    </testcase>
    <testcase classname="@carbon/styles scss/components/select/_index.scss should be importable" name="@carbon/styles scss/components/select/_index.scss should be importable" time="0.286">
    </testcase>
    <testcase classname="@carbon/styles scss/components/select/_select.scss should be importable" name="@carbon/styles scss/components/select/_select.scss should be importable" time="0.244">
    </testcase>
    <testcase classname="@carbon/styles scss/components/skeleton-styles/_index.scss should be importable" name="@carbon/styles scss/components/skeleton-styles/_index.scss should be importable" time="0.365">
    </testcase>
    <testcase classname="@carbon/styles scss/components/skeleton-styles/_skeleton-styles.scss should be importable" name="@carbon/styles scss/components/skeleton-styles/_skeleton-styles.scss should be importable" time="0.243">
    </testcase>
    <testcase classname="@carbon/styles scss/components/skeleton-styles/_ai-skeleton-styles.scss should be importable" name="@carbon/styles scss/components/skeleton-styles/_ai-skeleton-styles.scss should be importable" time="0.123">
    </testcase>
    <testcase classname="@carbon/styles scss/components/slider/_index.scss should be importable" name="@carbon/styles scss/components/slider/_index.scss should be importable" time="0.583">
    </testcase>
    <testcase classname="@carbon/styles scss/components/slider/_slider.scss should be importable" name="@carbon/styles scss/components/slider/_slider.scss should be importable" time="0.452">
    </testcase>
    <testcase classname="@carbon/styles scss/components/slug/_index.scss should be importable" name="@carbon/styles scss/components/slug/_index.scss should be importable" time="0.714">
    </testcase>
    <testcase classname="@carbon/styles scss/components/slug/_slug.scss should be importable" name="@carbon/styles scss/components/slug/_slug.scss should be importable" time="0.78">
    </testcase>
    <testcase classname="@carbon/styles scss/components/stack/_index.scss should be importable" name="@carbon/styles scss/components/stack/_index.scss should be importable" time="0.013">
    </testcase>
    <testcase classname="@carbon/styles scss/components/stack/_stack.scss should be importable" name="@carbon/styles scss/components/stack/_stack.scss should be importable" time="0.011">
    </testcase>
    <testcase classname="@carbon/styles scss/components/structured-list/_index.scss should be importable" name="@carbon/styles scss/components/structured-list/_index.scss should be importable" time="0.168">
    </testcase>
    <testcase classname="@carbon/styles scss/components/structured-list/_structured-list.scss should be importable" name="@carbon/styles scss/components/structured-list/_structured-list.scss should be importable" time="0.171">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tabs/_index.scss should be importable" name="@carbon/styles scss/components/tabs/_index.scss should be importable" time="0.468">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tabs/_tabs.scss should be importable" name="@carbon/styles scss/components/tabs/_tabs.scss should be importable" time="0.487">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tag/_index.scss should be importable" name="@carbon/styles scss/components/tag/_index.scss should be importable" time="0.72">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tag/_tag.scss should be importable" name="@carbon/styles scss/components/tag/_tag.scss should be importable" time="0.526">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tag/_tokens.scss should be importable" name="@carbon/styles scss/components/tag/_tokens.scss should be importable" time="0.551">
    </testcase>
    <testcase classname="@carbon/styles scss/components/text-area/_index.scss should be importable" name="@carbon/styles scss/components/text-area/_index.scss should be importable" time="0.247">
    </testcase>
    <testcase classname="@carbon/styles scss/components/text-area/_text-area.scss should be importable" name="@carbon/styles scss/components/text-area/_text-area.scss should be importable" time="0.268">
    </testcase>
    <testcase classname="@carbon/styles scss/components/text-input/_index.scss should be importable" name="@carbon/styles scss/components/text-input/_index.scss should be importable" time="0.251">
    </testcase>
    <testcase classname="@carbon/styles scss/components/text-input/_text-input.scss should be importable" name="@carbon/styles scss/components/text-input/_text-input.scss should be importable" time="0.404">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tile/_index.scss should be importable" name="@carbon/styles scss/components/tile/_index.scss should be importable" time="0.644">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tile/_tile.scss should be importable" name="@carbon/styles scss/components/tile/_tile.scss should be importable" time="0.305">
    </testcase>
    <testcase classname="@carbon/styles scss/components/time-picker/_index.scss should be importable" name="@carbon/styles scss/components/time-picker/_index.scss should be importable" time="0.36">
    </testcase>
    <testcase classname="@carbon/styles scss/components/time-picker/_time-picker.scss should be importable" name="@carbon/styles scss/components/time-picker/_time-picker.scss should be importable" time="0.293">
    </testcase>
    <testcase classname="@carbon/styles scss/components/toggle/_index.scss should be importable" name="@carbon/styles scss/components/toggle/_index.scss should be importable" time="0.404">
    </testcase>
    <testcase classname="@carbon/styles scss/components/toggle/_toggle.scss should be importable" name="@carbon/styles scss/components/toggle/_toggle.scss should be importable" time="0.34">
    </testcase>
    <testcase classname="@carbon/styles scss/components/toggletip/_index.scss should be importable" name="@carbon/styles scss/components/toggletip/_index.scss should be importable" time="0.688">
    </testcase>
    <testcase classname="@carbon/styles scss/components/toggletip/_toggletip.scss should be importable" name="@carbon/styles scss/components/toggletip/_toggletip.scss should be importable" time="0.455">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tooltip/_index.scss should be importable" name="@carbon/styles scss/components/tooltip/_index.scss should be importable" time="0.278">
    </testcase>
    <testcase classname="@carbon/styles scss/components/tooltip/_tooltip.scss should be importable" name="@carbon/styles scss/components/tooltip/_tooltip.scss should be importable" time="0.291">
    </testcase>
    <testcase classname="@carbon/styles scss/components/treeview/_index.scss should be importable" name="@carbon/styles scss/components/treeview/_index.scss should be importable" time="0.151">
    </testcase>
    <testcase classname="@carbon/styles scss/components/treeview/_treeview.scss should be importable" name="@carbon/styles scss/components/treeview/_treeview.scss should be importable" time="0.269">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/_index.scss should be importable" time="0.959">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/_ui-shell.scss should be importable" name="@carbon/styles scss/components/ui-shell/_ui-shell.scss should be importable" time="0.424">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/content/_content.scss should be importable" name="@carbon/styles scss/components/ui-shell/content/_content.scss should be importable" time="0.167">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/content/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/content/_index.scss should be importable" time="0.097">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/header/_header.scss should be importable" name="@carbon/styles scss/components/ui-shell/header/_header.scss should be importable" time="0.651">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/header/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/header/_index.scss should be importable" time="0.49">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/header-panel/_header-panel.scss should be importable" name="@carbon/styles scss/components/ui-shell/header-panel/_header-panel.scss should be importable" time="0.15">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/header-panel/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/header-panel/_index.scss should be importable" time="0.141">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/side-nav/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/side-nav/_index.scss should be importable" time="0.169">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/side-nav/_side-nav.scss should be importable" name="@carbon/styles scss/components/ui-shell/side-nav/_side-nav.scss should be importable" time="0.254">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/switcher/_index.scss should be importable" name="@carbon/styles scss/components/ui-shell/switcher/_index.scss should be importable" time="0.117">
    </testcase>
    <testcase classname="@carbon/styles scss/components/ui-shell/switcher/_switcher.scss should be importable" name="@carbon/styles scss/components/ui-shell/switcher/_switcher.scss should be importable" time="0.128">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_index.scss should be importable" name="@carbon/styles scss/fonts/_index.scss should be importable" time="0.057">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_mono.scss should be importable" name="@carbon/styles scss/fonts/_mono.scss should be importable" time="0.013">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans-arabic.scss should be importable" name="@carbon/styles scss/fonts/_sans-arabic.scss should be importable" time="0.017">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans-devanagari.scss should be importable" name="@carbon/styles scss/fonts/_sans-devanagari.scss should be importable" time="0.007">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans-hebrew.scss should be importable" name="@carbon/styles scss/fonts/_sans-hebrew.scss should be importable" time="0.03">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans-thai-looped.scss should be importable" name="@carbon/styles scss/fonts/_sans-thai-looped.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans-thai.scss should be importable" name="@carbon/styles scss/fonts/_sans-thai.scss should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_sans.scss should be importable" name="@carbon/styles scss/fonts/_sans.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_serif.scss should be importable" name="@carbon/styles scss/fonts/_serif.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/fonts/_src.scss should be importable" name="@carbon/styles scss/fonts/_src.scss should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/styles scss/grid/_css-grid.scss should be importable" name="@carbon/styles scss/grid/_css-grid.scss should be importable" time="0.089">
    </testcase>
    <testcase classname="@carbon/styles scss/grid/_flexbox.scss should be importable" name="@carbon/styles scss/grid/_flexbox.scss should be importable" time="0.149">
    </testcase>
    <testcase classname="@carbon/styles scss/grid/_mixins.scss should be importable" name="@carbon/styles scss/grid/_mixins.scss should be importable" time="0.01">
    </testcase>
    <testcase classname="@carbon/styles scss/grid/_index.scss should be importable" name="@carbon/styles scss/grid/_index.scss should be importable" time="0.054">
    </testcase>
    <testcase classname="@carbon/styles scss/type/_index.scss should be importable" name="@carbon/styles scss/type/_index.scss should be importable" time="0.134">
    </testcase>
    <testcase classname="@carbon/styles scss/type/_reset.scss should be importable" name="@carbon/styles scss/type/_reset.scss should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_ai-gradient.scss should be importable" name="@carbon/styles scss/utilities/_ai-gradient.scss should be importable" time="0.163">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_box-shadow.scss should be importable" name="@carbon/styles scss/utilities/_box-shadow.scss should be importable" time="0.143">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_button-reset.scss should be importable" name="@carbon/styles scss/utilities/_button-reset.scss should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_component-reset.scss should be importable" name="@carbon/styles scss/utilities/_component-reset.scss should be importable" time="0.003">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_component-tokens.scss should be importable" name="@carbon/styles scss/utilities/_component-tokens.scss should be importable" time="0.103">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_convert.scss should be importable" name="@carbon/styles scss/utilities/_convert.scss should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_custom-property.scss should be importable" name="@carbon/styles scss/utilities/_custom-property.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_focus-outline.scss should be importable" name="@carbon/styles scss/utilities/_focus-outline.scss should be importable" time="0.146">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_hide-at-breakpoint.scss should be importable" name="@carbon/styles scss/utilities/_hide-at-breakpoint.scss should be importable" time="0.023">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_high-contrast-mode.scss should be importable" name="@carbon/styles scss/utilities/_high-contrast-mode.scss should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_index.scss should be importable" name="@carbon/styles scss/utilities/_index.scss should be importable" time="0.137">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_keyframes.scss should be importable" name="@carbon/styles scss/utilities/_keyframes.scss should be importable" time="0.004">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_layout.scss should be importable" name="@carbon/styles scss/utilities/_layout.scss should be importable" time="0.014">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_placeholder-colors.scss should be importable" name="@carbon/styles scss/utilities/_placeholder-colors.scss should be importable" time="0.152">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_rotate.scss should be importable" name="@carbon/styles scss/utilities/_rotate.scss should be importable" time="0">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_skeleton.scss should be importable" name="@carbon/styles scss/utilities/_skeleton.scss should be importable" time="0.149">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_text-overflow.scss should be importable" name="@carbon/styles scss/utilities/_text-overflow.scss should be importable" time="0">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_text-truncate.scss should be importable" name="@carbon/styles scss/utilities/_text-truncate.scss should be importable" time="0.001">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_visually-hidden.scss should be importable" name="@carbon/styles scss/utilities/_visually-hidden.scss should be importable" time="0.005">
    </testcase>
    <testcase classname="@carbon/styles scss/utilities/_z-index.scss should be importable" name="@carbon/styles scss/utilities/_z-index.scss should be importable" time="0.002">
    </testcase>
    <testcase classname="@carbon/styles should have stable public scss entrypoints" name="@carbon/styles should have stable public scss entrypoints" time="0.005">
    </testcase>
    <testcase classname="@carbon/styles scss/config config overrides" name="@carbon/styles scss/config config overrides" time="0.007">
    </testcase>
    <testcase classname="@carbon/styles import order should support bringing in stylesheets independently" name="@carbon/styles import order should support bringing in stylesheets independently" time="4.733">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/themes/scss" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:54" time="1.886" tests="7">
    <testcase classname="@carbon/themes/scss index.scss" name="@carbon/themes/scss index.scss" time="0.513">
    </testcase>
    <testcase classname="@carbon/themes/scss scss/_themes.scss" name="@carbon/themes/scss scss/_themes.scss" time="0.228">
    </testcase>
    <testcase classname="@carbon/themes/scss configuration $theme" name="@carbon/themes/scss configuration $theme" time="0.139">
    </testcase>
    <testcase classname="@carbon/themes/scss configuration custom $theme" name="@carbon/themes/scss configuration custom $theme" time="0.153">
    </testcase>
    <testcase classname="@carbon/themes/scss configuration $fallback" name="@carbon/themes/scss configuration $fallback" time="0.108">
    </testcase>
    <testcase classname="@carbon/themes/scss configuration $use-fallback-value" name="@carbon/themes/scss configuration $use-fallback-value" time="0.07">
    </testcase>
    <testcase classname="@carbon/themes/scss configuration $property-prefix" name="@carbon/themes/scss configuration $property-prefix" time="0.104">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/pictograms" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:55" time="2.321" tests="1">
    <testcase classname="@carbon/pictograms should not update exports without a semver change" name="@carbon/pictograms should not update exports without a semver change" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ComboBox" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:51" time="6.792" tests="72">
    <testcase classname="ComboBox should display the menu of items when a user clicks on the input" name="ComboBox should display the menu of items when a user clicks on the input" time="0.085">
    </testcase>
    <testcase classname="ComboBox should call `onChange` each time an item is selected" name="ComboBox should call `onChange` each time an item is selected" time="0.502">
    </testcase>
    <testcase classname="ComboBox should call `onChange` when selection is cleared" name="ComboBox should call `onChange` when selection is cleared" time="0.121">
    </testcase>
    <testcase classname="ComboBox should call `onChange` with the proper item when `shouldFilterItem` is provided" name="ComboBox should call `onChange` with the proper item when `shouldFilterItem` is provided" time="0.101">
    </testcase>
    <testcase classname="ComboBox should display titleText" name="ComboBox should display titleText" time="0.005">
    </testcase>
    <testcase classname="ComboBox should confirm custom aria-label is on the input" name="ComboBox should confirm custom aria-label is on the input" time="0.084">
    </testcase>
    <testcase classname="ComboBox should select the correct item from the filtered list after text input on click" name="ComboBox should select the correct item from the filtered list after text input on click" time="0.196">
    </testcase>
    <testcase classname="ComboBox should select the correct item from the filtered list after text input on [Enter]" name="ComboBox should select the correct item from the filtered list after text input on [Enter]" time="0.082">
    </testcase>
    <testcase classname="ComboBox onInputChange should not call onChange or onInputChange on initial render" name="ComboBox onInputChange should not call onChange or onInputChange on initial render" time="0.003">
    </testcase>
    <testcase classname="ComboBox onInputChange capture filter text event onInputChange" name="ComboBox onInputChange capture filter text event onInputChange" time="0.082">
    </testcase>
    <testcase classname="ComboBox onInputChange should call onInputChange when option is selected from dropdown" name="ComboBox onInputChange should call onInputChange when option is selected from dropdown" time="0.096">
    </testcase>
    <testcase classname="ComboBox onInputChange should call onInputChange when option is cleared with button" name="ComboBox onInputChange should call onInputChange when option is cleared with button" time="0.033">
    </testcase>
    <testcase classname="ComboBox onInputChange should not call onInputChange when combobox is interacted with but input value does not change" name="ComboBox onInputChange should not call onInputChange when combobox is interacted with but input value does not change" time="0.089">
    </testcase>
    <testcase classname="ComboBox onInputChange should call onInputChange when custom value is entered into combobox" name="ComboBox onInputChange should call onInputChange when custom value is entered into combobox" time="0.158">
    </testcase>
    <testcase classname="ComboBox should render custom item components" name="ComboBox should render custom item components" time="0.032">
    </testcase>
    <testcase classname="ComboBox should let the user select an option by clicking on the option node" name="ComboBox should let the user select an option by clicking on the option node" time="0.373">
    </testcase>
    <testcase classname="ComboBox should not let the user select an option by clicking on the disabled option node" name="ComboBox should not let the user select an option by clicking on the disabled option node" time="0.153">
    </testcase>
    <testcase classname="ComboBox should not select the disabled option if user type in input and press enter" name="ComboBox should not select the disabled option if user type in input and press enter" time="0.103">
    </testcase>
    <testcase classname="ComboBox should retain value if custom value is entered and `allowCustomValue` is set" name="ComboBox should retain value if custom value is entered and `allowCustomValue` is set" time="0.13">
    </testcase>
    <testcase classname="ComboBox should handle InputBlur with allowCustomValue" name="ComboBox should handle InputBlur with allowCustomValue" time="0.164">
    </testcase>
    <testcase classname="ComboBox should apply onChange value if custom value is entered and `allowCustomValue` is set" name="ComboBox should apply onChange value if custom value is entered and `allowCustomValue` is set" time="0.083">
    </testcase>
    <testcase classname="ComboBox should respect slug prop" name="ComboBox should respect slug prop" time="0.02">
    </testcase>
    <testcase classname="ComboBox should respect decorator prop" name="ComboBox should respect decorator prop" time="0.021">
    </testcase>
    <testcase classname="ComboBox should yield highlighted item as `selectedItem` when pressing Enter with an unmodified input value" name="ComboBox should yield highlighted item as `selectedItem` when pressing Enter with an unmodified input value" time="0.17">
    </testcase>
    <testcase classname="ComboBox should yield highlighted item as `selectedItem` when pressing Enter with a modified input value" name="ComboBox should yield highlighted item as `selectedItem` when pressing Enter with a modified input value" time="0.158">
    </testcase>
    <testcase classname="ComboBox should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" name="ComboBox should display initially selected item found in `initialSelectedItem` using an object type for the `initialSelectedItem` prop" time="0.004">
    </testcase>
    <testcase classname="ComboBox should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" name="ComboBox should display initially selected item found in `initialSelectedItem` using a string type for the `initialSelectedItem` prop" time="0.005">
    </testcase>
    <testcase classname="ComboBox should display initially selected item found in `initialSelectedItem` should not revert to `initialSelectedItem` after clearing selection in uncontrolled mode" name="ComboBox should display initially selected item found in `initialSelectedItem` should not revert to `initialSelectedItem` after clearing selection in uncontrolled mode" time="0.168">
    </testcase>
    <testcase classname="ComboBox should display initially selected item found in `initialSelectedItem` should ignore updates to `initialSelectedItem` after initial render in uncontrolled mode" name="ComboBox should display initially selected item found in `initialSelectedItem` should ignore updates to `initialSelectedItem` after initial render in uncontrolled mode" time="0.022">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should display selected item using an object type for the `selectedItem` prop" name="ComboBox provided `selectedItem` should display selected item using an object type for the `selectedItem` prop" time="0.028">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should not call onChange or onInputChange on initial render" name="ComboBox provided `selectedItem` should not call onChange or onInputChange on initial render" time="0.008">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should call onInputChange when input changes" name="ComboBox provided `selectedItem` should call onInputChange when input changes" time="0.053">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should call onInputChange when external state managing selectedItem is updated" name="ComboBox provided `selectedItem` should call onInputChange when external state managing selectedItem is updated" time="0.031">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should not call onChange or onInputChange when external state managing selectedItem is updated to same value" name="ComboBox provided `selectedItem` should not call onChange or onInputChange when external state managing selectedItem is updated to same value" time="0.035">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should display selected item using a string type for the `selectedItem` prop" name="ComboBox provided `selectedItem` should display selected item using a string type for the `selectedItem` prop" time="0.01">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated from the combobox" name="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated from the combobox" time="0.071">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should not call `onChange` when current selection is selected again" name="ComboBox provided `selectedItem` should not call `onChange` when current selection is selected again" time="0.068">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated from the combobox and the external state managing selectedItem is updated" name="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated from the combobox and the external state managing selectedItem is updated" time="0.116">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` once when selection is cleared from the combobox and the external state managing selectedItem is updated" name="ComboBox provided `selectedItem` should update and call `onChange` once when selection is cleared from the combobox and the external state managing selectedItem is updated" time="0.173">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` once when selection is cleared from the combobox after an external update is made, and the external state managing selectedItem is updated" name="ComboBox provided `selectedItem` should update and call `onChange` once when selection is cleared from the combobox after an external update is made, and the external state managing selectedItem is updated" time="0.131">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` when a combination of external and combobox selections are made" name="ComboBox provided `selectedItem` should update and call `onChange` when a combination of external and combobox selections are made" time="0.156">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated externally" name="ComboBox provided `selectedItem` should update and call `onChange` once when selection is updated externally" time="0.015">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should clear selected item and call `onChange` when selection is cleared externally" name="ComboBox provided `selectedItem` should clear selected item and call `onChange` when selection is cleared externally" time="0.092">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should clear selected item when `selectedItem` is updated to `null` externally" name="ComboBox provided `selectedItem` should clear selected item when `selectedItem` is updated to `null` externally" time="0.016">
    </testcase>
    <testcase classname="ComboBox provided `selectedItem` should call onChange when downshiftProps onStateChange is provided" name="ComboBox provided `selectedItem` should call onChange when downshiftProps onStateChange is provided" time="0.07">
    </testcase>
    <testcase classname="ComboBox when disabled should not let the user edit the input node" name="ComboBox when disabled should not let the user edit the input node" time="0.093">
    </testcase>
    <testcase classname="ComboBox when disabled should not let the user expand the menu" name="ComboBox when disabled should not let the user expand the menu" time="0.032">
    </testcase>
    <testcase classname="ComboBox when readonly should not let the user edit the input node" name="ComboBox when readonly should not let the user edit the input node" time="0.043">
    </testcase>
    <testcase classname="ComboBox when readonly should not let the user expand the menu" name="ComboBox when readonly should not let the user expand the menu" time="0.017">
    </testcase>
    <testcase classname="ComboBox downshift quirks should set `inputValue` to an empty string if a false-y value is given" name="ComboBox downshift quirks should set `inputValue` to an empty string if a false-y value is given" time="0.006">
    </testcase>
    <testcase classname="ComboBox downshift quirks should only render one listbox at a time when multiple comboboxes are present" name="ComboBox downshift quirks should only render one listbox at a time when multiple comboboxes are present" time="0.124">
    </testcase>
    <testcase classname="ComboBox downshift quirks should open menu without moving focus on pressing Alt+ DownArrow" name="ComboBox downshift quirks should open menu without moving focus on pressing Alt+ DownArrow" time="0.015">
    </testcase>
    <testcase classname="ComboBox downshift quirks should close menu and return focus to combobox on pressing Alt+ UpArrow" name="ComboBox downshift quirks should close menu and return focus to combobox on pressing Alt+ UpArrow" time="0.024">
    </testcase>
    <testcase classname="ComboBox Highlights should highlight the matched element" name="ComboBox Highlights should highlight the matched element" time="0.037">
    </testcase>
    <testcase classname="ComboBox Highlights should highlight the selected element" name="ComboBox Highlights should highlight the selected element" time="0.097">
    </testcase>
    <testcase classname="ComboBox Highlights should highlight the selected element if user enter some other value click outside of combobox" name="ComboBox Highlights should highlight the selected element if user enter some other value click outside of combobox" time="0.296">
    </testcase>
    <testcase classname="ComboBox Highlights should clear input when closing with chevron if input does not match any item and allowCustomValue is false" name="ComboBox Highlights should clear input when closing with chevron if input does not match any item and allowCustomValue is false" time="0.063">
    </testcase>
    <testcase classname="ComboBox Highlights should pass defined selectedItem to onChange when item is selected" name="ComboBox Highlights should pass defined selectedItem to onChange when item is selected" time="0.044">
    </testcase>
    <testcase classname="ComboBox Highlights should never pass undefined as selectedItem to onChange" name="ComboBox Highlights should never pass undefined as selectedItem to onChange" time="0.228">
    </testcase>
    <testcase classname="ComboBox Highlights should clear selection if input does not match any item and there is already a selected item" name="ComboBox Highlights should clear selection if input does not match any item and there is already a selected item" time="0.091">
    </testcase>
    <testcase classname="ComboBox Highlights should not clear selection if no item was previously selected" name="ComboBox Highlights should not clear selection if no item was previously selected" time="0.044">
    </testcase>
    <testcase classname="ComboBox Highlights should keep selection when allowCustomValue is true even if input does not match" name="ComboBox Highlights should keep selection when allowCustomValue is true even if input does not match" time="0.096">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should respect autocomplete prop" name="ComboBox ComboBox autocomplete should respect autocomplete prop" time="0.006">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should use autocompleteCustomFilter when autocomplete prop is true" name="ComboBox ComboBox autocomplete should use autocompleteCustomFilter when autocomplete prop is true" time="0.081">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should use default filter when autocomplete prop is false" name="ComboBox ComboBox autocomplete should use default filter when autocomplete prop is false" time="0.13">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should not autocomplete when no match is found" name="ComboBox ComboBox autocomplete should not autocomplete when no match is found" time="0.042">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should suggest best matching typeahead suggestion and complete it in Tab key press" name="ComboBox ComboBox autocomplete should suggest best matching typeahead suggestion and complete it in Tab key press" time="0.042">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should not autocomplete on Tab after backspace" name="ComboBox ComboBox autocomplete should not autocomplete on Tab after backspace" time="0.034">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should autocomplete with the first matching suggestion when multiple matches exist" name="ComboBox ComboBox autocomplete should autocomplete with the first matching suggestion when multiple matches exist" time="0.054">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should match case exactly with option list when Tab is pressed" name="ComboBox ComboBox autocomplete should match case exactly with option list when Tab is pressed" time="0.06">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should remove input and enter new conditions" name="ComboBox ComboBox autocomplete should remove input and enter new conditions" time="0.027">
    </testcase>
    <testcase classname="ComboBox ComboBox autocomplete should open the menu and select null when Enter is pressed with no input and no highlighted item" name="ComboBox ComboBox autocomplete should open the menu and select null when Enter is pressed with no input and no highlighted item" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:56" time="8.345" tests="1">
    <testcase classname="@carbon/icons should not update exports without a semver change" name="@carbon/icons should not update exports without a semver change" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons-vue" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:51:55" time="9.426" tests="1">
    <testcase classname="@carbon/icons-vue should not update exports without a semver change" name="@carbon/icons-vue should not update exports without a semver change" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="111.421" tests="2">
    <testcase classname="@carbon/icons should export each SVG asset" name="@carbon/icons should export each SVG asset" time="51.837">
    </testcase>
    <testcase classname="@carbon/icons should export each SVG asset as a direct path" name="@carbon/icons should export each SVG asset as a direct path" time="51.935">
    </testcase>
  </testsuite>
  <testsuite name="@carbon/icons-vue" errors="0" failures="0" skipped="0" timestamp="2025-04-09T19:50:27" time="116.528" tests="2">
    <testcase classname="@carbon/icons-vue should export each SVG asset" name="@carbon/icons-vue should export each SVG asset" time="57.072">
    </testcase>
    <testcase classname="@carbon/icons-vue should export each SVG asset as a direct path" name="@carbon/icons-vue should export each SVG asset as a direct path" time="51.893">
    </testcase>
  </testsuite>
</testsuites>